
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000072c4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  08007474  08007474  00008474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a40  08007a40  00009144  2**0
                  CONTENTS
  4 .ARM          00000008  08007a40  08007a40  00008a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a48  08007a48  00009144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a48  08007a48  00008a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007a4c  08007a4c  00008a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000144  20000000  08007a50  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009144  2**0
                  CONTENTS
 10 .bss          000002a8  20000144  20000144  00009144  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200003ec  200003ec  00009144  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009144  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012a3b  00000000  00000000  00009174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003546  00000000  00000000  0001bbaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010b8  00000000  00000000  0001f0f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cbf  00000000  00000000  000201b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000258d0  00000000  00000000  00020e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017a09  00000000  00000000  0004673f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8030  00000000  00000000  0005e148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00136178  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004718  00000000  00000000  001361bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0013a8d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000144 	.word	0x20000144
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800745c 	.word	0x0800745c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000148 	.word	0x20000148
 80001ec:	0800745c 	.word	0x0800745c

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <PLLSAI_Init>:
            while (1){};
        }
}

void PLLSAI_Init(void)
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
    // PLLSAI Init
    RCC->PLLSAICFGR = (PLLSAI_N  << 6) | (PLLSAI_Q << 24) | (PLLSAI_R << 28);
 80005b4:	4b0f      	ldr	r3, [pc, #60]	@ (80005f4 <PLLSAI_Init+0x44>)
 80005b6:	4a10      	ldr	r2, [pc, #64]	@ (80005f8 <PLLSAI_Init+0x48>)
 80005b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    RCC->DCKCFGR = (RCC->DCKCFGR & (~RCC_DCKCFGR_PLLSAIDIVR)) | (PLLSAI_DIVR  << 16);
 80005bc:	4b0d      	ldr	r3, [pc, #52]	@ (80005f4 <PLLSAI_Init+0x44>)
 80005be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80005c2:	4a0c      	ldr	r2, [pc, #48]	@ (80005f4 <PLLSAI_Init+0x44>)
 80005c4:	f443 3340 	orr.w	r3, r3, #196608	@ 0x30000
 80005c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    // Enable SAI PLL
    RCC->CR |= RCC_CR_PLLSAION;
 80005cc:	4b09      	ldr	r3, [pc, #36]	@ (80005f4 <PLLSAI_Init+0x44>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a08      	ldr	r2, [pc, #32]	@ (80005f4 <PLLSAI_Init+0x44>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	6013      	str	r3, [r2, #0]
    // Wait for SAI PLL ready
    while((RCC->CR & RCC_CR_PLLSAIRDY) == 0){};
 80005d8:	bf00      	nop
 80005da:	4b06      	ldr	r3, [pc, #24]	@ (80005f4 <PLLSAI_Init+0x44>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d0f9      	beq.n	80005da <PLLSAI_Init+0x2a>
}
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	440032c0 	.word	0x440032c0

080005fc <Draw_Pixel>:

#define MAKE_RGB(R,G,B) (uint16_t)(((R & 0x1F) << 11) | ((G & 0x3F) << 5) | (B & 0x1F))

#define COLOR_BLACK     MAKE_RGB(0,0,0)
void Draw_Pixel(uint16_t x, uint16_t y, uint16_t color)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	80fb      	strh	r3, [r7, #6]
 8000606:	460b      	mov	r3, r1
 8000608:	80bb      	strh	r3, [r7, #4]
 800060a:	4613      	mov	r3, r2
 800060c:	807b      	strh	r3, [r7, #2]
    if ((x >= 0) && (x < LCD_ACTIVE_WIDTH) && (y >= 0) && (y < LCD_ACTIVE_HEIGHT))
 800060e:	88fb      	ldrh	r3, [r7, #6]
 8000610:	2bef      	cmp	r3, #239	@ 0xef
 8000612:	d811      	bhi.n	8000638 <Draw_Pixel+0x3c>
 8000614:	88bb      	ldrh	r3, [r7, #4]
 8000616:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 800061a:	d20d      	bcs.n	8000638 <Draw_Pixel+0x3c>
    {
        *((uint16_t *) (SDRAM_BASE + (x * PIXEL_WIDHT) + (y * (LCD_ACTIVE_WIDTH * PIXEL_WIDHT)))) = color;
 800061c:	88fb      	ldrh	r3, [r7, #6]
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	4619      	mov	r1, r3
 8000622:	88ba      	ldrh	r2, [r7, #4]
 8000624:	4613      	mov	r3, r2
 8000626:	011b      	lsls	r3, r3, #4
 8000628:	1a9b      	subs	r3, r3, r2
 800062a:	015b      	lsls	r3, r3, #5
 800062c:	440b      	add	r3, r1
 800062e:	f103 4350 	add.w	r3, r3, #3489660928	@ 0xd0000000
 8000632:	461a      	mov	r2, r3
 8000634:	887b      	ldrh	r3, [r7, #2]
 8000636:	8013      	strh	r3, [r2, #0]
    }
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <Draw_Char>:
    }
}

extern const unsigned char Font[]; // �?m b?o khai b�o Font l� extern n?u Font du?c d?nh nghia ? noi kh�c.

void Draw_Char(uint16_t x, uint16_t y, char ch, uint16_t color, uint16_t bgColor) {
 8000644:	b590      	push	{r4, r7, lr}
 8000646:	b085      	sub	sp, #20
 8000648:	af00      	add	r7, sp, #0
 800064a:	4604      	mov	r4, r0
 800064c:	4608      	mov	r0, r1
 800064e:	4611      	mov	r1, r2
 8000650:	461a      	mov	r2, r3
 8000652:	4623      	mov	r3, r4
 8000654:	80fb      	strh	r3, [r7, #6]
 8000656:	4603      	mov	r3, r0
 8000658:	80bb      	strh	r3, [r7, #4]
 800065a:	460b      	mov	r3, r1
 800065c:	70fb      	strb	r3, [r7, #3]
 800065e:	4613      	mov	r3, r2
 8000660:	803b      	strh	r3, [r7, #0]
    if (ch < 32 || ch > 126) return; // Ch? x? l� k� t? ASCII t? 32 d?n 126
 8000662:	78fb      	ldrb	r3, [r7, #3]
 8000664:	2b1f      	cmp	r3, #31
 8000666:	d948      	bls.n	80006fa <Draw_Char+0xb6>
 8000668:	78fb      	ldrb	r3, [r7, #3]
 800066a:	2b7e      	cmp	r3, #126	@ 0x7e
 800066c:	d845      	bhi.n	80006fa <Draw_Char+0xb6>

    const unsigned char *bitmap = &Font[(ch - 32) * 5]; // L?y bitmap cho k� t? t? Font
 800066e:	78fb      	ldrb	r3, [r7, #3]
 8000670:	f1a3 0220 	sub.w	r2, r3, #32
 8000674:	4613      	mov	r3, r2
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	4413      	add	r3, r2
 800067a:	4a22      	ldr	r2, [pc, #136]	@ (8000704 <Draw_Char+0xc0>)
 800067c:	4413      	add	r3, r2
 800067e:	60bb      	str	r3, [r7, #8]
    for (uint8_t i = 0; i < 5; i++) { // Duy?t qua 5 c?t c?a k� t?
 8000680:	2300      	movs	r3, #0
 8000682:	73fb      	strb	r3, [r7, #15]
 8000684:	e035      	b.n	80006f2 <Draw_Char+0xae>
        uint8_t line = bitmap[i];
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	68ba      	ldr	r2, [r7, #8]
 800068a:	4413      	add	r3, r2
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) { // Duy?t qua 8 d�ng (7 pixel v� 1 pixel tr?ng)
 8000690:	2300      	movs	r3, #0
 8000692:	737b      	strb	r3, [r7, #13]
 8000694:	e027      	b.n	80006e6 <Draw_Char+0xa2>
            if (line & 0x01) {
 8000696:	7bbb      	ldrb	r3, [r7, #14]
 8000698:	f003 0301 	and.w	r3, r3, #1
 800069c:	2b00      	cmp	r3, #0
 800069e:	d00e      	beq.n	80006be <Draw_Char+0x7a>
                Draw_Pixel(x + i, y + j, color); // V? pixel n?u bit 1
 80006a0:	7bfb      	ldrb	r3, [r7, #15]
 80006a2:	b29a      	uxth	r2, r3
 80006a4:	88fb      	ldrh	r3, [r7, #6]
 80006a6:	4413      	add	r3, r2
 80006a8:	b298      	uxth	r0, r3
 80006aa:	7b7b      	ldrb	r3, [r7, #13]
 80006ac:	b29a      	uxth	r2, r3
 80006ae:	88bb      	ldrh	r3, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	b29b      	uxth	r3, r3
 80006b4:	883a      	ldrh	r2, [r7, #0]
 80006b6:	4619      	mov	r1, r3
 80006b8:	f7ff ffa0 	bl	80005fc <Draw_Pixel>
 80006bc:	e00d      	b.n	80006da <Draw_Char+0x96>
            } else {
                Draw_Pixel(x + i, y + j, bgColor); // V? pixel n?n n?u bit 0
 80006be:	7bfb      	ldrb	r3, [r7, #15]
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	4413      	add	r3, r2
 80006c6:	b298      	uxth	r0, r3
 80006c8:	7b7b      	ldrb	r3, [r7, #13]
 80006ca:	b29a      	uxth	r2, r3
 80006cc:	88bb      	ldrh	r3, [r7, #4]
 80006ce:	4413      	add	r3, r2
 80006d0:	b29b      	uxth	r3, r3
 80006d2:	8c3a      	ldrh	r2, [r7, #32]
 80006d4:	4619      	mov	r1, r3
 80006d6:	f7ff ff91 	bl	80005fc <Draw_Pixel>
            }
            line >>= 1; // Chuy?n sang d�ng ti?p theo trong bitmap
 80006da:	7bbb      	ldrb	r3, [r7, #14]
 80006dc:	085b      	lsrs	r3, r3, #1
 80006de:	73bb      	strb	r3, [r7, #14]
        for (uint8_t j = 0; j < 8; j++) { // Duy?t qua 8 d�ng (7 pixel v� 1 pixel tr?ng)
 80006e0:	7b7b      	ldrb	r3, [r7, #13]
 80006e2:	3301      	adds	r3, #1
 80006e4:	737b      	strb	r3, [r7, #13]
 80006e6:	7b7b      	ldrb	r3, [r7, #13]
 80006e8:	2b07      	cmp	r3, #7
 80006ea:	d9d4      	bls.n	8000696 <Draw_Char+0x52>
    for (uint8_t i = 0; i < 5; i++) { // Duy?t qua 5 c?t c?a k� t?
 80006ec:	7bfb      	ldrb	r3, [r7, #15]
 80006ee:	3301      	adds	r3, #1
 80006f0:	73fb      	strb	r3, [r7, #15]
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	2b04      	cmp	r3, #4
 80006f6:	d9c6      	bls.n	8000686 <Draw_Char+0x42>
 80006f8:	e000      	b.n	80006fc <Draw_Char+0xb8>
    if (ch < 32 || ch > 126) return; // Ch? x? l� k� t? ASCII t? 32 d?n 126
 80006fa:	bf00      	nop
        }
    }
}
 80006fc:	3714      	adds	r7, #20
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd90      	pop	{r4, r7, pc}
 8000702:	bf00      	nop
 8000704:	080078cc 	.word	0x080078cc

08000708 <Draw_String>:



void Draw_String(uint16_t x, uint16_t y, const char *str, uint16_t color, uint16_t bgColor)
{
 8000708:	b590      	push	{r4, r7, lr}
 800070a:	b087      	sub	sp, #28
 800070c:	af02      	add	r7, sp, #8
 800070e:	60ba      	str	r2, [r7, #8]
 8000710:	461a      	mov	r2, r3
 8000712:	4603      	mov	r3, r0
 8000714:	81fb      	strh	r3, [r7, #14]
 8000716:	460b      	mov	r3, r1
 8000718:	81bb      	strh	r3, [r7, #12]
 800071a:	4613      	mov	r3, r2
 800071c:	80fb      	strh	r3, [r7, #6]
    while (*str) {
 800071e:	e00f      	b.n	8000740 <Draw_String+0x38>
        Draw_Char(x, y, *str, color, bgColor);
 8000720:	68bb      	ldr	r3, [r7, #8]
 8000722:	781a      	ldrb	r2, [r3, #0]
 8000724:	88fc      	ldrh	r4, [r7, #6]
 8000726:	89b9      	ldrh	r1, [r7, #12]
 8000728:	89f8      	ldrh	r0, [r7, #14]
 800072a:	8c3b      	ldrh	r3, [r7, #32]
 800072c:	9300      	str	r3, [sp, #0]
 800072e:	4623      	mov	r3, r4
 8000730:	f7ff ff88 	bl	8000644 <Draw_Char>
        x += 6;
 8000734:	89fb      	ldrh	r3, [r7, #14]
 8000736:	3306      	adds	r3, #6
 8000738:	81fb      	strh	r3, [r7, #14]
        str++;
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	3301      	adds	r3, #1
 800073e:	60bb      	str	r3, [r7, #8]
    while (*str) {
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	2b00      	cmp	r3, #0
 8000746:	d1eb      	bne.n	8000720 <Draw_String+0x18>
    }
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	bd90      	pop	{r4, r7, pc}

08000752 <Fill_Black>:

void Fill_Black(uint16_t startX, uint16_t endX, uint16_t startY, uint16_t endY)
{
 8000752:	b590      	push	{r4, r7, lr}
 8000754:	b085      	sub	sp, #20
 8000756:	af00      	add	r7, sp, #0
 8000758:	4604      	mov	r4, r0
 800075a:	4608      	mov	r0, r1
 800075c:	4611      	mov	r1, r2
 800075e:	461a      	mov	r2, r3
 8000760:	4623      	mov	r3, r4
 8000762:	80fb      	strh	r3, [r7, #6]
 8000764:	4603      	mov	r3, r0
 8000766:	80bb      	strh	r3, [r7, #4]
 8000768:	460b      	mov	r3, r1
 800076a:	807b      	strh	r3, [r7, #2]
 800076c:	4613      	mov	r3, r2
 800076e:	803b      	strh	r3, [r7, #0]
	for (uint16_t y = startY; y < endY; y++) {
 8000770:	887b      	ldrh	r3, [r7, #2]
 8000772:	81fb      	strh	r3, [r7, #14]
 8000774:	e012      	b.n	800079c <Fill_Black+0x4a>
		for (uint16_t x = startX; x < endX; x++) {
 8000776:	88fb      	ldrh	r3, [r7, #6]
 8000778:	81bb      	strh	r3, [r7, #12]
 800077a:	e008      	b.n	800078e <Fill_Black+0x3c>
			Draw_Pixel(x, y, COLOR_BLACK);
 800077c:	89f9      	ldrh	r1, [r7, #14]
 800077e:	89bb      	ldrh	r3, [r7, #12]
 8000780:	2200      	movs	r2, #0
 8000782:	4618      	mov	r0, r3
 8000784:	f7ff ff3a 	bl	80005fc <Draw_Pixel>
		for (uint16_t x = startX; x < endX; x++) {
 8000788:	89bb      	ldrh	r3, [r7, #12]
 800078a:	3301      	adds	r3, #1
 800078c:	81bb      	strh	r3, [r7, #12]
 800078e:	89ba      	ldrh	r2, [r7, #12]
 8000790:	88bb      	ldrh	r3, [r7, #4]
 8000792:	429a      	cmp	r2, r3
 8000794:	d3f2      	bcc.n	800077c <Fill_Black+0x2a>
	for (uint16_t y = startY; y < endY; y++) {
 8000796:	89fb      	ldrh	r3, [r7, #14]
 8000798:	3301      	adds	r3, #1
 800079a:	81fb      	strh	r3, [r7, #14]
 800079c:	89fa      	ldrh	r2, [r7, #14]
 800079e:	883b      	ldrh	r3, [r7, #0]
 80007a0:	429a      	cmp	r2, r3
 80007a2:	d3e8      	bcc.n	8000776 <Fill_Black+0x24>
		}
	}
}
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	3714      	adds	r7, #20
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd90      	pop	{r4, r7, pc}
	...

080007b0 <DS1307_Init>:
	
/**
 * @brief Initializes the DS1307 module. Sets clock halt bit to 0 to start timing.
 * @param hi2c User I2C handle pointer.
 */
void DS1307_Init(I2C_HandleTypeDef *hi2c) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
	_ds1307_ui2c = hi2c;
 80007b8:	4a04      	ldr	r2, [pc, #16]	@ (80007cc <DS1307_Init+0x1c>)
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	6013      	str	r3, [r2, #0]
	DS1307_SetClockHalt(0);
 80007be:	2000      	movs	r0, #0
 80007c0:	f000 f806 	bl	80007d0 <DS1307_SetClockHalt>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000160 	.word	0x20000160

080007d0 <DS1307_SetClockHalt>:

/**
 * @brief Sets clock halt bit.
 * @param halt Clock halt bit to set, 0 or 1. 0 to start timing, 0 to stop.
 */
void DS1307_SetClockHalt(uint8_t halt) {
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	4603      	mov	r3, r0
 80007d8:	71fb      	strb	r3, [r7, #7]
	uint8_t ch = (halt ? 1 << 7 : 0);
 80007da:	79fb      	ldrb	r3, [r7, #7]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <DS1307_SetClockHalt+0x14>
 80007e0:	2380      	movs	r3, #128	@ 0x80
 80007e2:	e000      	b.n	80007e6 <DS1307_SetClockHalt+0x16>
 80007e4:	2300      	movs	r3, #0
 80007e6:	73fb      	strb	r3, [r7, #15]
	DS1307_SetRegByte(DS1307_REG_SECOND, ch | (DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f));
 80007e8:	2000      	movs	r0, #0
 80007ea:	f000 f831 	bl	8000850 <DS1307_GetRegByte>
 80007ee:	4603      	mov	r3, r0
 80007f0:	b25b      	sxtb	r3, r3
 80007f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80007f6:	b25a      	sxtb	r2, r3
 80007f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007fc:	4313      	orrs	r3, r2
 80007fe:	b25b      	sxtb	r3, r3
 8000800:	b2db      	uxtb	r3, r3
 8000802:	4619      	mov	r1, r3
 8000804:	2000      	movs	r0, #0
 8000806:	f000 f805 	bl	8000814 <DS1307_SetRegByte>
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
	...

08000814 <DS1307_SetRegByte>:
/**
 * @brief Sets the byte in the designated DS1307 register to value.
 * @param regAddr Register address to write.
 * @param val Value to set, 0 to 255.
 */
void DS1307_SetRegByte(uint8_t regAddr, uint8_t val) {
 8000814:	b580      	push	{r7, lr}
 8000816:	b086      	sub	sp, #24
 8000818:	af02      	add	r7, sp, #8
 800081a:	4603      	mov	r3, r0
 800081c:	460a      	mov	r2, r1
 800081e:	71fb      	strb	r3, [r7, #7]
 8000820:	4613      	mov	r3, r2
 8000822:	71bb      	strb	r3, [r7, #6]
	uint8_t bytes[2] = { regAddr, val };
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	733b      	strb	r3, [r7, #12]
 8000828:	79bb      	ldrb	r3, [r7, #6]
 800082a:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, bytes, 2, DS1307_TIMEOUT);
 800082c:	4b07      	ldr	r3, [pc, #28]	@ (800084c <DS1307_SetRegByte+0x38>)
 800082e:	6818      	ldr	r0, [r3, #0]
 8000830:	f107 020c 	add.w	r2, r7, #12
 8000834:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000838:	9300      	str	r3, [sp, #0]
 800083a:	2302      	movs	r3, #2
 800083c:	21d0      	movs	r1, #208	@ 0xd0
 800083e:	f003 fe81 	bl	8004544 <HAL_I2C_Master_Transmit>
}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	20000160 	.word	0x20000160

08000850 <DS1307_GetRegByte>:
/**
 * @brief Gets the byte in the designated DS1307 register.
 * @param regAddr Register address to read.
 * @return Value stored in the register, 0 to 255.
 */
uint8_t DS1307_GetRegByte(uint8_t regAddr) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b086      	sub	sp, #24
 8000854:	af02      	add	r7, sp, #8
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
	uint8_t val;
	HAL_I2C_Master_Transmit(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &regAddr, 1, DS1307_TIMEOUT);
 800085a:	4b0d      	ldr	r3, [pc, #52]	@ (8000890 <DS1307_GetRegByte+0x40>)
 800085c:	6818      	ldr	r0, [r3, #0]
 800085e:	1dfa      	adds	r2, r7, #7
 8000860:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000864:	9300      	str	r3, [sp, #0]
 8000866:	2301      	movs	r3, #1
 8000868:	21d0      	movs	r1, #208	@ 0xd0
 800086a:	f003 fe6b 	bl	8004544 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_ds1307_ui2c, DS1307_I2C_ADDR << 1, &val, 1, DS1307_TIMEOUT);
 800086e:	4b08      	ldr	r3, [pc, #32]	@ (8000890 <DS1307_GetRegByte+0x40>)
 8000870:	6818      	ldr	r0, [r3, #0]
 8000872:	f107 020f 	add.w	r2, r7, #15
 8000876:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	2301      	movs	r3, #1
 800087e:	21d0      	movs	r1, #208	@ 0xd0
 8000880:	f003 ff5e 	bl	8004740 <HAL_I2C_Master_Receive>
	return val;
 8000884:	7bfb      	ldrb	r3, [r7, #15]
}
 8000886:	4618      	mov	r0, r3
 8000888:	3710      	adds	r7, #16
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	20000160 	.word	0x20000160

08000894 <DS1307_GetDayOfWeek>:

/**
 * @brief Gets the current day of week.
 * @return Days from last Sunday, 0 to 6.
 */
uint8_t DS1307_GetDayOfWeek(void) {
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DOW));
 8000898:	2003      	movs	r0, #3
 800089a:	f7ff ffd9 	bl	8000850 <DS1307_GetRegByte>
 800089e:	4603      	mov	r3, r0
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f866 	bl	8000972 <DS1307_DecodeBCD>
 80008a6:	4603      	mov	r3, r0
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	bd80      	pop	{r7, pc}

080008ac <DS1307_GetDate>:

/**
 * @brief Gets the current day of month.
 * @return Day of month, 1 to 31.
 */
uint8_t DS1307_GetDate(void) {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_DATE));
 80008b0:	2004      	movs	r0, #4
 80008b2:	f7ff ffcd 	bl	8000850 <DS1307_GetRegByte>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4618      	mov	r0, r3
 80008ba:	f000 f85a 	bl	8000972 <DS1307_DecodeBCD>
 80008be:	4603      	mov	r3, r0
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <DS1307_GetMonth>:

/**
 * @brief Gets the current month.
 * @return Month, 1 to 12.
 */
uint8_t DS1307_GetMonth(void) {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MONTH));
 80008c8:	2005      	movs	r0, #5
 80008ca:	f7ff ffc1 	bl	8000850 <DS1307_GetRegByte>
 80008ce:	4603      	mov	r3, r0
 80008d0:	4618      	mov	r0, r3
 80008d2:	f000 f84e 	bl	8000972 <DS1307_DecodeBCD>
 80008d6:	4603      	mov	r3, r0
}
 80008d8:	4618      	mov	r0, r3
 80008da:	bd80      	pop	{r7, pc}

080008dc <DS1307_GetYear>:

/**
 * @brief Gets the current year.
 * @return Year, 2000 to 2099.
 */
uint16_t DS1307_GetYear(void) {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
	uint16_t cen = DS1307_GetRegByte(DS1307_REG_CENT) * 100;
 80008e2:	2010      	movs	r0, #16
 80008e4:	f7ff ffb4 	bl	8000850 <DS1307_GetRegByte>
 80008e8:	4603      	mov	r3, r0
 80008ea:	461a      	mov	r2, r3
 80008ec:	0092      	lsls	r2, r2, #2
 80008ee:	4413      	add	r3, r2
 80008f0:	461a      	mov	r2, r3
 80008f2:	0091      	lsls	r1, r2, #2
 80008f4:	461a      	mov	r2, r3
 80008f6:	460b      	mov	r3, r1
 80008f8:	4413      	add	r3, r2
 80008fa:	009b      	lsls	r3, r3, #2
 80008fc:	80fb      	strh	r3, [r7, #6]
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_YEAR)) + cen;
 80008fe:	2006      	movs	r0, #6
 8000900:	f7ff ffa6 	bl	8000850 <DS1307_GetRegByte>
 8000904:	4603      	mov	r3, r0
 8000906:	4618      	mov	r0, r3
 8000908:	f000 f833 	bl	8000972 <DS1307_DecodeBCD>
 800090c:	4603      	mov	r3, r0
 800090e:	461a      	mov	r2, r3
 8000910:	88fb      	ldrh	r3, [r7, #6]
 8000912:	4413      	add	r3, r2
 8000914:	b29b      	uxth	r3, r3
}
 8000916:	4618      	mov	r0, r3
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}

0800091e <DS1307_GetHour>:

/**
 * @brief Gets the current hour in 24h format.
 * @return Hour in 24h format, 0 to 23.
 */
uint8_t DS1307_GetHour(void) {
 800091e:	b580      	push	{r7, lr}
 8000920:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_HOUR) & 0x3f);
 8000922:	2002      	movs	r0, #2
 8000924:	f7ff ff94 	bl	8000850 <DS1307_GetRegByte>
 8000928:	4603      	mov	r3, r0
 800092a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f000 f81e 	bl	8000972 <DS1307_DecodeBCD>
 8000936:	4603      	mov	r3, r0
}
 8000938:	4618      	mov	r0, r3
 800093a:	bd80      	pop	{r7, pc}

0800093c <DS1307_GetMinute>:

/**
 * @brief Gets the current minute.
 * @return Minute, 0 to 59.
 */
uint8_t DS1307_GetMinute(void) {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_MINUTE));
 8000940:	2001      	movs	r0, #1
 8000942:	f7ff ff85 	bl	8000850 <DS1307_GetRegByte>
 8000946:	4603      	mov	r3, r0
 8000948:	4618      	mov	r0, r3
 800094a:	f000 f812 	bl	8000972 <DS1307_DecodeBCD>
 800094e:	4603      	mov	r3, r0
}
 8000950:	4618      	mov	r0, r3
 8000952:	bd80      	pop	{r7, pc}

08000954 <DS1307_GetSecond>:

/**
 * @brief Gets the current second. Clock halt bit not included.
 * @return Second, 0 to 59.
 */
uint8_t DS1307_GetSecond(void) {
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
	return DS1307_DecodeBCD(DS1307_GetRegByte(DS1307_REG_SECOND) & 0x7f);
 8000958:	2000      	movs	r0, #0
 800095a:	f7ff ff79 	bl	8000850 <DS1307_GetRegByte>
 800095e:	4603      	mov	r3, r0
 8000960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000964:	b2db      	uxtb	r3, r3
 8000966:	4618      	mov	r0, r3
 8000968:	f000 f803 	bl	8000972 <DS1307_DecodeBCD>
 800096c:	4603      	mov	r3, r0
}
 800096e:	4618      	mov	r0, r3
 8000970:	bd80      	pop	{r7, pc}

08000972 <DS1307_DecodeBCD>:
/**
 * @brief Decodes the raw binary value stored in registers to decimal format.
 * @param bin Binary-coded decimal value retrieved from register, 0 to 255.
 * @return Decoded decimal value.
 */
uint8_t DS1307_DecodeBCD(uint8_t bin) {
 8000972:	b480      	push	{r7}
 8000974:	b083      	sub	sp, #12
 8000976:	af00      	add	r7, sp, #0
 8000978:	4603      	mov	r3, r0
 800097a:	71fb      	strb	r3, [r7, #7]
	return (((bin & 0xf0) >> 4) * 10) + (bin & 0x0f);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	091b      	lsrs	r3, r3, #4
 8000980:	b2db      	uxtb	r3, r3
 8000982:	461a      	mov	r2, r3
 8000984:	0092      	lsls	r2, r2, #2
 8000986:	4413      	add	r3, r2
 8000988:	005b      	lsls	r3, r3, #1
 800098a:	b2da      	uxtb	r2, r3
 800098c:	79fb      	ldrb	r3, [r7, #7]
 800098e:	f003 030f 	and.w	r3, r3, #15
 8000992:	b2db      	uxtb	r3, r3
 8000994:	4413      	add	r3, r2
 8000996:	b2db      	uxtb	r3, r3
}
 8000998:	4618      	mov	r0, r3
 800099a:	370c      	adds	r7, #12
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <Flash_Write_CharArr>:
 *      Author: phat
 */

#include "flash_mem.h"

uint32_t Flash_Write_CharArr(char *data, uint32_t startAddress) {
 80009a4:	b5b0      	push	{r4, r5, r7, lr}
 80009a6:	b088      	sub	sp, #32
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	6039      	str	r1, [r7, #0]
    uint32_t endAddress = startAddress;
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	61fb      	str	r3, [r7, #28]
    uint32_t dataLength = strlen(data) + 1;
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff fc26 	bl	8000204 <strlen>
 80009b8:	4603      	mov	r3, r0
 80009ba:	3301      	adds	r3, #1
 80009bc:	613b      	str	r3, [r7, #16]
    uint32_t word;
    HAL_FLASH_Unlock();
 80009be:	f002 ffed 	bl	800399c <HAL_FLASH_Unlock>
    for (uint32_t i = 0; i < dataLength; i += 4) {
 80009c2:	2300      	movs	r3, #0
 80009c4:	61bb      	str	r3, [r7, #24]
 80009c6:	e033      	b.n	8000a30 <Flash_Write_CharArr+0x8c>
        word = 0xFFFFFFFF;
 80009c8:	f04f 33ff 	mov.w	r3, #4294967295
 80009cc:	60fb      	str	r3, [r7, #12]
        for (uint32_t j = 0; j < 4 && (i + j) < dataLength; j++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	e00d      	b.n	80009f0 <Flash_Write_CharArr+0x4c>
            ((uint8_t*)&word)[j] = data[i + j];
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	697b      	ldr	r3, [r7, #20]
 80009d8:	4413      	add	r3, r2
 80009da:	687a      	ldr	r2, [r7, #4]
 80009dc:	441a      	add	r2, r3
 80009de:	f107 010c 	add.w	r1, r7, #12
 80009e2:	697b      	ldr	r3, [r7, #20]
 80009e4:	440b      	add	r3, r1
 80009e6:	7812      	ldrb	r2, [r2, #0]
 80009e8:	701a      	strb	r2, [r3, #0]
        for (uint32_t j = 0; j < 4 && (i + j) < dataLength; j++) {
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	3301      	adds	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	2b03      	cmp	r3, #3
 80009f4:	d805      	bhi.n	8000a02 <Flash_Write_CharArr+0x5e>
 80009f6:	69ba      	ldr	r2, [r7, #24]
 80009f8:	697b      	ldr	r3, [r7, #20]
 80009fa:	4413      	add	r3, r2
 80009fc:	693a      	ldr	r2, [r7, #16]
 80009fe:	429a      	cmp	r2, r3
 8000a00:	d8e8      	bhi.n	80009d4 <Flash_Write_CharArr+0x30>
        }
        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, endAddress, word) != HAL_OK) {
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	2200      	movs	r2, #0
 8000a06:	461c      	mov	r4, r3
 8000a08:	4615      	mov	r5, r2
 8000a0a:	4622      	mov	r2, r4
 8000a0c:	462b      	mov	r3, r5
 8000a0e:	69f9      	ldr	r1, [r7, #28]
 8000a10:	2002      	movs	r0, #2
 8000a12:	f002 ff6f 	bl	80038f4 <HAL_FLASH_Program>
 8000a16:	4603      	mov	r3, r0
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d003      	beq.n	8000a24 <Flash_Write_CharArr+0x80>
            HAL_FLASH_Lock();
 8000a1c:	f002 ffe0 	bl	80039e0 <HAL_FLASH_Lock>
            return 0;
 8000a20:	2300      	movs	r3, #0
 8000a22:	e00c      	b.n	8000a3e <Flash_Write_CharArr+0x9a>
        }
        endAddress += 4;
 8000a24:	69fb      	ldr	r3, [r7, #28]
 8000a26:	3304      	adds	r3, #4
 8000a28:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < dataLength; i += 4) {
 8000a2a:	69bb      	ldr	r3, [r7, #24]
 8000a2c:	3304      	adds	r3, #4
 8000a2e:	61bb      	str	r3, [r7, #24]
 8000a30:	69ba      	ldr	r2, [r7, #24]
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	d3c7      	bcc.n	80009c8 <Flash_Write_CharArr+0x24>
    }
    HAL_FLASH_Lock();
 8000a38:	f002 ffd2 	bl	80039e0 <HAL_FLASH_Lock>
    return endAddress;
 8000a3c:	69fb      	ldr	r3, [r7, #28]
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	3720      	adds	r7, #32
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bdb0      	pop	{r4, r5, r7, pc}

08000a46 <Flash_Read_Byte>:
        return status; // Write failed
    }
    HAL_FLASH_Lock();
    return HAL_OK;
}
uint8_t Flash_Read_Byte(uint32_t address) {
 8000a46:	b480      	push	{r7}
 8000a48:	b083      	sub	sp, #12
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
    return *(uint8_t *)address;
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	781b      	ldrb	r3, [r3, #0]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <Flash_Read_CharArr>:
uint8_t Flash_Read_CharArr(char *buffer, uint32_t startAddress) {
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b084      	sub	sp, #16
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	6078      	str	r0, [r7, #4]
 8000a66:	6039      	str	r1, [r7, #0]
	if (Flash_Read_Byte(startAddress) == 0xFF) {
 8000a68:	6838      	ldr	r0, [r7, #0]
 8000a6a:	f7ff ffec 	bl	8000a46 <Flash_Read_Byte>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2bff      	cmp	r3, #255	@ 0xff
 8000a72:	d101      	bne.n	8000a78 <Flash_Read_CharArr+0x1a>
		return 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	e016      	b.n	8000aa6 <Flash_Read_CharArr+0x48>
	}
    uint32_t i = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
    while (1) {
        buffer[i] = *((char*)(startAddress + i));
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	4413      	add	r3, r2
 8000a82:	4619      	mov	r1, r3
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	4413      	add	r3, r2
 8000a8a:	780a      	ldrb	r2, [r1, #0]
 8000a8c:	701a      	strb	r2, [r3, #0]
        if (buffer[i] == '\0') break;
 8000a8e:	687a      	ldr	r2, [r7, #4]
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	4413      	add	r3, r2
 8000a94:	781b      	ldrb	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d003      	beq.n	8000aa2 <Flash_Read_CharArr+0x44>
        i++;
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	60fb      	str	r3, [r7, #12]
        buffer[i] = *((char*)(startAddress + i));
 8000aa0:	e7ec      	b.n	8000a7c <Flash_Read_CharArr+0x1e>
        if (buffer[i] == '\0') break;
 8000aa2:	bf00      	nop
    }
    return 1;
 8000aa4:	2301      	movs	r3, #1
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}

08000aae <Flash_Erase_Sector11>:

uint8_t Flash_Erase_Sector11() {
 8000aae:	b580      	push	{r7, lr}
 8000ab0:	b086      	sub	sp, #24
 8000ab2:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8000ab4:	f002 ff72 	bl	800399c <HAL_FLASH_Unlock>
	FLASH_EraseInitTypeDef eraseInitStruct;
	uint32_t sectorError;
	eraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	607b      	str	r3, [r7, #4]
	eraseInitStruct.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8000abc:	2302      	movs	r3, #2
 8000abe:	617b      	str	r3, [r7, #20]
	eraseInitStruct.Sector = FLASH_SECTOR_11;
 8000ac0:	230b      	movs	r3, #11
 8000ac2:	60fb      	str	r3, [r7, #12]
	eraseInitStruct.NbSectors = 1;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	613b      	str	r3, [r7, #16]
	if (HAL_FLASHEx_Erase(&eraseInitStruct, &sectorError) != HAL_OK) {
 8000ac8:	463a      	mov	r2, r7
 8000aca:	1d3b      	adds	r3, r7, #4
 8000acc:	4611      	mov	r1, r2
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f003 f8d6 	bl	8003c80 <HAL_FLASHEx_Erase>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d003      	beq.n	8000ae2 <Flash_Erase_Sector11+0x34>
		HAL_FLASH_Lock();
 8000ada:	f002 ff81 	bl	80039e0 <HAL_FLASH_Lock>
		return 0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	e002      	b.n	8000ae8 <Flash_Erase_Sector11+0x3a>
	}
	HAL_FLASH_Lock();
 8000ae2:	f002 ff7d 	bl	80039e0 <HAL_FLASH_Lock>
	return 1;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b08c      	sub	sp, #48	@ 0x30
 8000af4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af6:	f107 031c 	add.w	r3, r7, #28
 8000afa:	2200      	movs	r2, #0
 8000afc:	601a      	str	r2, [r3, #0]
 8000afe:	605a      	str	r2, [r3, #4]
 8000b00:	609a      	str	r2, [r3, #8]
 8000b02:	60da      	str	r2, [r3, #12]
 8000b04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b06:	2300      	movs	r3, #0
 8000b08:	61bb      	str	r3, [r7, #24]
 8000b0a:	4b79      	ldr	r3, [pc, #484]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0e:	4a78      	ldr	r2, [pc, #480]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000b10:	f043 0310 	orr.w	r3, r3, #16
 8000b14:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b16:	4b76      	ldr	r3, [pc, #472]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1a:	f003 0310 	and.w	r3, r3, #16
 8000b1e:	61bb      	str	r3, [r7, #24]
 8000b20:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	617b      	str	r3, [r7, #20]
 8000b26:	4b72      	ldr	r3, [pc, #456]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2a:	4a71      	ldr	r2, [pc, #452]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000b2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b30:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b32:	4b6f      	ldr	r3, [pc, #444]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b3a:	617b      	str	r3, [r7, #20]
 8000b3c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	613b      	str	r3, [r7, #16]
 8000b42:	4b6b      	ldr	r3, [pc, #428]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a6a      	ldr	r2, [pc, #424]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b68      	ldr	r3, [pc, #416]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	613b      	str	r3, [r7, #16]
 8000b58:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b64      	ldr	r3, [pc, #400]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a63      	ldr	r2, [pc, #396]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b61      	ldr	r3, [pc, #388]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	4b5d      	ldr	r3, [pc, #372]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b7e:	4a5c      	ldr	r2, [pc, #368]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000b80:	f043 0308 	orr.w	r3, r3, #8
 8000b84:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b86:	4b5a      	ldr	r3, [pc, #360]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	f003 0308 	and.w	r3, r3, #8
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b92:	2300      	movs	r3, #0
 8000b94:	607b      	str	r3, [r7, #4]
 8000b96:	4b56      	ldr	r3, [pc, #344]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9a:	4a55      	ldr	r2, [pc, #340]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000b9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ba0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba2:	4b53      	ldr	r3, [pc, #332]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	603b      	str	r3, [r7, #0]
 8000bb2:	4b4f      	ldr	r3, [pc, #316]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb6:	4a4e      	ldr	r2, [pc, #312]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000bb8:	f043 0304 	orr.w	r3, r3, #4
 8000bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bbe:	4b4c      	ldr	r3, [pc, #304]	@ (8000cf0 <MX_GPIO_Init+0x200>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	f003 0304 	and.w	r3, r3, #4
 8000bc6:	603b      	str	r3, [r7, #0]
 8000bc8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	2118      	movs	r1, #24
 8000bce:	4849      	ldr	r0, [pc, #292]	@ (8000cf4 <MX_GPIO_Init+0x204>)
 8000bd0:	f003 fb42 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	2110      	movs	r1, #16
 8000bd8:	4847      	ldr	r0, [pc, #284]	@ (8000cf8 <MX_GPIO_Init+0x208>)
 8000bda:	f003 fb3d 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	2101      	movs	r1, #1
 8000be2:	4846      	ldr	r0, [pc, #280]	@ (8000cfc <MX_GPIO_Init+0x20c>)
 8000be4:	f003 fb38 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bee:	4844      	ldr	r0, [pc, #272]	@ (8000d00 <MX_GPIO_Init+0x210>)
 8000bf0:	f003 fb32 	bl	8004258 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE3 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000bf4:	2318      	movs	r3, #24
 8000bf6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	4619      	mov	r1, r3
 8000c0a:	483a      	ldr	r0, [pc, #232]	@ (8000cf4 <MX_GPIO_Init+0x204>)
 8000c0c:	f003 f978 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c10:	2301      	movs	r3, #1
 8000c12:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c14:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000c18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	f107 031c 	add.w	r3, r7, #28
 8000c22:	4619      	mov	r1, r3
 8000c24:	4834      	ldr	r0, [pc, #208]	@ (8000cf8 <MX_GPIO_Init+0x208>)
 8000c26:	f003 f96b 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000c2a:	2310      	movs	r3, #16
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	482d      	ldr	r0, [pc, #180]	@ (8000cf8 <MX_GPIO_Init+0x208>)
 8000c42:	f003 f95d 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c46:	2301      	movs	r3, #1
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	f107 031c 	add.w	r3, r7, #28
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	4827      	ldr	r0, [pc, #156]	@ (8000cfc <MX_GPIO_Init+0x20c>)
 8000c5e:	f003 f94f 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000c62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c68:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000c6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c72:	f107 031c 	add.w	r3, r7, #28
 8000c76:	4619      	mov	r1, r3
 8000c78:	4822      	ldr	r0, [pc, #136]	@ (8000d04 <MX_GPIO_Init+0x214>)
 8000c7a:	f003 f941 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c7e:	2304      	movs	r3, #4
 8000c80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000c82:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	481b      	ldr	r0, [pc, #108]	@ (8000d00 <MX_GPIO_Init+0x210>)
 8000c94:	f003 f934 	bl	8003f00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000c98:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4813      	ldr	r0, [pc, #76]	@ (8000d00 <MX_GPIO_Init+0x210>)
 8000cb2:	f003 f925 	bl	8003f00 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	2100      	movs	r1, #0
 8000cba:	2006      	movs	r0, #6
 8000cbc:	f002 fde3 	bl	8003886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000cc0:	2006      	movs	r0, #6
 8000cc2:	f002 fdfc 	bl	80038be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2100      	movs	r1, #0
 8000cca:	2008      	movs	r0, #8
 8000ccc:	f002 fddb 	bl	8003886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000cd0:	2008      	movs	r0, #8
 8000cd2:	f002 fdf4 	bl	80038be <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	2100      	movs	r1, #0
 8000cda:	2028      	movs	r0, #40	@ 0x28
 8000cdc:	f002 fdd3 	bl	8003886 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ce0:	2028      	movs	r0, #40	@ 0x28
 8000ce2:	f002 fdec 	bl	80038be <HAL_NVIC_EnableIRQ>

}
 8000ce6:	bf00      	nop
 8000ce8:	3730      	adds	r7, #48	@ 0x30
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	40023800 	.word	0x40023800
 8000cf4:	40021000 	.word	0x40021000
 8000cf8:	40020000 	.word	0x40020000
 8000cfc:	40020400 	.word	0x40020400
 8000d00:	40021800 	.word	0x40021800
 8000d04:	40020c00 	.word	0x40020c00

08000d08 <Pin_Cfg>:
#include "gpio_cfg.h"

void Pin_Cfg(GPIO_TypeDef * GPIO, uint8_t pin, GPIO_MODER_Type mode, GPIO_OTYPER_Type type, GPIO_OSPEEDR_Type speed, GPIO_PUPDR_Type pull, GPIO_AF_Type af)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b083      	sub	sp, #12
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
 8000d10:	4608      	mov	r0, r1
 8000d12:	4611      	mov	r1, r2
 8000d14:	461a      	mov	r2, r3
 8000d16:	4603      	mov	r3, r0
 8000d18:	70fb      	strb	r3, [r7, #3]
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	70bb      	strb	r3, [r7, #2]
 8000d1e:	4613      	mov	r3, r2
 8000d20:	707b      	strb	r3, [r7, #1]
    GPIO->MODER = (GPIO->MODER & ((uint32_t)~(0x03 << (pin * 2)))) | (mode << (pin * 2));
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	78fa      	ldrb	r2, [r7, #3]
 8000d28:	0052      	lsls	r2, r2, #1
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d30:	43d2      	mvns	r2, r2
 8000d32:	4013      	ands	r3, r2
 8000d34:	78b9      	ldrb	r1, [r7, #2]
 8000d36:	78fa      	ldrb	r2, [r7, #3]
 8000d38:	0052      	lsls	r2, r2, #1
 8000d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d3e:	431a      	orrs	r2, r3
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	601a      	str	r2, [r3, #0]
    GPIO->OTYPER = (GPIO->OTYPER & ((uint32_t)~(0x01 << pin))) | (type << pin);
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	78fa      	ldrb	r2, [r7, #3]
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d50:	43d2      	mvns	r2, r2
 8000d52:	4013      	ands	r3, r2
 8000d54:	7879      	ldrb	r1, [r7, #1]
 8000d56:	78fa      	ldrb	r2, [r7, #3]
 8000d58:	fa01 f202 	lsl.w	r2, r1, r2
 8000d5c:	431a      	orrs	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	605a      	str	r2, [r3, #4]
    GPIO->OSPEEDR = (GPIO->OSPEEDR & ((uint32_t)~(0x03 << (pin * 2)))) | (speed << (pin * 2));
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	689b      	ldr	r3, [r3, #8]
 8000d66:	78fa      	ldrb	r2, [r7, #3]
 8000d68:	0052      	lsls	r2, r2, #1
 8000d6a:	2103      	movs	r1, #3
 8000d6c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d70:	43d2      	mvns	r2, r2
 8000d72:	4013      	ands	r3, r2
 8000d74:	7c39      	ldrb	r1, [r7, #16]
 8000d76:	78fa      	ldrb	r2, [r7, #3]
 8000d78:	0052      	lsls	r2, r2, #1
 8000d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	609a      	str	r2, [r3, #8]
    GPIO->PUPDR = (GPIO->PUPDR & ((uint32_t)~(0x03 << (pin * 2)))) | (pull << (pin * 2));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	78fa      	ldrb	r2, [r7, #3]
 8000d8a:	0052      	lsls	r2, r2, #1
 8000d8c:	2103      	movs	r1, #3
 8000d8e:	fa01 f202 	lsl.w	r2, r1, r2
 8000d92:	43d2      	mvns	r2, r2
 8000d94:	4013      	ands	r3, r2
 8000d96:	7d39      	ldrb	r1, [r7, #20]
 8000d98:	78fa      	ldrb	r2, [r7, #3]
 8000d9a:	0052      	lsls	r2, r2, #1
 8000d9c:	fa01 f202 	lsl.w	r2, r1, r2
 8000da0:	431a      	orrs	r2, r3
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	60da      	str	r2, [r3, #12]
    if (af != AF_NONE)
 8000da6:	7e3b      	ldrb	r3, [r7, #24]
 8000da8:	2b10      	cmp	r3, #16
 8000daa:	d027      	beq.n	8000dfc <Pin_Cfg+0xf4>
    {
        if (pin > 7)
 8000dac:	78fb      	ldrb	r3, [r7, #3]
 8000dae:	2b07      	cmp	r3, #7
 8000db0:	d913      	bls.n	8000dda <Pin_Cfg+0xd2>
        {
            GPIO->AFR[1] = (GPIO->AFR[1] & ((uint32_t)~(0x0F << ((pin - 8) * 4)))) | (af << ((pin - 8) * 4));
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000db6:	78fa      	ldrb	r2, [r7, #3]
 8000db8:	3a08      	subs	r2, #8
 8000dba:	0092      	lsls	r2, r2, #2
 8000dbc:	210f      	movs	r1, #15
 8000dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc2:	43d2      	mvns	r2, r2
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	7e39      	ldrb	r1, [r7, #24]
 8000dc8:	78fa      	ldrb	r2, [r7, #3]
 8000dca:	3a08      	subs	r2, #8
 8000dcc:	0092      	lsls	r2, r2, #2
 8000dce:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	625a      	str	r2, [r3, #36]	@ 0x24
            else
            {
                GPIO->AFR[0] = (GPIO->AFR[0] & ((uint32_t)~(0x0F << (pin * 4)))) | (af << ((pin) * 4));
            }
    }
}
 8000dd8:	e010      	b.n	8000dfc <Pin_Cfg+0xf4>
                GPIO->AFR[0] = (GPIO->AFR[0] & ((uint32_t)~(0x0F << (pin * 4)))) | (af << ((pin) * 4));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a1b      	ldr	r3, [r3, #32]
 8000dde:	78fa      	ldrb	r2, [r7, #3]
 8000de0:	0092      	lsls	r2, r2, #2
 8000de2:	210f      	movs	r1, #15
 8000de4:	fa01 f202 	lsl.w	r2, r1, r2
 8000de8:	43d2      	mvns	r2, r2
 8000dea:	4013      	ands	r3, r2
 8000dec:	7e39      	ldrb	r1, [r7, #24]
 8000dee:	78fa      	ldrb	r2, [r7, #3]
 8000df0:	0092      	lsls	r2, r2, #2
 8000df2:	fa01 f202 	lsl.w	r2, r1, r2
 8000df6:	431a      	orrs	r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	621a      	str	r2, [r3, #32]
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e7c <MX_I2C3_Init+0x74>)
 8000e0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000e80 <MX_I2C3_Init+0x78>)
 8000e10:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000e12:	4b1a      	ldr	r3, [pc, #104]	@ (8000e7c <MX_I2C3_Init+0x74>)
 8000e14:	4a1b      	ldr	r2, [pc, #108]	@ (8000e84 <MX_I2C3_Init+0x7c>)
 8000e16:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000e18:	4b18      	ldr	r3, [pc, #96]	@ (8000e7c <MX_I2C3_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000e1e:	4b17      	ldr	r3, [pc, #92]	@ (8000e7c <MX_I2C3_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e24:	4b15      	ldr	r3, [pc, #84]	@ (8000e7c <MX_I2C3_Init+0x74>)
 8000e26:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000e2a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e2c:	4b13      	ldr	r3, [pc, #76]	@ (8000e7c <MX_I2C3_Init+0x74>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000e32:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <MX_I2C3_Init+0x74>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e38:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <MX_I2C3_Init+0x74>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	@ (8000e7c <MX_I2C3_Init+0x74>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000e44:	480d      	ldr	r0, [pc, #52]	@ (8000e7c <MX_I2C3_Init+0x74>)
 8000e46:	f003 fa39 	bl	80042bc <HAL_I2C_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000e50:	f001 fd02 	bl	8002858 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e54:	2100      	movs	r1, #0
 8000e56:	4809      	ldr	r0, [pc, #36]	@ (8000e7c <MX_I2C3_Init+0x74>)
 8000e58:	f004 fa2a 	bl	80052b0 <HAL_I2CEx_ConfigAnalogFilter>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d001      	beq.n	8000e66 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000e62:	f001 fcf9 	bl	8002858 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e66:	2100      	movs	r1, #0
 8000e68:	4804      	ldr	r0, [pc, #16]	@ (8000e7c <MX_I2C3_Init+0x74>)
 8000e6a:	f004 fa5d 	bl	8005328 <HAL_I2CEx_ConfigDigitalFilter>
 8000e6e:	4603      	mov	r3, r0
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d001      	beq.n	8000e78 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000e74:	f001 fcf0 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000164 	.word	0x20000164
 8000e80:	40005c00 	.word	0x40005c00
 8000e84:	000186a0 	.word	0x000186a0

08000e88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08a      	sub	sp, #40	@ 0x28
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e90:	f107 0314 	add.w	r3, r7, #20
 8000e94:	2200      	movs	r2, #0
 8000e96:	601a      	str	r2, [r3, #0]
 8000e98:	605a      	str	r2, [r3, #4]
 8000e9a:	609a      	str	r2, [r3, #8]
 8000e9c:	60da      	str	r2, [r3, #12]
 8000e9e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C3)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a29      	ldr	r2, [pc, #164]	@ (8000f4c <HAL_I2C_MspInit+0xc4>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d14b      	bne.n	8000f42 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	613b      	str	r3, [r7, #16]
 8000eae:	4b28      	ldr	r3, [pc, #160]	@ (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb2:	4a27      	ldr	r2, [pc, #156]	@ (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000eb4:	f043 0304 	orr.w	r3, r3, #4
 8000eb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eba:	4b25      	ldr	r3, [pc, #148]	@ (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	f003 0304 	and.w	r3, r3, #4
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	4b21      	ldr	r3, [pc, #132]	@ (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a20      	ldr	r2, [pc, #128]	@ (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000ed0:	f043 0301 	orr.w	r3, r3, #1
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0301 	and.w	r3, r3, #1
 8000ede:	60fb      	str	r3, [r7, #12]
 8000ee0:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ee2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee8:	2312      	movs	r3, #18
 8000eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef0:	2303      	movs	r3, #3
 8000ef2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ef4:	2304      	movs	r3, #4
 8000ef6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ef8:	f107 0314 	add.w	r3, r7, #20
 8000efc:	4619      	mov	r1, r3
 8000efe:	4815      	ldr	r0, [pc, #84]	@ (8000f54 <HAL_I2C_MspInit+0xcc>)
 8000f00:	f002 fffe 	bl	8003f00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f04:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f0a:	2312      	movs	r3, #18
 8000f0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f12:	2303      	movs	r3, #3
 8000f14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f16:	2304      	movs	r3, #4
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0314 	add.w	r3, r7, #20
 8000f1e:	4619      	mov	r1, r3
 8000f20:	480d      	ldr	r0, [pc, #52]	@ (8000f58 <HAL_I2C_MspInit+0xd0>)
 8000f22:	f002 ffed 	bl	8003f00 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60bb      	str	r3, [r7, #8]
 8000f2a:	4b09      	ldr	r3, [pc, #36]	@ (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f2e:	4a08      	ldr	r2, [pc, #32]	@ (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000f30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f34:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f36:	4b06      	ldr	r3, [pc, #24]	@ (8000f50 <HAL_I2C_MspInit+0xc8>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8000f42:	bf00      	nop
 8000f44:	3728      	adds	r7, #40	@ 0x28
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40005c00 	.word	0x40005c00
 8000f50:	40023800 	.word	0x40023800
 8000f54:	40020800 	.word	0x40020800
 8000f58:	40020000 	.word	0x40020000

08000f5c <ili9341_IO_Init>:
#include "spi_cfg.h"
#include "stm32f4xx_hal.h"
#include "gpio_cfg.h"

void ili9341_IO_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af04      	add	r7, sp, #16
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN;
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <ili9341_IO_Init+0x48>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa4 <ili9341_IO_Init+0x48>)
 8000f68:	f043 030c 	orr.w	r3, r3, #12
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
    
    Pin_Cfg(GPIOD, 13, MODER_GPIO, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_NONE);   // LCD_WRX
 8000f6e:	2310      	movs	r3, #16
 8000f70:	9302      	str	r3, [sp, #8]
 8000f72:	2300      	movs	r3, #0
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	2303      	movs	r3, #3
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	210d      	movs	r1, #13
 8000f80:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <ili9341_IO_Init+0x4c>)
 8000f82:	f7ff fec1 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOC,  2, MODER_GPIO, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_NONE);   // LCD_NCS
 8000f86:	2310      	movs	r3, #16
 8000f88:	9302      	str	r3, [sp, #8]
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	2303      	movs	r3, #3
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2300      	movs	r3, #0
 8000f94:	2201      	movs	r2, #1
 8000f96:	2102      	movs	r1, #2
 8000f98:	4804      	ldr	r0, [pc, #16]	@ (8000fac <ili9341_IO_Init+0x50>)
 8000f9a:	f7ff feb5 	bl	8000d08 <Pin_Cfg>
}
 8000f9e:	bf00      	nop
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	40023800 	.word	0x40023800
 8000fa8:	40020c00 	.word	0x40020c00
 8000fac:	40020800 	.word	0x40020800

08000fb0 <ili9341_Init>:

void ili9341_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
    // Configure LCD
    ili9341_Write_Cmd(0xCA);
 8000fb4:	20ca      	movs	r0, #202	@ 0xca
 8000fb6:	f000 f979 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0xC3);
 8000fba:	20c3      	movs	r0, #195	@ 0xc3
 8000fbc:	f000 f98c 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x08);
 8000fc0:	2008      	movs	r0, #8
 8000fc2:	f000 f989 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x50);
 8000fc6:	2050      	movs	r0, #80	@ 0x50
 8000fc8:	f000 f986 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_POWERB);
 8000fcc:	20cf      	movs	r0, #207	@ 0xcf
 8000fce:	f000 f96d 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x00);
 8000fd2:	2000      	movs	r0, #0
 8000fd4:	f000 f980 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0xC1);
 8000fd8:	20c1      	movs	r0, #193	@ 0xc1
 8000fda:	f000 f97d 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x30);
 8000fde:	2030      	movs	r0, #48	@ 0x30
 8000fe0:	f000 f97a 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_POWER_SEQ);
 8000fe4:	20ed      	movs	r0, #237	@ 0xed
 8000fe6:	f000 f961 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x64);
 8000fea:	2064      	movs	r0, #100	@ 0x64
 8000fec:	f000 f974 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x03);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 f971 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x12);
 8000ff6:	2012      	movs	r0, #18
 8000ff8:	f000 f96e 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x81);
 8000ffc:	2081      	movs	r0, #129	@ 0x81
 8000ffe:	f000 f96b 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_DTCA);
 8001002:	20e8      	movs	r0, #232	@ 0xe8
 8001004:	f000 f952 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x85);
 8001008:	2085      	movs	r0, #133	@ 0x85
 800100a:	f000 f965 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x00);
 800100e:	2000      	movs	r0, #0
 8001010:	f000 f962 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x78);
 8001014:	2078      	movs	r0, #120	@ 0x78
 8001016:	f000 f95f 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_POWERA);
 800101a:	20cb      	movs	r0, #203	@ 0xcb
 800101c:	f000 f946 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x39);
 8001020:	2039      	movs	r0, #57	@ 0x39
 8001022:	f000 f959 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x2C);
 8001026:	202c      	movs	r0, #44	@ 0x2c
 8001028:	f000 f956 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x00);
 800102c:	2000      	movs	r0, #0
 800102e:	f000 f953 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x34);
 8001032:	2034      	movs	r0, #52	@ 0x34
 8001034:	f000 f950 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x02);
 8001038:	2002      	movs	r0, #2
 800103a:	f000 f94d 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_PRC);
 800103e:	20f7      	movs	r0, #247	@ 0xf7
 8001040:	f000 f934 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x20);
 8001044:	2020      	movs	r0, #32
 8001046:	f000 f947 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_DTCB);
 800104a:	20ea      	movs	r0, #234	@ 0xea
 800104c:	f000 f92e 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x00);
 8001050:	2000      	movs	r0, #0
 8001052:	f000 f941 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x00);
 8001056:	2000      	movs	r0, #0
 8001058:	f000 f93e 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_FRMCTR1);
 800105c:	20b1      	movs	r0, #177	@ 0xb1
 800105e:	f000 f925 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x00);
 8001062:	2000      	movs	r0, #0
 8001064:	f000 f938 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x1B);
 8001068:	201b      	movs	r0, #27
 800106a:	f000 f935 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_DFC);
 800106e:	20b6      	movs	r0, #182	@ 0xb6
 8001070:	f000 f91c 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x0A);
 8001074:	200a      	movs	r0, #10
 8001076:	f000 f92f 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0xA2);
 800107a:	20a2      	movs	r0, #162	@ 0xa2
 800107c:	f000 f92c 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_POWER1);
 8001080:	20c0      	movs	r0, #192	@ 0xc0
 8001082:	f000 f913 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x10);
 8001086:	2010      	movs	r0, #16
 8001088:	f000 f926 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_POWER2);
 800108c:	20c1      	movs	r0, #193	@ 0xc1
 800108e:	f000 f90d 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x10);
 8001092:	2010      	movs	r0, #16
 8001094:	f000 f920 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_VCOM1);
 8001098:	20c5      	movs	r0, #197	@ 0xc5
 800109a:	f000 f907 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x45);
 800109e:	2045      	movs	r0, #69	@ 0x45
 80010a0:	f000 f91a 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x15);
 80010a4:	2015      	movs	r0, #21
 80010a6:	f000 f917 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_VCOM2);
 80010aa:	20c7      	movs	r0, #199	@ 0xc7
 80010ac:	f000 f8fe 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x90);
 80010b0:	2090      	movs	r0, #144	@ 0x90
 80010b2:	f000 f911 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_MAC);
 80010b6:	2036      	movs	r0, #54	@ 0x36
 80010b8:	f000 f8f8 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0xC8);
 80010bc:	20c8      	movs	r0, #200	@ 0xc8
 80010be:	f000 f90b 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_3GAMMA_EN);
 80010c2:	20f2      	movs	r0, #242	@ 0xf2
 80010c4:	f000 f8f2 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x00);
 80010c8:	2000      	movs	r0, #0
 80010ca:	f000 f905 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_RGB_INTERFACE);
 80010ce:	20b0      	movs	r0, #176	@ 0xb0
 80010d0:	f000 f8ec 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0xC2);
 80010d4:	20c2      	movs	r0, #194	@ 0xc2
 80010d6:	f000 f8ff 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_DFC);
 80010da:	20b6      	movs	r0, #182	@ 0xb6
 80010dc:	f000 f8e6 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x0A);
 80010e0:	200a      	movs	r0, #10
 80010e2:	f000 f8f9 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0xA7);
 80010e6:	20a7      	movs	r0, #167	@ 0xa7
 80010e8:	f000 f8f6 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x27);
 80010ec:	2027      	movs	r0, #39	@ 0x27
 80010ee:	f000 f8f3 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x04);
 80010f2:	2004      	movs	r0, #4
 80010f4:	f000 f8f0 	bl	80012d8 <ili9341_Write_Data>

    // Colomn address set
    ili9341_Write_Cmd(LCD_COLUMN_ADDR);
 80010f8:	202a      	movs	r0, #42	@ 0x2a
 80010fa:	f000 f8d7 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x00);
 80010fe:	2000      	movs	r0, #0
 8001100:	f000 f8ea 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x00);
 8001104:	2000      	movs	r0, #0
 8001106:	f000 f8e7 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x00);
 800110a:	2000      	movs	r0, #0
 800110c:	f000 f8e4 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0xEF);
 8001110:	20ef      	movs	r0, #239	@ 0xef
 8001112:	f000 f8e1 	bl	80012d8 <ili9341_Write_Data>
    // Page address set
    ili9341_Write_Cmd(LCD_PAGE_ADDR);
 8001116:	202b      	movs	r0, #43	@ 0x2b
 8001118:	f000 f8c8 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x00);
 800111c:	2000      	movs	r0, #0
 800111e:	f000 f8db 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x00);
 8001122:	2000      	movs	r0, #0
 8001124:	f000 f8d8 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x01);
 8001128:	2001      	movs	r0, #1
 800112a:	f000 f8d5 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x3F);
 800112e:	203f      	movs	r0, #63	@ 0x3f
 8001130:	f000 f8d2 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_INTERFACE);
 8001134:	20f6      	movs	r0, #246	@ 0xf6
 8001136:	f000 f8b9 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x01);
 800113a:	2001      	movs	r0, #1
 800113c:	f000 f8cc 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x00);
 8001140:	2000      	movs	r0, #0
 8001142:	f000 f8c9 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x06);
 8001146:	2006      	movs	r0, #6
 8001148:	f000 f8c6 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_GRAM);
 800114c:	202c      	movs	r0, #44	@ 0x2c
 800114e:	f000 f8ad 	bl	80012ac <ili9341_Write_Cmd>
    HAL_Delay(200);
 8001152:	20c8      	movs	r0, #200	@ 0xc8
 8001154:	f002 fa98 	bl	8003688 <HAL_Delay>

    ili9341_Write_Cmd(LCD_GAMMA);
 8001158:	2026      	movs	r0, #38	@ 0x26
 800115a:	f000 f8a7 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x01);
 800115e:	2001      	movs	r0, #1
 8001160:	f000 f8ba 	bl	80012d8 <ili9341_Write_Data>

    ili9341_Write_Cmd(LCD_PGAMMA);
 8001164:	20e0      	movs	r0, #224	@ 0xe0
 8001166:	f000 f8a1 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x0F);
 800116a:	200f      	movs	r0, #15
 800116c:	f000 f8b4 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x29);
 8001170:	2029      	movs	r0, #41	@ 0x29
 8001172:	f000 f8b1 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x24);
 8001176:	2024      	movs	r0, #36	@ 0x24
 8001178:	f000 f8ae 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x0C);
 800117c:	200c      	movs	r0, #12
 800117e:	f000 f8ab 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x0E);
 8001182:	200e      	movs	r0, #14
 8001184:	f000 f8a8 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x09);
 8001188:	2009      	movs	r0, #9
 800118a:	f000 f8a5 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x4E);
 800118e:	204e      	movs	r0, #78	@ 0x4e
 8001190:	f000 f8a2 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x78);
 8001194:	2078      	movs	r0, #120	@ 0x78
 8001196:	f000 f89f 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x3C);
 800119a:	203c      	movs	r0, #60	@ 0x3c
 800119c:	f000 f89c 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x09);
 80011a0:	2009      	movs	r0, #9
 80011a2:	f000 f899 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x13);
 80011a6:	2013      	movs	r0, #19
 80011a8:	f000 f896 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x05);
 80011ac:	2005      	movs	r0, #5
 80011ae:	f000 f893 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x17);
 80011b2:	2017      	movs	r0, #23
 80011b4:	f000 f890 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x11);
 80011b8:	2011      	movs	r0, #17
 80011ba:	f000 f88d 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x00);
 80011be:	2000      	movs	r0, #0
 80011c0:	f000 f88a 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Cmd(LCD_NGAMMA);
 80011c4:	20e1      	movs	r0, #225	@ 0xe1
 80011c6:	f000 f871 	bl	80012ac <ili9341_Write_Cmd>
    ili9341_Write_Data(0x00);
 80011ca:	2000      	movs	r0, #0
 80011cc:	f000 f884 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x16);
 80011d0:	2016      	movs	r0, #22
 80011d2:	f000 f881 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x1B);
 80011d6:	201b      	movs	r0, #27
 80011d8:	f000 f87e 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x04);
 80011dc:	2004      	movs	r0, #4
 80011de:	f000 f87b 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x11);
 80011e2:	2011      	movs	r0, #17
 80011e4:	f000 f878 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x07);
 80011e8:	2007      	movs	r0, #7
 80011ea:	f000 f875 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x31);
 80011ee:	2031      	movs	r0, #49	@ 0x31
 80011f0:	f000 f872 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x33);
 80011f4:	2033      	movs	r0, #51	@ 0x33
 80011f6:	f000 f86f 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x42);
 80011fa:	2042      	movs	r0, #66	@ 0x42
 80011fc:	f000 f86c 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x05);
 8001200:	2005      	movs	r0, #5
 8001202:	f000 f869 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x0C);
 8001206:	200c      	movs	r0, #12
 8001208:	f000 f866 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x0A);
 800120c:	200a      	movs	r0, #10
 800120e:	f000 f863 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x28);
 8001212:	2028      	movs	r0, #40	@ 0x28
 8001214:	f000 f860 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x2F);
 8001218:	202f      	movs	r0, #47	@ 0x2f
 800121a:	f000 f85d 	bl	80012d8 <ili9341_Write_Data>
    ili9341_Write_Data(0x0F);
 800121e:	200f      	movs	r0, #15
 8001220:	f000 f85a 	bl	80012d8 <ili9341_Write_Data>

    ili9341_Write_Cmd(LCD_SLEEP_OUT);
 8001224:	2011      	movs	r0, #17
 8001226:	f000 f841 	bl	80012ac <ili9341_Write_Cmd>
    HAL_Delay(200);
 800122a:	20c8      	movs	r0, #200	@ 0xc8
 800122c:	f002 fa2c 	bl	8003688 <HAL_Delay>
    ili9341_Write_Cmd(LCD_DISPLAY_ON);
 8001230:	2029      	movs	r0, #41	@ 0x29
 8001232:	f000 f83b 	bl	80012ac <ili9341_Write_Cmd>
    // GRAM start writing
    ili9341_Write_Cmd(LCD_GRAM);
 8001236:	202c      	movs	r0, #44	@ 0x2c
 8001238:	f000 f838 	bl	80012ac <ili9341_Write_Cmd>
}
 800123c:	bf00      	nop
 800123e:	bd80      	pop	{r7, pc}

08001240 <ili9341_NCS_High>:

void ili9341_NCS_High(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
    GPIOC->BSRR = 1 << 2;
 8001244:	4b03      	ldr	r3, [pc, #12]	@ (8001254 <ili9341_NCS_High+0x14>)
 8001246:	2204      	movs	r2, #4
 8001248:	619a      	str	r2, [r3, #24]
}
 800124a:	bf00      	nop
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	40020800 	.word	0x40020800

08001258 <ili9341_NCS_Low>:

void ili9341_NCS_Low(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
    GPIOC->BSRR = 1 << (2 + 16);
 800125c:	4b04      	ldr	r3, [pc, #16]	@ (8001270 <ili9341_NCS_Low+0x18>)
 800125e:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001262:	619a      	str	r2, [r3, #24]
}
 8001264:	bf00      	nop
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40020800 	.word	0x40020800

08001274 <ili9341_WRX_High>:

void ili9341_WRX_High(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
    GPIOD->BSRR = 1 << 13;
 8001278:	4b04      	ldr	r3, [pc, #16]	@ (800128c <ili9341_WRX_High+0x18>)
 800127a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800127e:	619a      	str	r2, [r3, #24]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	40020c00 	.word	0x40020c00

08001290 <ili9341_WRX_Low>:

void ili9341_WRX_Low(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
    GPIOD->BSRR = 1 << (13 + 16);
 8001294:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <ili9341_WRX_Low+0x18>)
 8001296:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800129a:	619a      	str	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	40020c00 	.word	0x40020c00

080012ac <ili9341_Write_Cmd>:

void ili9341_Write_Cmd(uint8_t address)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b082      	sub	sp, #8
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	71fb      	strb	r3, [r7, #7]
    ili9341_WRX_Low();
 80012b6:	f7ff ffeb 	bl	8001290 <ili9341_WRX_Low>

    ili9341_NCS_Low();
 80012ba:	f7ff ffcd 	bl	8001258 <ili9341_NCS_Low>
    SPI_Write_Byte(SPI5, address);
 80012be:	79fb      	ldrb	r3, [r7, #7]
 80012c0:	4619      	mov	r1, r3
 80012c2:	4804      	ldr	r0, [pc, #16]	@ (80012d4 <ili9341_Write_Cmd+0x28>)
 80012c4:	f001 fff6 	bl	80032b4 <SPI_Write_Byte>
    ili9341_NCS_High();
 80012c8:	f7ff ffba 	bl	8001240 <ili9341_NCS_High>
}
 80012cc:	bf00      	nop
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40015000 	.word	0x40015000

080012d8 <ili9341_Write_Data>:

void ili9341_Write_Data(uint8_t value)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
    ili9341_WRX_High();
 80012e2:	f7ff ffc7 	bl	8001274 <ili9341_WRX_High>

    ili9341_NCS_Low();
 80012e6:	f7ff ffb7 	bl	8001258 <ili9341_NCS_Low>
    SPI_Write_Byte(SPI5, value);
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4619      	mov	r1, r3
 80012ee:	4804      	ldr	r0, [pc, #16]	@ (8001300 <ili9341_Write_Data+0x28>)
 80012f0:	f001 ffe0 	bl	80032b4 <SPI_Write_Byte>
    ili9341_NCS_High();
 80012f4:	f7ff ffa4 	bl	8001240 <ili9341_NCS_High>
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40015000 	.word	0x40015000

08001304 <LTDC_IO_Init>:
#include "ltdc_cfg.h"
#include "gpio_cfg.h"
#include "sdram_cfg.h"

void LTDC_IO_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af04      	add	r7, sp, #16
    // GPIO pin configuration
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN | RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOFEN | RCC_AHB1ENR_GPIOGEN;
 800130a:	4b88      	ldr	r3, [pc, #544]	@ (800152c <LTDC_IO_Init+0x228>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a87      	ldr	r2, [pc, #540]	@ (800152c <LTDC_IO_Init+0x228>)
 8001310:	f043 036f 	orr.w	r3, r3, #111	@ 0x6f
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30

    Pin_Cfg(GPIOC, 10, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_R2
 8001316:	230e      	movs	r3, #14
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	2300      	movs	r3, #0
 800131c:	9301      	str	r3, [sp, #4]
 800131e:	2303      	movs	r3, #3
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	2300      	movs	r3, #0
 8001324:	2202      	movs	r2, #2
 8001326:	210a      	movs	r1, #10
 8001328:	4881      	ldr	r0, [pc, #516]	@ (8001530 <LTDC_IO_Init+0x22c>)
 800132a:	f7ff fced 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOB,  0, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE,  AF_9);    // LCD_R3
 800132e:	2309      	movs	r3, #9
 8001330:	9302      	str	r3, [sp, #8]
 8001332:	2300      	movs	r3, #0
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	2303      	movs	r3, #3
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2300      	movs	r3, #0
 800133c:	2202      	movs	r2, #2
 800133e:	2100      	movs	r1, #0
 8001340:	487c      	ldr	r0, [pc, #496]	@ (8001534 <LTDC_IO_Init+0x230>)
 8001342:	f7ff fce1 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOA, 11, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_R4
 8001346:	230e      	movs	r3, #14
 8001348:	9302      	str	r3, [sp, #8]
 800134a:	2300      	movs	r3, #0
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	2303      	movs	r3, #3
 8001350:	9300      	str	r3, [sp, #0]
 8001352:	2300      	movs	r3, #0
 8001354:	2202      	movs	r2, #2
 8001356:	210b      	movs	r1, #11
 8001358:	4877      	ldr	r0, [pc, #476]	@ (8001538 <LTDC_IO_Init+0x234>)
 800135a:	f7ff fcd5 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOA, 12, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_R5
 800135e:	230e      	movs	r3, #14
 8001360:	9302      	str	r3, [sp, #8]
 8001362:	2300      	movs	r3, #0
 8001364:	9301      	str	r3, [sp, #4]
 8001366:	2303      	movs	r3, #3
 8001368:	9300      	str	r3, [sp, #0]
 800136a:	2300      	movs	r3, #0
 800136c:	2202      	movs	r2, #2
 800136e:	210c      	movs	r1, #12
 8001370:	4871      	ldr	r0, [pc, #452]	@ (8001538 <LTDC_IO_Init+0x234>)
 8001372:	f7ff fcc9 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOB,  1, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE,  AF_9);    // LCD_R6
 8001376:	2309      	movs	r3, #9
 8001378:	9302      	str	r3, [sp, #8]
 800137a:	2300      	movs	r3, #0
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	2303      	movs	r3, #3
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2300      	movs	r3, #0
 8001384:	2202      	movs	r2, #2
 8001386:	2101      	movs	r1, #1
 8001388:	486a      	ldr	r0, [pc, #424]	@ (8001534 <LTDC_IO_Init+0x230>)
 800138a:	f7ff fcbd 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOG,  6, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_R7
 800138e:	230e      	movs	r3, #14
 8001390:	9302      	str	r3, [sp, #8]
 8001392:	2300      	movs	r3, #0
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	2303      	movs	r3, #3
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2300      	movs	r3, #0
 800139c:	2202      	movs	r2, #2
 800139e:	2106      	movs	r1, #6
 80013a0:	4866      	ldr	r0, [pc, #408]	@ (800153c <LTDC_IO_Init+0x238>)
 80013a2:	f7ff fcb1 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOA,  6, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_G2
 80013a6:	230e      	movs	r3, #14
 80013a8:	9302      	str	r3, [sp, #8]
 80013aa:	2300      	movs	r3, #0
 80013ac:	9301      	str	r3, [sp, #4]
 80013ae:	2303      	movs	r3, #3
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2300      	movs	r3, #0
 80013b4:	2202      	movs	r2, #2
 80013b6:	2106      	movs	r1, #6
 80013b8:	485f      	ldr	r0, [pc, #380]	@ (8001538 <LTDC_IO_Init+0x234>)
 80013ba:	f7ff fca5 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOG, 10, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE,  AF_9);    // LCD_G3
 80013be:	2309      	movs	r3, #9
 80013c0:	9302      	str	r3, [sp, #8]
 80013c2:	2300      	movs	r3, #0
 80013c4:	9301      	str	r3, [sp, #4]
 80013c6:	2303      	movs	r3, #3
 80013c8:	9300      	str	r3, [sp, #0]
 80013ca:	2300      	movs	r3, #0
 80013cc:	2202      	movs	r2, #2
 80013ce:	210a      	movs	r1, #10
 80013d0:	485a      	ldr	r0, [pc, #360]	@ (800153c <LTDC_IO_Init+0x238>)
 80013d2:	f7ff fc99 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOB, 10, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_G4
 80013d6:	230e      	movs	r3, #14
 80013d8:	9302      	str	r3, [sp, #8]
 80013da:	2300      	movs	r3, #0
 80013dc:	9301      	str	r3, [sp, #4]
 80013de:	2303      	movs	r3, #3
 80013e0:	9300      	str	r3, [sp, #0]
 80013e2:	2300      	movs	r3, #0
 80013e4:	2202      	movs	r2, #2
 80013e6:	210a      	movs	r1, #10
 80013e8:	4852      	ldr	r0, [pc, #328]	@ (8001534 <LTDC_IO_Init+0x230>)
 80013ea:	f7ff fc8d 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOB, 11, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_G5
 80013ee:	230e      	movs	r3, #14
 80013f0:	9302      	str	r3, [sp, #8]
 80013f2:	2300      	movs	r3, #0
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	2303      	movs	r3, #3
 80013f8:	9300      	str	r3, [sp, #0]
 80013fa:	2300      	movs	r3, #0
 80013fc:	2202      	movs	r2, #2
 80013fe:	210b      	movs	r1, #11
 8001400:	484c      	ldr	r0, [pc, #304]	@ (8001534 <LTDC_IO_Init+0x230>)
 8001402:	f7ff fc81 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOC,  7, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_G6
 8001406:	230e      	movs	r3, #14
 8001408:	9302      	str	r3, [sp, #8]
 800140a:	2300      	movs	r3, #0
 800140c:	9301      	str	r3, [sp, #4]
 800140e:	2303      	movs	r3, #3
 8001410:	9300      	str	r3, [sp, #0]
 8001412:	2300      	movs	r3, #0
 8001414:	2202      	movs	r2, #2
 8001416:	2107      	movs	r1, #7
 8001418:	4845      	ldr	r0, [pc, #276]	@ (8001530 <LTDC_IO_Init+0x22c>)
 800141a:	f7ff fc75 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOD,  3, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_G7
 800141e:	230e      	movs	r3, #14
 8001420:	9302      	str	r3, [sp, #8]
 8001422:	2300      	movs	r3, #0
 8001424:	9301      	str	r3, [sp, #4]
 8001426:	2303      	movs	r3, #3
 8001428:	9300      	str	r3, [sp, #0]
 800142a:	2300      	movs	r3, #0
 800142c:	2202      	movs	r2, #2
 800142e:	2103      	movs	r1, #3
 8001430:	4843      	ldr	r0, [pc, #268]	@ (8001540 <LTDC_IO_Init+0x23c>)
 8001432:	f7ff fc69 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOD,  6, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_B2
 8001436:	230e      	movs	r3, #14
 8001438:	9302      	str	r3, [sp, #8]
 800143a:	2300      	movs	r3, #0
 800143c:	9301      	str	r3, [sp, #4]
 800143e:	2303      	movs	r3, #3
 8001440:	9300      	str	r3, [sp, #0]
 8001442:	2300      	movs	r3, #0
 8001444:	2202      	movs	r2, #2
 8001446:	2106      	movs	r1, #6
 8001448:	483d      	ldr	r0, [pc, #244]	@ (8001540 <LTDC_IO_Init+0x23c>)
 800144a:	f7ff fc5d 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOG, 11, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_B3
 800144e:	230e      	movs	r3, #14
 8001450:	9302      	str	r3, [sp, #8]
 8001452:	2300      	movs	r3, #0
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	2303      	movs	r3, #3
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	2300      	movs	r3, #0
 800145c:	2202      	movs	r2, #2
 800145e:	210b      	movs	r1, #11
 8001460:	4836      	ldr	r0, [pc, #216]	@ (800153c <LTDC_IO_Init+0x238>)
 8001462:	f7ff fc51 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOG, 12, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE,  AF_9);    // LCD_B4
 8001466:	2309      	movs	r3, #9
 8001468:	9302      	str	r3, [sp, #8]
 800146a:	2300      	movs	r3, #0
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	2303      	movs	r3, #3
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2300      	movs	r3, #0
 8001474:	2202      	movs	r2, #2
 8001476:	210c      	movs	r1, #12
 8001478:	4830      	ldr	r0, [pc, #192]	@ (800153c <LTDC_IO_Init+0x238>)
 800147a:	f7ff fc45 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOA,  3, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_B5
 800147e:	230e      	movs	r3, #14
 8001480:	9302      	str	r3, [sp, #8]
 8001482:	2300      	movs	r3, #0
 8001484:	9301      	str	r3, [sp, #4]
 8001486:	2303      	movs	r3, #3
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	2300      	movs	r3, #0
 800148c:	2202      	movs	r2, #2
 800148e:	2103      	movs	r1, #3
 8001490:	4829      	ldr	r0, [pc, #164]	@ (8001538 <LTDC_IO_Init+0x234>)
 8001492:	f7ff fc39 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOB,  8, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_B6
 8001496:	230e      	movs	r3, #14
 8001498:	9302      	str	r3, [sp, #8]
 800149a:	2300      	movs	r3, #0
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	2303      	movs	r3, #3
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	2300      	movs	r3, #0
 80014a4:	2202      	movs	r2, #2
 80014a6:	2108      	movs	r1, #8
 80014a8:	4822      	ldr	r0, [pc, #136]	@ (8001534 <LTDC_IO_Init+0x230>)
 80014aa:	f7ff fc2d 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOB,  9, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_B7
 80014ae:	230e      	movs	r3, #14
 80014b0:	9302      	str	r3, [sp, #8]
 80014b2:	2300      	movs	r3, #0
 80014b4:	9301      	str	r3, [sp, #4]
 80014b6:	2303      	movs	r3, #3
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2300      	movs	r3, #0
 80014bc:	2202      	movs	r2, #2
 80014be:	2109      	movs	r1, #9
 80014c0:	481c      	ldr	r0, [pc, #112]	@ (8001534 <LTDC_IO_Init+0x230>)
 80014c2:	f7ff fc21 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOA,  4, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_VSYNC
 80014c6:	230e      	movs	r3, #14
 80014c8:	9302      	str	r3, [sp, #8]
 80014ca:	2300      	movs	r3, #0
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	2303      	movs	r3, #3
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2300      	movs	r3, #0
 80014d4:	2202      	movs	r2, #2
 80014d6:	2104      	movs	r1, #4
 80014d8:	4817      	ldr	r0, [pc, #92]	@ (8001538 <LTDC_IO_Init+0x234>)
 80014da:	f7ff fc15 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOC,  6, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_HSYNC
 80014de:	230e      	movs	r3, #14
 80014e0:	9302      	str	r3, [sp, #8]
 80014e2:	2300      	movs	r3, #0
 80014e4:	9301      	str	r3, [sp, #4]
 80014e6:	2303      	movs	r3, #3
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	2300      	movs	r3, #0
 80014ec:	2202      	movs	r2, #2
 80014ee:	2106      	movs	r1, #6
 80014f0:	480f      	ldr	r0, [pc, #60]	@ (8001530 <LTDC_IO_Init+0x22c>)
 80014f2:	f7ff fc09 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOF, 10, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_DE
 80014f6:	230e      	movs	r3, #14
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	2300      	movs	r3, #0
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	2303      	movs	r3, #3
 8001500:	9300      	str	r3, [sp, #0]
 8001502:	2300      	movs	r3, #0
 8001504:	2202      	movs	r2, #2
 8001506:	210a      	movs	r1, #10
 8001508:	480e      	ldr	r0, [pc, #56]	@ (8001544 <LTDC_IO_Init+0x240>)
 800150a:	f7ff fbfd 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOG,  7, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_14);    // LCD_CLK
 800150e:	230e      	movs	r3, #14
 8001510:	9302      	str	r3, [sp, #8]
 8001512:	2300      	movs	r3, #0
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	2303      	movs	r3, #3
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2300      	movs	r3, #0
 800151c:	2202      	movs	r2, #2
 800151e:	2107      	movs	r1, #7
 8001520:	4806      	ldr	r0, [pc, #24]	@ (800153c <LTDC_IO_Init+0x238>)
 8001522:	f7ff fbf1 	bl	8000d08 <Pin_Cfg>
}
 8001526:	bf00      	nop
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40023800 	.word	0x40023800
 8001530:	40020800 	.word	0x40020800
 8001534:	40020400 	.word	0x40020400
 8001538:	40020000 	.word	0x40020000
 800153c:	40021800 	.word	0x40021800
 8001540:	40020c00 	.word	0x40020c00
 8001544:	40021400 	.word	0x40021400

08001548 <LTDC_Core_Init>:

void LTDC_Core_Init(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
    // Enable clock for LTDC
    RCC->APB2ENR |= RCC_APB2ENR_LTDCEN;
 800154c:	4b1b      	ldr	r3, [pc, #108]	@ (80015bc <LTDC_Core_Init+0x74>)
 800154e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001550:	4a1a      	ldr	r2, [pc, #104]	@ (80015bc <LTDC_Core_Init+0x74>)
 8001552:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001556:	6453      	str	r3, [r2, #68]	@ 0x44

    // Synchronization Size
    LTDC->SSCR = ((HSYNC - 1) << LTDC_SSCR_HSW_Pos) | (VSYNC - 1);
 8001558:	4b19      	ldr	r3, [pc, #100]	@ (80015c0 <LTDC_Core_Init+0x78>)
 800155a:	4a1a      	ldr	r2, [pc, #104]	@ (80015c4 <LTDC_Core_Init+0x7c>)
 800155c:	609a      	str	r2, [r3, #8]
    // Back Porch Configuration
    LTDC->BPCR = (((HSYNC + HBP) - 1) << LTDC_BPCR_AHBP_Pos) | ((VSYNC + VBP) - 1);
 800155e:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <LTDC_Core_Init+0x78>)
 8001560:	4a19      	ldr	r2, [pc, #100]	@ (80015c8 <LTDC_Core_Init+0x80>)
 8001562:	60da      	str	r2, [r3, #12]
    // Active Width Configuration
    LTDC->AWCR = (((HSYNC + HBP + LCD_ACTIVE_WIDTH) - 1) << LTDC_AWCR_AAW_Pos) | ((VSYNC + VBP + LCD_ACTIVE_HEIGHT) - 1);
 8001564:	4b16      	ldr	r3, [pc, #88]	@ (80015c0 <LTDC_Core_Init+0x78>)
 8001566:	4a19      	ldr	r2, [pc, #100]	@ (80015cc <LTDC_Core_Init+0x84>)
 8001568:	611a      	str	r2, [r3, #16]
    // Total Width Configuration
    LTDC->TWCR = (((HSYNC + HBP + LCD_ACTIVE_WIDTH + HFP) - 1) << LTDC_TWCR_TOTALW_Pos) | ((VSYNC + VBP + LCD_ACTIVE_HEIGHT + VFP) - 1);
 800156a:	4b15      	ldr	r3, [pc, #84]	@ (80015c0 <LTDC_Core_Init+0x78>)
 800156c:	4a18      	ldr	r2, [pc, #96]	@ (80015d0 <LTDC_Core_Init+0x88>)
 800156e:	615a      	str	r2, [r3, #20]

    // Window Horizontal Position Configuration
    LTDC_Layer1->WHPCR = (((HSYNC + HBP + LCD_ACTIVE_WIDTH) - 1) << LTDC_LxWHPCR_WHSPPOS_Pos) | (((HSYNC + HBP) - 1) + 1);
 8001570:	4b18      	ldr	r3, [pc, #96]	@ (80015d4 <LTDC_Core_Init+0x8c>)
 8001572:	4a19      	ldr	r2, [pc, #100]	@ (80015d8 <LTDC_Core_Init+0x90>)
 8001574:	605a      	str	r2, [r3, #4]
    // Window Vertical Position Configuration 
    LTDC_Layer1->WVPCR = (((VSYNC + VBP + LCD_ACTIVE_HEIGHT) - 1) << LTDC_LxWVPCR_WVSPPOS_Pos) | (((VSYNC + VBP) - 1) + 1);
 8001576:	4b17      	ldr	r3, [pc, #92]	@ (80015d4 <LTDC_Core_Init+0x8c>)
 8001578:	4a18      	ldr	r2, [pc, #96]	@ (80015dc <LTDC_Core_Init+0x94>)
 800157a:	609a      	str	r2, [r3, #8]
    // Pixel Format Configuration RGB565
    LTDC_Layer1->PFCR = 2;
 800157c:	4b15      	ldr	r3, [pc, #84]	@ (80015d4 <LTDC_Core_Init+0x8c>)
 800157e:	2202      	movs	r2, #2
 8001580:	611a      	str	r2, [r3, #16]
    // Color Frame Buffer Address
    LTDC_Layer1->CFBAR = SDRAM_BASE;
 8001582:	4b14      	ldr	r3, [pc, #80]	@ (80015d4 <LTDC_Core_Init+0x8c>)
 8001584:	f04f 4250 	mov.w	r2, #3489660928	@ 0xd0000000
 8001588:	629a      	str	r2, [r3, #40]	@ 0x28
    // Color Frame Buffer Length
    LTDC_Layer1->CFBLR  = ((LCD_ACTIVE_WIDTH * PIXEL_WIDHT) << LTDC_LxCFBLR_CFBP_Pos) | ((LCD_ACTIVE_WIDTH * PIXEL_WIDHT) + 3);
 800158a:	4b12      	ldr	r3, [pc, #72]	@ (80015d4 <LTDC_Core_Init+0x8c>)
 800158c:	4a14      	ldr	r2, [pc, #80]	@ (80015e0 <LTDC_Core_Init+0x98>)
 800158e:	62da      	str	r2, [r3, #44]	@ 0x2c
    // ColorFrame Buffer Line Numbe
    LTDC_Layer1->CFBLNR = LCD_ACTIVE_HEIGHT;
 8001590:	4b10      	ldr	r3, [pc, #64]	@ (80015d4 <LTDC_Core_Init+0x8c>)
 8001592:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001596:	631a      	str	r2, [r3, #48]	@ 0x30
    // Enable Layer
    LTDC_Layer1->CR |= LTDC_LxCR_LEN;
 8001598:	4b0e      	ldr	r3, [pc, #56]	@ (80015d4 <LTDC_Core_Init+0x8c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a0d      	ldr	r2, [pc, #52]	@ (80015d4 <LTDC_Core_Init+0x8c>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6013      	str	r3, [r2, #0]
    // Immediate Reload
    LTDC->SRCR = LTDC_SRCR_IMR;
 80015a4:	4b06      	ldr	r3, [pc, #24]	@ (80015c0 <LTDC_Core_Init+0x78>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	625a      	str	r2, [r3, #36]	@ 0x24

    // Enable LTDC
    LTDC->GCR = LTDC_GCR_LTDCEN;
 80015aa:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <LTDC_Core_Init+0x78>)
 80015ac:	2201      	movs	r2, #1
 80015ae:	619a      	str	r2, [r3, #24]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40016800 	.word	0x40016800
 80015c4:	00090001 	.word	0x00090001
 80015c8:	001d0003 	.word	0x001d0003
 80015cc:	010d0143 	.word	0x010d0143
 80015d0:	01170147 	.word	0x01170147
 80015d4:	40016884 	.word	0x40016884
 80015d8:	010d001e 	.word	0x010d001e
 80015dc:	01430004 	.word	0x01430004
 80015e0:	01e001e3 	.word	0x01e001e3

080015e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	6039      	str	r1, [r7, #0]
 80015ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	db0a      	blt.n	800160e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	b2da      	uxtb	r2, r3
 80015fc:	490c      	ldr	r1, [pc, #48]	@ (8001630 <__NVIC_SetPriority+0x4c>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	0112      	lsls	r2, r2, #4
 8001604:	b2d2      	uxtb	r2, r2
 8001606:	440b      	add	r3, r1
 8001608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800160c:	e00a      	b.n	8001624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	b2da      	uxtb	r2, r3
 8001612:	4908      	ldr	r1, [pc, #32]	@ (8001634 <__NVIC_SetPriority+0x50>)
 8001614:	79fb      	ldrb	r3, [r7, #7]
 8001616:	f003 030f 	and.w	r3, r3, #15
 800161a:	3b04      	subs	r3, #4
 800161c:	0112      	lsls	r2, r2, #4
 800161e:	b2d2      	uxtb	r2, r2
 8001620:	440b      	add	r3, r1
 8001622:	761a      	strb	r2, [r3, #24]
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr
 8001630:	e000e100 	.word	0xe000e100
 8001634:	e000ed00 	.word	0xe000ed00

08001638 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3b01      	subs	r3, #1
 8001644:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001648:	d301      	bcc.n	800164e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800164a:	2301      	movs	r3, #1
 800164c:	e00f      	b.n	800166e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800164e:	4a0a      	ldr	r2, [pc, #40]	@ (8001678 <SysTick_Config+0x40>)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	3b01      	subs	r3, #1
 8001654:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001656:	210f      	movs	r1, #15
 8001658:	f04f 30ff 	mov.w	r0, #4294967295
 800165c:	f7ff ffc2 	bl	80015e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001660:	4b05      	ldr	r3, [pc, #20]	@ (8001678 <SysTick_Config+0x40>)
 8001662:	2200      	movs	r2, #0
 8001664:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001666:	4b04      	ldr	r3, [pc, #16]	@ (8001678 <SysTick_Config+0x40>)
 8001668:	2207      	movs	r2, #7
 800166a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800166c:	2300      	movs	r3, #0
}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	e000e010 	.word	0xe000e010

0800167c <HAL_GPIO_EXTI_Callback>:
	uint8_t size;
	struct Student student[6];
};

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_2)
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	2b04      	cmp	r3, #4
 800168a:	d10d      	bne.n	80016a8 <HAL_GPIO_EXTI_Callback+0x2c>
    {
    	if (keyG == 0) {
 800168c:	4b23      	ldr	r3, [pc, #140]	@ (800171c <HAL_GPIO_EXTI_Callback+0xa0>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d103      	bne.n	800169c <HAL_GPIO_EXTI_Callback+0x20>
    		keyG = 1;
 8001694:	4b21      	ldr	r3, [pc, #132]	@ (800171c <HAL_GPIO_EXTI_Callback+0xa0>)
 8001696:	2201      	movs	r2, #1
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e005      	b.n	80016a8 <HAL_GPIO_EXTI_Callback+0x2c>
    	} else {
    		keyG = 0;
 800169c:	4b1f      	ldr	r3, [pc, #124]	@ (800171c <HAL_GPIO_EXTI_Callback+0xa0>)
 800169e:	2200      	movs	r2, #0
 80016a0:	701a      	strb	r2, [r3, #0]
    		state = NextPg;
 80016a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001720 <HAL_GPIO_EXTI_Callback+0xa4>)
 80016a4:	2264      	movs	r2, #100	@ 0x64
 80016a6:	601a      	str	r2, [r3, #0]
    	}
    }
    if (GPIO_Pin == GPIO_PIN_12)
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80016ae:	d10d      	bne.n	80016cc <HAL_GPIO_EXTI_Callback+0x50>
    {
    	if (keyB == 0) {
 80016b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001724 <HAL_GPIO_EXTI_Callback+0xa8>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d103      	bne.n	80016c0 <HAL_GPIO_EXTI_Callback+0x44>
    		keyB = 1;
 80016b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001724 <HAL_GPIO_EXTI_Callback+0xa8>)
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
 80016be:	e005      	b.n	80016cc <HAL_GPIO_EXTI_Callback+0x50>
    	} else {
    		keyB = 0;
 80016c0:	4b18      	ldr	r3, [pc, #96]	@ (8001724 <HAL_GPIO_EXTI_Callback+0xa8>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	701a      	strb	r2, [r3, #0]
    		state = PrevPg;
 80016c6:	4b16      	ldr	r3, [pc, #88]	@ (8001720 <HAL_GPIO_EXTI_Callback+0xa4>)
 80016c8:	2265      	movs	r2, #101	@ 0x65
 80016ca:	601a      	str	r2, [r3, #0]
    	}
    }
    if (GPIO_Pin == GPIO_PIN_0)
 80016cc:	88fb      	ldrh	r3, [r7, #6]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d10d      	bne.n	80016ee <HAL_GPIO_EXTI_Callback+0x72>
    {
    	if (keyY == 0) {
 80016d2:	4b15      	ldr	r3, [pc, #84]	@ (8001728 <HAL_GPIO_EXTI_Callback+0xac>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d103      	bne.n	80016e2 <HAL_GPIO_EXTI_Callback+0x66>
    		keyY = 1;
 80016da:	4b13      	ldr	r3, [pc, #76]	@ (8001728 <HAL_GPIO_EXTI_Callback+0xac>)
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e005      	b.n	80016ee <HAL_GPIO_EXTI_Callback+0x72>
    	} else {
    		keyY = 0;
 80016e2:	4b11      	ldr	r3, [pc, #68]	@ (8001728 <HAL_GPIO_EXTI_Callback+0xac>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]
    		state = Reset;
 80016e8:	4b0d      	ldr	r3, [pc, #52]	@ (8001720 <HAL_GPIO_EXTI_Callback+0xa4>)
 80016ea:	2267      	movs	r2, #103	@ 0x67
 80016ec:	601a      	str	r2, [r3, #0]
    	}
    }
    if (GPIO_Pin == GPIO_PIN_1)
 80016ee:	88fb      	ldrh	r3, [r7, #6]
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d10d      	bne.n	8001710 <HAL_GPIO_EXTI_Callback+0x94>
    {
    	if (keyY == 0) {
 80016f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001728 <HAL_GPIO_EXTI_Callback+0xac>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d103      	bne.n	8001704 <HAL_GPIO_EXTI_Callback+0x88>
    		keyY = 1;
 80016fc:	4b0a      	ldr	r3, [pc, #40]	@ (8001728 <HAL_GPIO_EXTI_Callback+0xac>)
 80016fe:	2201      	movs	r2, #1
 8001700:	701a      	strb	r2, [r3, #0]
    	} else {
    		keyY = 0;
    		state = SendData;
    	}
    }
}
 8001702:	e005      	b.n	8001710 <HAL_GPIO_EXTI_Callback+0x94>
    		keyY = 0;
 8001704:	4b08      	ldr	r3, [pc, #32]	@ (8001728 <HAL_GPIO_EXTI_Callback+0xac>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
    		state = SendData;
 800170a:	4b05      	ldr	r3, [pc, #20]	@ (8001720 <HAL_GPIO_EXTI_Callback+0xa4>)
 800170c:	226b      	movs	r2, #107	@ 0x6b
 800170e:	601a      	str	r2, [r3, #0]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	200001d8 	.word	0x200001d8
 8001720:	200000c8 	.word	0x200000c8
 8001724:	200001d9 	.word	0x200001d9
 8001728:	200001da 	.word	0x200001da

0800172c <Get_Name>:

const char* Get_Name(struct Page* p, int index, uint8_t cpage, uint8_t csize) {
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	60f8      	str	r0, [r7, #12]
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	4611      	mov	r1, r2
 8001738:	461a      	mov	r2, r3
 800173a:	460b      	mov	r3, r1
 800173c:	71fb      	strb	r3, [r7, #7]
 800173e:	4613      	mov	r3, r2
 8001740:	71bb      	strb	r3, [r7, #6]
	if (strcmp(p[cpage].student[csize].ID, "CA985464") == 0) {
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8001748:	fb02 f303 	mul.w	r3, r2, r3
 800174c:	68fa      	ldr	r2, [r7, #12]
 800174e:	18d1      	adds	r1, r2, r3
 8001750:	79ba      	ldrb	r2, [r7, #6]
 8001752:	4613      	mov	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	4413      	add	r3, r2
 8001758:	015b      	lsls	r3, r3, #5
 800175a:	440b      	add	r3, r1
 800175c:	3305      	adds	r3, #5
 800175e:	4934      	ldr	r1, [pc, #208]	@ (8001830 <Get_Name+0x104>)
 8001760:	4618      	mov	r0, r3
 8001762:	f7fe fd45 	bl	80001f0 <strcmp>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d103      	bne.n	8001774 <Get_Name+0x48>
		return names[49];
 800176c:	4b31      	ldr	r3, [pc, #196]	@ (8001834 <Get_Name+0x108>)
 800176e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001772:	e058      	b.n	8001826 <Get_Name+0xfa>
	}
	else if (strcmp(p[cpage].student[csize].ID, "7A1B4564") == 0) {
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	f44f 7211 	mov.w	r2, #580	@ 0x244
 800177a:	fb02 f303 	mul.w	r3, r2, r3
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	18d1      	adds	r1, r2, r3
 8001782:	79ba      	ldrb	r2, [r7, #6]
 8001784:	4613      	mov	r3, r2
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	4413      	add	r3, r2
 800178a:	015b      	lsls	r3, r3, #5
 800178c:	440b      	add	r3, r1
 800178e:	3305      	adds	r3, #5
 8001790:	4929      	ldr	r1, [pc, #164]	@ (8001838 <Get_Name+0x10c>)
 8001792:	4618      	mov	r0, r3
 8001794:	f7fe fd2c 	bl	80001f0 <strcmp>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d102      	bne.n	80017a4 <Get_Name+0x78>
		return names[29];
 800179e:	4b25      	ldr	r3, [pc, #148]	@ (8001834 <Get_Name+0x108>)
 80017a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80017a2:	e040      	b.n	8001826 <Get_Name+0xfa>
	}
	else if (strcmp(p[cpage].student[csize].ID, "AFB1564") == 0) {
 80017a4:	79fb      	ldrb	r3, [r7, #7]
 80017a6:	f44f 7211 	mov.w	r2, #580	@ 0x244
 80017aa:	fb02 f303 	mul.w	r3, r2, r3
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	18d1      	adds	r1, r2, r3
 80017b2:	79ba      	ldrb	r2, [r7, #6]
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	015b      	lsls	r3, r3, #5
 80017bc:	440b      	add	r3, r1
 80017be:	3305      	adds	r3, #5
 80017c0:	491e      	ldr	r1, [pc, #120]	@ (800183c <Get_Name+0x110>)
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fd14 	bl	80001f0 <strcmp>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <Get_Name+0xa8>
		return names[22];
 80017ce:	4b19      	ldr	r3, [pc, #100]	@ (8001834 <Get_Name+0x108>)
 80017d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017d2:	e028      	b.n	8001826 <Get_Name+0xfa>
	}
	else if (strcmp(p[cpage].student[csize].ID, "8C5058A1") == 0) {
 80017d4:	79fb      	ldrb	r3, [r7, #7]
 80017d6:	f44f 7211 	mov.w	r2, #580	@ 0x244
 80017da:	fb02 f303 	mul.w	r3, r2, r3
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	18d1      	adds	r1, r2, r3
 80017e2:	79ba      	ldrb	r2, [r7, #6]
 80017e4:	4613      	mov	r3, r2
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4413      	add	r3, r2
 80017ea:	015b      	lsls	r3, r3, #5
 80017ec:	440b      	add	r3, r1
 80017ee:	3305      	adds	r3, #5
 80017f0:	4913      	ldr	r1, [pc, #76]	@ (8001840 <Get_Name+0x114>)
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7fe fcfc 	bl	80001f0 <strcmp>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d102      	bne.n	8001804 <Get_Name+0xd8>
		return names[5];
 80017fe:	4b0d      	ldr	r3, [pc, #52]	@ (8001834 <Get_Name+0x108>)
 8001800:	695b      	ldr	r3, [r3, #20]
 8001802:	e010      	b.n	8001826 <Get_Name+0xfa>
	}
    int total_names = sizeof(names) / sizeof(names[0]);
 8001804:	2332      	movs	r3, #50	@ 0x32
 8001806:	61fb      	str	r3, [r7, #28]
    uint32_t tick_value = HAL_GetTick();
 8001808:	f001 ff32 	bl	8003670 <HAL_GetTick>
 800180c:	61b8      	str	r0, [r7, #24]
    int random_index = tick_value % total_names;
 800180e:	69fa      	ldr	r2, [r7, #28]
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fbb3 f1f2 	udiv	r1, r3, r2
 8001816:	fb01 f202 	mul.w	r2, r1, r2
 800181a:	1a9b      	subs	r3, r3, r2
 800181c:	617b      	str	r3, [r7, #20]
    return names[random_index];
 800181e:	4a05      	ldr	r2, [pc, #20]	@ (8001834 <Get_Name+0x108>)
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3720      	adds	r7, #32
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	08007824 	.word	0x08007824
 8001834:	20000000 	.word	0x20000000
 8001838:	08007830 	.word	0x08007830
 800183c:	0800783c 	.word	0x0800783c
 8001840:	08007844 	.word	0x08007844

08001844 <UI_Init>:
	DS1307_SetHour(18);
	DS1307_SetMinute(00);
	DS1307_SetSecond(00);
}

void UI_Init(uint8_t page, uint8_t size) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b094      	sub	sp, #80	@ 0x50
 8001848:	af02      	add	r7, sp, #8
 800184a:	4603      	mov	r3, r0
 800184c:	460a      	mov	r2, r1
 800184e:	71fb      	strb	r3, [r7, #7]
 8001850:	4613      	mov	r3, r2
 8001852:	71bb      	strb	r3, [r7, #6]
	Fill_Black(0, LCD_ACTIVE_WIDTH, 0, LCD_ACTIVE_HEIGHT);
 8001854:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8001858:	2200      	movs	r2, #0
 800185a:	21f0      	movs	r1, #240	@ 0xf0
 800185c:	2000      	movs	r0, #0
 800185e:	f7fe ff78 	bl	8000752 <Fill_Black>
	char buffer[50];
	Draw_String(30, 10, "CLASS: CE224.P14", COLOR_WHITE, COLOR_BLACK);
 8001862:	2300      	movs	r3, #0
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800186a:	4a3d      	ldr	r2, [pc, #244]	@ (8001960 <UI_Init+0x11c>)
 800186c:	210a      	movs	r1, #10
 800186e:	201e      	movs	r0, #30
 8001870:	f7fe ff4a 	bl	8000708 <Draw_String>
	sprintf(buffer, "SS: %d/50", size);
 8001874:	79ba      	ldrb	r2, [r7, #6]
 8001876:	f107 030c 	add.w	r3, r7, #12
 800187a:	493a      	ldr	r1, [pc, #232]	@ (8001964 <UI_Init+0x120>)
 800187c:	4618      	mov	r0, r3
 800187e:	f005 f945 	bl	8006b0c <siprintf>
	Draw_String(150, 10, buffer, COLOR_WHITE, COLOR_BLACK);
 8001882:	f107 020c 	add.w	r2, r7, #12
 8001886:	2300      	movs	r3, #0
 8001888:	9300      	str	r3, [sp, #0]
 800188a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800188e:	210a      	movs	r1, #10
 8001890:	2096      	movs	r0, #150	@ 0x96
 8001892:	f7fe ff39 	bl	8000708 <Draw_String>
	//Draw_String(150, 10, "SS: 0/53", COLOR_WHITE, COLOR_BLACK);
	for (uint16_t x = 0; x < LCD_ACTIVE_WIDTH; x++) {
 8001896:	2300      	movs	r3, #0
 8001898:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800189c:	e00c      	b.n	80018b8 <UI_Init+0x74>
		Draw_Pixel(x, 20, COLOR_WHITE);
 800189e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80018a2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018a6:	2114      	movs	r1, #20
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7fe fea7 	bl	80005fc <Draw_Pixel>
	for (uint16_t x = 0; x < LCD_ACTIVE_WIDTH; x++) {
 80018ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80018b2:	3301      	adds	r3, #1
 80018b4:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 80018b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 80018bc:	2bef      	cmp	r3, #239	@ 0xef
 80018be:	d9ee      	bls.n	800189e <UI_Init+0x5a>
	}
	for (uint16_t y = 0; y < 308; y++) {
 80018c0:	2300      	movs	r3, #0
 80018c2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80018c6:	e00c      	b.n	80018e2 <UI_Init+0x9e>
		Draw_Pixel(20, y, COLOR_WHITE);
 80018c8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80018cc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80018d0:	4619      	mov	r1, r3
 80018d2:	2014      	movs	r0, #20
 80018d4:	f7fe fe92 	bl	80005fc <Draw_Pixel>
	for (uint16_t y = 0; y < 308; y++) {
 80018d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80018dc:	3301      	adds	r3, #1
 80018de:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
 80018e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80018e6:	f5b3 7f9a 	cmp.w	r3, #308	@ 0x134
 80018ea:	d3ed      	bcc.n	80018c8 <UI_Init+0x84>
	}
	uint16_t ty = 20;
 80018ec:	2314      	movs	r3, #20
 80018ee:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	while (ty != 356)
 80018f2:	e01a      	b.n	800192a <UI_Init+0xe6>
	{
		for (uint16_t x = 0; x < LCD_ACTIVE_WIDTH; x++) {
 80018f4:	2300      	movs	r3, #0
 80018f6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 80018fa:	e00d      	b.n	8001918 <UI_Init+0xd4>
			Draw_Pixel(x, ty, COLOR_WHITE);
 80018fc:	f8b7 1042 	ldrh.w	r1, [r7, #66]	@ 0x42
 8001900:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001904:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fe77 	bl	80005fc <Draw_Pixel>
		for (uint16_t x = 0; x < LCD_ACTIVE_WIDTH; x++) {
 800190e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8001912:	3301      	adds	r3, #1
 8001914:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
 8001918:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800191c:	2bef      	cmp	r3, #239	@ 0xef
 800191e:	d9ed      	bls.n	80018fc <UI_Init+0xb8>
		}
		ty = ty + 48;
 8001920:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8001924:	3330      	adds	r3, #48	@ 0x30
 8001926:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
	while (ty != 356)
 800192a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800192e:	f5b3 7fb2 	cmp.w	r3, #356	@ 0x164
 8001932:	d1df      	bne.n	80018f4 <UI_Init+0xb0>
	}
	sprintf(buffer, "- PAGE %d -", page);
 8001934:	79fa      	ldrb	r2, [r7, #7]
 8001936:	f107 030c 	add.w	r3, r7, #12
 800193a:	490b      	ldr	r1, [pc, #44]	@ (8001968 <UI_Init+0x124>)
 800193c:	4618      	mov	r0, r3
 800193e:	f005 f8e5 	bl	8006b0c <siprintf>
	Draw_String(90,311, buffer, COLOR_WHITE, COLOR_BLACK);
 8001942:	f107 020c 	add.w	r2, r7, #12
 8001946:	2300      	movs	r3, #0
 8001948:	9300      	str	r3, [sp, #0]
 800194a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800194e:	f240 1137 	movw	r1, #311	@ 0x137
 8001952:	205a      	movs	r0, #90	@ 0x5a
 8001954:	f7fe fed8 	bl	8000708 <Draw_String>
}
 8001958:	bf00      	nop
 800195a:	3748      	adds	r7, #72	@ 0x48
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	08007850 	.word	0x08007850
 8001964:	08007864 	.word	0x08007864
 8001968:	08007870 	.word	0x08007870

0800196c <printStudent>:
	Fill_Black(90, 140, 311, 320);
	char buffer[50];
	sprintf(buffer, "- PAGE %d -", page);
	Draw_String(90, 311, buffer, COLOR_WHITE, COLOR_BLACK);
}
void printStudent(struct Page* p, uint8_t page, uint8_t order) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b092      	sub	sp, #72	@ 0x48
 8001970:	af02      	add	r7, sp, #8
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	460b      	mov	r3, r1
 8001976:	70fb      	strb	r3, [r7, #3]
 8001978:	4613      	mov	r3, r2
 800197a:	70bb      	strb	r3, [r7, #2]
	uint16_t ty1 = 32 + (48 * order);
 800197c:	78bb      	ldrb	r3, [r7, #2]
 800197e:	b29b      	uxth	r3, r3
 8001980:	461a      	mov	r2, r3
 8001982:	0052      	lsls	r2, r2, #1
 8001984:	4413      	add	r3, r2
 8001986:	011b      	lsls	r3, r3, #4
 8001988:	b29b      	uxth	r3, r3
 800198a:	3320      	adds	r3, #32
 800198c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
	uint16_t ty2 = 44 + (48 * order);
 800198e:	78bb      	ldrb	r3, [r7, #2]
 8001990:	b29b      	uxth	r3, r3
 8001992:	461a      	mov	r2, r3
 8001994:	0052      	lsls	r2, r2, #1
 8001996:	4413      	add	r3, r2
 8001998:	011b      	lsls	r3, r3, #4
 800199a:	b29b      	uxth	r3, r3
 800199c:	332c      	adds	r3, #44	@ 0x2c
 800199e:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	uint16_t ty3 = 56 + (48 * order);
 80019a0:	78bb      	ldrb	r3, [r7, #2]
 80019a2:	b29b      	uxth	r3, r3
 80019a4:	461a      	mov	r2, r3
 80019a6:	0052      	lsls	r2, r2, #1
 80019a8:	4413      	add	r3, r2
 80019aa:	011b      	lsls	r3, r3, #4
 80019ac:	b29b      	uxth	r3, r3
 80019ae:	3338      	adds	r3, #56	@ 0x38
 80019b0:	877b      	strh	r3, [r7, #58]	@ 0x3a
	char buffer[50];
	sprintf(buffer, "%d", p[page].student[order].order);
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	f44f 7211 	mov.w	r2, #580	@ 0x244
 80019b8:	fb02 f303 	mul.w	r3, r2, r3
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	18d1      	adds	r1, r2, r3
 80019c0:	78ba      	ldrb	r2, [r7, #2]
 80019c2:	4613      	mov	r3, r2
 80019c4:	005b      	lsls	r3, r3, #1
 80019c6:	4413      	add	r3, r2
 80019c8:	015b      	lsls	r3, r3, #5
 80019ca:	440b      	add	r3, r1
 80019cc:	3304      	adds	r3, #4
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	461a      	mov	r2, r3
 80019d2:	f107 0308 	add.w	r3, r7, #8
 80019d6:	493d      	ldr	r1, [pc, #244]	@ (8001acc <printStudent+0x160>)
 80019d8:	4618      	mov	r0, r3
 80019da:	f005 f897 	bl	8006b0c <siprintf>
	if (p[page].student[order].order >= 10) {
 80019de:	78fb      	ldrb	r3, [r7, #3]
 80019e0:	f44f 7211 	mov.w	r2, #580	@ 0x244
 80019e4:	fb02 f303 	mul.w	r3, r2, r3
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	18d1      	adds	r1, r2, r3
 80019ec:	78ba      	ldrb	r2, [r7, #2]
 80019ee:	4613      	mov	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	015b      	lsls	r3, r3, #5
 80019f6:	440b      	add	r3, r1
 80019f8:	3304      	adds	r3, #4
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b09      	cmp	r3, #9
 80019fe:	d90a      	bls.n	8001a16 <printStudent+0xaa>
		Draw_String(3, ty2, buffer, COLOR_WHITE, COLOR_BLACK);
 8001a00:	f107 0208 	add.w	r2, r7, #8
 8001a04:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8001a06:	2300      	movs	r3, #0
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a0e:	2003      	movs	r0, #3
 8001a10:	f7fe fe7a 	bl	8000708 <Draw_String>
 8001a14:	e009      	b.n	8001a2a <printStudent+0xbe>
	}
	else {
		Draw_String(7, ty2, buffer, COLOR_WHITE, COLOR_BLACK);
 8001a16:	f107 0208 	add.w	r2, r7, #8
 8001a1a:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a24:	2007      	movs	r0, #7
 8001a26:	f7fe fe6f 	bl	8000708 <Draw_String>
	}
	Draw_String(30, ty1, p[page].student[order].name, COLOR_WHITE, COLOR_BLACK);
 8001a2a:	78fb      	ldrb	r3, [r7, #3]
 8001a2c:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8001a30:	fb02 f303 	mul.w	r3, r2, r3
 8001a34:	687a      	ldr	r2, [r7, #4]
 8001a36:	18d1      	adds	r1, r2, r3
 8001a38:	78ba      	ldrb	r2, [r7, #2]
 8001a3a:	4613      	mov	r3, r2
 8001a3c:	005b      	lsls	r3, r3, #1
 8001a3e:	4413      	add	r3, r2
 8001a40:	015b      	lsls	r3, r3, #5
 8001a42:	3308      	adds	r3, #8
 8001a44:	440b      	add	r3, r1
 8001a46:	1dda      	adds	r2, r3, #7
 8001a48:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	9300      	str	r3, [sp, #0]
 8001a4e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a52:	201e      	movs	r0, #30
 8001a54:	f7fe fe58 	bl	8000708 <Draw_String>


	sprintf(buffer, "MSSV: %s", p[page].student[order].ID);
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8001a5e:	fb02 f303 	mul.w	r3, r2, r3
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	18d1      	adds	r1, r2, r3
 8001a66:	78ba      	ldrb	r2, [r7, #2]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	015b      	lsls	r3, r3, #5
 8001a70:	440b      	add	r3, r1
 8001a72:	1d5a      	adds	r2, r3, #5
 8001a74:	f107 0308 	add.w	r3, r7, #8
 8001a78:	4915      	ldr	r1, [pc, #84]	@ (8001ad0 <printStudent+0x164>)
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f005 f846 	bl	8006b0c <siprintf>
	Draw_String(30, ty2, buffer, COLOR_WHITE, COLOR_BLACK);
 8001a80:	f107 0208 	add.w	r2, r7, #8
 8001a84:	8fb9      	ldrh	r1, [r7, #60]	@ 0x3c
 8001a86:	2300      	movs	r3, #0
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001a8e:	201e      	movs	r0, #30
 8001a90:	f7fe fe3a 	bl	8000708 <Draw_String>

	Draw_String(30, ty3, p[page].student[order].time, COLOR_WHITE, COLOR_BLACK);
 8001a94:	78fb      	ldrb	r3, [r7, #3]
 8001a96:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	18d1      	adds	r1, r2, r3
 8001aa2:	78ba      	ldrb	r2, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	005b      	lsls	r3, r3, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	015b      	lsls	r3, r3, #5
 8001aac:	3328      	adds	r3, #40	@ 0x28
 8001aae:	440b      	add	r3, r1
 8001ab0:	1d5a      	adds	r2, r3, #5
 8001ab2:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001abc:	201e      	movs	r0, #30
 8001abe:	f7fe fe23 	bl	8000708 <Draw_String>
}
 8001ac2:	bf00      	nop
 8001ac4:	3740      	adds	r7, #64	@ 0x40
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	0800787c 	.word	0x0800787c
 8001ad0:	08007880 	.word	0x08007880

08001ad4 <Print_Students_InPg>:
void Print_Students_InPg(struct Page* p, uint8_t page, uint8_t size) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	70fb      	strb	r3, [r7, #3]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	70bb      	strb	r3, [r7, #2]
	for (int i = 0; i < size; i++) {
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	e009      	b.n	8001afe <Print_Students_InPg+0x2a>
		printStudent(p, page, i);
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	b2da      	uxtb	r2, r3
 8001aee:	78fb      	ldrb	r3, [r7, #3]
 8001af0:	4619      	mov	r1, r3
 8001af2:	6878      	ldr	r0, [r7, #4]
 8001af4:	f7ff ff3a 	bl	800196c <printStudent>
	for (int i = 0; i < size; i++) {
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3301      	adds	r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	78bb      	ldrb	r3, [r7, #2]
 8001b00:	68fa      	ldr	r2, [r7, #12]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	dbf1      	blt.n	8001aea <Print_Students_InPg+0x16>
	}
}
 8001b06:	bf00      	nop
 8001b08:	bf00      	nop
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <Get_Time>:
void Get_Time(char* buffer) {
 8001b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b12:	b08b      	sub	sp, #44	@ 0x2c
 8001b14:	af06      	add	r7, sp, #24
 8001b16:	6078      	str	r0, [r7, #4]
	uint8_t  date   = DS1307_GetDate();
 8001b18:	f7fe fec8 	bl	80008ac <DS1307_GetDate>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	73fb      	strb	r3, [r7, #15]
	uint8_t  month  = DS1307_GetMonth();
 8001b20:	f7fe fed0 	bl	80008c4 <DS1307_GetMonth>
 8001b24:	4603      	mov	r3, r0
 8001b26:	73bb      	strb	r3, [r7, #14]
	uint16_t year   = DS1307_GetYear();
 8001b28:	f7fe fed8 	bl	80008dc <DS1307_GetYear>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	81bb      	strh	r3, [r7, #12]
	uint8_t  dow    = DS1307_GetDayOfWeek();
 8001b30:	f7fe feb0 	bl	8000894 <DS1307_GetDayOfWeek>
 8001b34:	4603      	mov	r3, r0
 8001b36:	72fb      	strb	r3, [r7, #11]
	uint8_t  hour   = DS1307_GetHour();
 8001b38:	f7fe fef1 	bl	800091e <DS1307_GetHour>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	72bb      	strb	r3, [r7, #10]
	uint8_t  minute = DS1307_GetMinute();
 8001b40:	f7fe fefc 	bl	800093c <DS1307_GetMinute>
 8001b44:	4603      	mov	r3, r0
 8001b46:	727b      	strb	r3, [r7, #9]
	uint8_t  second = DS1307_GetSecond();
 8001b48:	f7fe ff04 	bl	8000954 <DS1307_GetSecond>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	723b      	strb	r3, [r7, #8]
	sprintf(buffer, "%02d:%02d:%02d - %02d/%02d/%04d - %s\n",
 8001b50:	7abd      	ldrb	r5, [r7, #10]
 8001b52:	7a7e      	ldrb	r6, [r7, #9]
 8001b54:	7a3b      	ldrb	r3, [r7, #8]
 8001b56:	603b      	str	r3, [r7, #0]
 8001b58:	7bfa      	ldrb	r2, [r7, #15]
 8001b5a:	7bb9      	ldrb	r1, [r7, #14]
 8001b5c:	89b8      	ldrh	r0, [r7, #12]
 8001b5e:	7afc      	ldrb	r4, [r7, #11]
 8001b60:	4b09      	ldr	r3, [pc, #36]	@ (8001b88 <Get_Time+0x78>)
 8001b62:	f853 4024 	ldr.w	r4, [r3, r4, lsl #2]
 8001b66:	9404      	str	r4, [sp, #16]
 8001b68:	9003      	str	r0, [sp, #12]
 8001b6a:	9102      	str	r1, [sp, #8]
 8001b6c:	9201      	str	r2, [sp, #4]
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	4633      	mov	r3, r6
 8001b74:	462a      	mov	r2, r5
 8001b76:	4905      	ldr	r1, [pc, #20]	@ (8001b8c <Get_Time+0x7c>)
 8001b78:	6878      	ldr	r0, [r7, #4]
 8001b7a:	f004 ffc7 	bl	8006b0c <siprintf>
			hour, minute, second, date, month, year, DAYS_OF_WEEK[dow]);
}
 8001b7e:	bf00      	nop
 8001b80:	3714      	adds	r7, #20
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b86:	bf00      	nop
 8001b88:	200000cc 	.word	0x200000cc
 8001b8c:	0800788c 	.word	0x0800788c

08001b90 <Address_Init>:

void Address_Init(struct Page* p, uint8_t page) {
 8001b90:	b480      	push	{r7}
 8001b92:	b087      	sub	sp, #28
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
 8001b98:	460b      	mov	r3, r1
 8001b9a:	70fb      	strb	r3, [r7, #3]
	uint32_t a = 0x080E0000;
 8001b9c:	4b21      	ldr	r3, [pc, #132]	@ (8001c24 <Address_Init+0x94>)
 8001b9e:	617b      	str	r3, [r7, #20]
	uint8_t order = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	74fb      	strb	r3, [r7, #19]
	for (int i = 1; i <= page; i++) {
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	e031      	b.n	8001c0e <Address_Init+0x7e>
		for (int j = 0; j < 6; j++) {
 8001baa:	2300      	movs	r3, #0
 8001bac:	60bb      	str	r3, [r7, #8]
 8001bae:	e028      	b.n	8001c02 <Address_Init+0x72>
			a = a + 0x50;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	3350      	adds	r3, #80	@ 0x50
 8001bb4:	617b      	str	r3, [r7, #20]
			p[i].student[j].addr = a;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8001bbc:	fb02 f303 	mul.w	r3, r2, r3
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	18d1      	adds	r1, r2, r3
 8001bc4:	68ba      	ldr	r2, [r7, #8]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4413      	add	r3, r2
 8001bcc:	015b      	lsls	r3, r3, #5
 8001bce:	440b      	add	r3, r1
 8001bd0:	3360      	adds	r3, #96	@ 0x60
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	601a      	str	r2, [r3, #0]
			order++;
 8001bd6:	7cfb      	ldrb	r3, [r7, #19]
 8001bd8:	3301      	adds	r3, #1
 8001bda:	74fb      	strb	r3, [r7, #19]
			p[i].student[j].order = order;
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8001be2:	fb02 f303 	mul.w	r3, r2, r3
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	18d1      	adds	r1, r2, r3
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	4613      	mov	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	4413      	add	r3, r2
 8001bf2:	015b      	lsls	r3, r3, #5
 8001bf4:	440b      	add	r3, r1
 8001bf6:	3304      	adds	r3, #4
 8001bf8:	7cfa      	ldrb	r2, [r7, #19]
 8001bfa:	701a      	strb	r2, [r3, #0]
		for (int j = 0; j < 6; j++) {
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	60bb      	str	r3, [r7, #8]
 8001c02:	68bb      	ldr	r3, [r7, #8]
 8001c04:	2b05      	cmp	r3, #5
 8001c06:	ddd3      	ble.n	8001bb0 <Address_Init+0x20>
	for (int i = 1; i <= page; i++) {
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	68fa      	ldr	r2, [r7, #12]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	ddc9      	ble.n	8001baa <Address_Init+0x1a>
		}
	}
}
 8001c16:	bf00      	nop
 8001c18:	bf00      	nop
 8001c1a:	371c      	adds	r7, #28
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c22:	4770      	bx	lr
 8001c24:	080e0000 	.word	0x080e0000

08001c28 <New_SS>:
void New_SS(uint8_t size) {
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08a      	sub	sp, #40	@ 0x28
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	4603      	mov	r3, r0
 8001c30:	71fb      	strb	r3, [r7, #7]
	char buffer[20];
	sprintf(buffer, "SS: %d/50", size);
 8001c32:	79fa      	ldrb	r2, [r7, #7]
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	4908      	ldr	r1, [pc, #32]	@ (8001c5c <New_SS+0x34>)
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f004 ff66 	bl	8006b0c <siprintf>
	Draw_String(150, 10, buffer, COLOR_WHITE, COLOR_BLACK);
 8001c40:	f107 020c 	add.w	r2, r7, #12
 8001c44:	2300      	movs	r3, #0
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001c4c:	210a      	movs	r1, #10
 8001c4e:	2096      	movs	r0, #150	@ 0x96
 8001c50:	f7fe fd5a 	bl	8000708 <Draw_String>
}
 8001c54:	bf00      	nop
 8001c56:	3720      	adds	r7, #32
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	08007864 	.word	0x08007864

08001c60 <isDuplicateID>:
uint8_t isDuplicateID(struct Page* p, uint8_t currentPage, uint8_t currentSize, const char* newID)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	72fb      	strb	r3, [r7, #11]
 8001c6e:	4613      	mov	r3, r2
 8001c70:	72bb      	strb	r3, [r7, #10]
	if (currentPage == 1 && currentSize == 0) return 0;
 8001c72:	7afb      	ldrb	r3, [r7, #11]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d104      	bne.n	8001c82 <isDuplicateID+0x22>
 8001c78:	7abb      	ldrb	r3, [r7, #10]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d101      	bne.n	8001c82 <isDuplicateID+0x22>
 8001c7e:	2300      	movs	r3, #0
 8001c80:	e033      	b.n	8001cea <isDuplicateID+0x8a>
    for (uint8_t page = 1; page <= currentPage; page++) {
 8001c82:	2301      	movs	r3, #1
 8001c84:	75fb      	strb	r3, [r7, #23]
 8001c86:	e02b      	b.n	8001ce0 <isDuplicateID+0x80>
        uint8_t maxStudents = (page == currentPage) ? currentSize : 6;
 8001c88:	7dfa      	ldrb	r2, [r7, #23]
 8001c8a:	7afb      	ldrb	r3, [r7, #11]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d101      	bne.n	8001c94 <isDuplicateID+0x34>
 8001c90:	7abb      	ldrb	r3, [r7, #10]
 8001c92:	e000      	b.n	8001c96 <isDuplicateID+0x36>
 8001c94:	2306      	movs	r3, #6
 8001c96:	757b      	strb	r3, [r7, #21]
        for (uint8_t i = 0; i < maxStudents; i++) {
 8001c98:	2300      	movs	r3, #0
 8001c9a:	75bb      	strb	r3, [r7, #22]
 8001c9c:	e019      	b.n	8001cd2 <isDuplicateID+0x72>
            if (strcmp(p[page].student[i].ID, newID) == 0) {
 8001c9e:	7dfb      	ldrb	r3, [r7, #23]
 8001ca0:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8001ca4:	fb02 f303 	mul.w	r3, r2, r3
 8001ca8:	68fa      	ldr	r2, [r7, #12]
 8001caa:	18d1      	adds	r1, r2, r3
 8001cac:	7dba      	ldrb	r2, [r7, #22]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	4413      	add	r3, r2
 8001cb4:	015b      	lsls	r3, r3, #5
 8001cb6:	440b      	add	r3, r1
 8001cb8:	3305      	adds	r3, #5
 8001cba:	6879      	ldr	r1, [r7, #4]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7fe fa97 	bl	80001f0 <strcmp>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <isDuplicateID+0x6c>
                return 1;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e00e      	b.n	8001cea <isDuplicateID+0x8a>
        for (uint8_t i = 0; i < maxStudents; i++) {
 8001ccc:	7dbb      	ldrb	r3, [r7, #22]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	75bb      	strb	r3, [r7, #22]
 8001cd2:	7dba      	ldrb	r2, [r7, #22]
 8001cd4:	7d7b      	ldrb	r3, [r7, #21]
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d3e1      	bcc.n	8001c9e <isDuplicateID+0x3e>
    for (uint8_t page = 1; page <= currentPage; page++) {
 8001cda:	7dfb      	ldrb	r3, [r7, #23]
 8001cdc:	3301      	adds	r3, #1
 8001cde:	75fb      	strb	r3, [r7, #23]
 8001ce0:	7dfa      	ldrb	r2, [r7, #23]
 8001ce2:	7afb      	ldrb	r3, [r7, #11]
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d9cf      	bls.n	8001c88 <isDuplicateID+0x28>
            }
        }
    }
    return 0;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3718      	adds	r7, #24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
	...

08001cf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cf4:	b5b0      	push	{r4, r5, r7, lr}
 8001cf6:	f5ad 5de3 	sub.w	sp, sp, #7264	@ 0x1c60
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cfe:	f001 fc51 	bl	80035a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d02:	f000 fd49 	bl	8002798 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  PLLSAI_Init();
 8001d06:	f7fe fc53 	bl	80005b0 <PLLSAI_Init>
  SysTick_Config(1800);
 8001d0a:	f44f 60e1 	mov.w	r0, #1800	@ 0x708
 8001d0e:	f7ff fc93 	bl	8001638 <SysTick_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d12:	f7fe feed 	bl	8000af0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001d16:	f001 fba9 	bl	800346c <MX_USART1_UART_Init>
  MX_SPI4_Init();
 8001d1a:	f001 fa09 	bl	8003130 <MX_SPI4_Init>
  MX_I2C3_Init();
 8001d1e:	f7ff f873 	bl	8000e08 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
  MFRC522_Init();
 8001d22:	f000 fe51 	bl	80029c8 <MFRC522_Init>
  SDRAM_IO_Init();
 8001d26:	f000 ffa7 	bl	8002c78 <SDRAM_IO_Init>
  SDRAM_Init();
 8001d2a:	f001 f98f 	bl	800304c <SDRAM_Init>
  LTDC_IO_Init();
 8001d2e:	f7ff fae9 	bl	8001304 <LTDC_IO_Init>
  LTDC_Core_Init();
 8001d32:	f7ff fc09 	bl	8001548 <LTDC_Core_Init>
  SPI5_IO_Init();
 8001d36:	f001 fa79 	bl	800322c <SPI5_IO_Init>
  SPI5_Core_Init();
 8001d3a:	f001 fa9f 	bl	800327c <SPI5_Core_Init>
  ili9341_IO_Init();
 8001d3e:	f7ff f90d 	bl	8000f5c <ili9341_IO_Init>
  ili9341_Init();
 8001d42:	f7ff f935 	bl	8000fb0 <ili9341_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char buffer[50], buffer2[50], txBuffer[200];
  //char buffer1[50], buffer3[50], buffer4[50];
  uint8_t currentPage = 1, currentSize = 0, totalSize = 0, totalPage = 1;
 8001d46:	2301      	movs	r3, #1
 8001d48:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8001d4c:	f102 020f 	add.w	r2, r2, #15
 8001d50:	7013      	strb	r3, [r2, #0]
 8001d52:	2300      	movs	r3, #0
 8001d54:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8001d58:	f102 020e 	add.w	r2, r2, #14
 8001d5c:	7013      	strb	r3, [r2, #0]
 8001d5e:	2300      	movs	r3, #0
 8001d60:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8001d64:	f102 020d 	add.w	r2, r2, #13
 8001d68:	7013      	strb	r3, [r2, #0]
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8001d70:	f102 020c 	add.w	r2, r2, #12
 8001d74:	7013      	strb	r3, [r2, #0]
  //UI_Init(currentPage, currentSize);
  struct Page page[12];
  DS1307_Init(&hi2c3);
 8001d76:	48dd      	ldr	r0, [pc, #884]	@ (80020ec <main+0x3f8>)
 8001d78:	f7fe fd1a 	bl	80007b0 <DS1307_Init>
  //DS1307_SetDayOfWeek(4);
  //Set_Time();
  Address_Init(page, 10);
 8001d7c:	f107 0310 	add.w	r3, r7, #16
 8001d80:	3b10      	subs	r3, #16
 8001d82:	210a      	movs	r1, #10
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff ff03 	bl	8001b90 <Address_Init>


  //Flash_Erase_Sector11();
  for (int i = 1; i <= 10; i++) {
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8001d90:	f102 0208 	add.w	r2, r2, #8
 8001d94:	6013      	str	r3, [r2, #0]
 8001d96:	e12c      	b.n	8001ff2 <main+0x2fe>
	  for (int j = 0; j < 6; j++) {
 8001d98:	2300      	movs	r3, #0
 8001d9a:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8001d9e:	f102 0204 	add.w	r2, r2, #4
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	e10c      	b.n	8001fc0 <main+0x2cc>
		  if (Flash_Read_CharArr(buffer2, page[i].student[j].addr) == 0) {
 8001da6:	f507 6347 	add.w	r3, r7, #3184	@ 0xc70
 8001daa:	f5a3 6147 	sub.w	r1, r3, #3184	@ 0xc70
 8001dae:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001db2:	f103 0304 	add.w	r3, r3, #4
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001dbc:	f103 0308 	add.w	r3, r3, #8
 8001dc0:	6818      	ldr	r0, [r3, #0]
 8001dc2:	4613      	mov	r3, r2
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	4413      	add	r3, r2
 8001dc8:	015b      	lsls	r3, r3, #5
 8001dca:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8001dce:	fb00 f202 	mul.w	r2, r0, r2
 8001dd2:	4413      	add	r3, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	3360      	adds	r3, #96	@ 0x60
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 8001dde:	f103 0318 	add.w	r3, r3, #24
 8001de2:	4611      	mov	r1, r2
 8001de4:	4618      	mov	r0, r3
 8001de6:	f7fe fe3a 	bl	8000a5e <Flash_Read_CharArr>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80f0 	beq.w	8001fd2 <main+0x2de>
			  break;
		  }
		  strcpy(page[i].student[j].ID, buffer2);
 8001df2:	f107 0210 	add.w	r2, r7, #16
 8001df6:	3a10      	subs	r2, #16
 8001df8:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001dfc:	f103 0304 	add.w	r3, r3, #4
 8001e00:	6819      	ldr	r1, [r3, #0]
 8001e02:	460b      	mov	r3, r1
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	440b      	add	r3, r1
 8001e08:	015b      	lsls	r3, r3, #5
 8001e0a:	f507 51e3 	add.w	r1, r7, #7264	@ 0x1c60
 8001e0e:	f101 0108 	add.w	r1, r1, #8
 8001e12:	6809      	ldr	r1, [r1, #0]
 8001e14:	f44f 7011 	mov.w	r0, #580	@ 0x244
 8001e18:	fb00 f101 	mul.w	r1, r0, r1
 8001e1c:	440b      	add	r3, r1
 8001e1e:	4413      	add	r3, r2
 8001e20:	3305      	adds	r3, #5
 8001e22:	f507 52df 	add.w	r2, r7, #7136	@ 0x1be0
 8001e26:	f102 0218 	add.w	r2, r2, #24
 8001e2a:	4611      	mov	r1, r2
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f004 fec1 	bl	8006bb4 <strcpy>
		  if (Flash_Read_CharArr(buffer2, page[i].student[j].addr + 0x10) == 0) {
 8001e32:	f507 6347 	add.w	r3, r7, #3184	@ 0xc70
 8001e36:	f5a3 6147 	sub.w	r1, r3, #3184	@ 0xc70
 8001e3a:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001e3e:	f103 0304 	add.w	r3, r3, #4
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001e48:	f103 0308 	add.w	r3, r3, #8
 8001e4c:	6818      	ldr	r0, [r3, #0]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	005b      	lsls	r3, r3, #1
 8001e52:	4413      	add	r3, r2
 8001e54:	015b      	lsls	r3, r3, #5
 8001e56:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8001e5a:	fb00 f202 	mul.w	r2, r0, r2
 8001e5e:	4413      	add	r3, r2
 8001e60:	440b      	add	r3, r1
 8001e62:	3360      	adds	r3, #96	@ 0x60
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f103 0210 	add.w	r2, r3, #16
 8001e6a:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 8001e6e:	f103 0318 	add.w	r3, r3, #24
 8001e72:	4611      	mov	r1, r2
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7fe fdf2 	bl	8000a5e <Flash_Read_CharArr>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	f000 80aa 	beq.w	8001fd6 <main+0x2e2>
			  break;
		  }
		  strcpy(page[i].student[j].name, buffer2);
 8001e82:	f107 0210 	add.w	r2, r7, #16
 8001e86:	3a10      	subs	r2, #16
 8001e88:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001e8c:	f103 0304 	add.w	r3, r3, #4
 8001e90:	6819      	ldr	r1, [r3, #0]
 8001e92:	460b      	mov	r3, r1
 8001e94:	005b      	lsls	r3, r3, #1
 8001e96:	440b      	add	r3, r1
 8001e98:	015b      	lsls	r3, r3, #5
 8001e9a:	f507 51e3 	add.w	r1, r7, #7264	@ 0x1c60
 8001e9e:	f101 0108 	add.w	r1, r1, #8
 8001ea2:	6809      	ldr	r1, [r1, #0]
 8001ea4:	f44f 7011 	mov.w	r0, #580	@ 0x244
 8001ea8:	fb00 f101 	mul.w	r1, r0, r1
 8001eac:	440b      	add	r3, r1
 8001eae:	3308      	adds	r3, #8
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3307      	adds	r3, #7
 8001eb4:	f507 52df 	add.w	r2, r7, #7136	@ 0x1be0
 8001eb8:	f102 0218 	add.w	r2, r2, #24
 8001ebc:	4611      	mov	r1, r2
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f004 fe78 	bl	8006bb4 <strcpy>
		  if (Flash_Read_CharArr(buffer2, page[i].student[j].addr + 0x30) == 0) {
 8001ec4:	f507 6347 	add.w	r3, r7, #3184	@ 0xc70
 8001ec8:	f5a3 6147 	sub.w	r1, r3, #3184	@ 0xc70
 8001ecc:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001ed0:	f103 0304 	add.w	r3, r3, #4
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001eda:	f103 0308 	add.w	r3, r3, #8
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	015b      	lsls	r3, r3, #5
 8001ee8:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8001eec:	fb00 f202 	mul.w	r2, r0, r2
 8001ef0:	4413      	add	r3, r2
 8001ef2:	440b      	add	r3, r1
 8001ef4:	3360      	adds	r3, #96	@ 0x60
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8001efc:	f507 53df 	add.w	r3, r7, #7136	@ 0x1be0
 8001f00:	f103 0318 	add.w	r3, r3, #24
 8001f04:	4611      	mov	r1, r2
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fda9 	bl	8000a5e <Flash_Read_CharArr>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d063      	beq.n	8001fda <main+0x2e6>
			  break;
		  }
		  strcpy(page[i].student[j].time, buffer2);
 8001f12:	f107 0210 	add.w	r2, r7, #16
 8001f16:	3a10      	subs	r2, #16
 8001f18:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001f1c:	f103 0304 	add.w	r3, r3, #4
 8001f20:	6819      	ldr	r1, [r3, #0]
 8001f22:	460b      	mov	r3, r1
 8001f24:	005b      	lsls	r3, r3, #1
 8001f26:	440b      	add	r3, r1
 8001f28:	015b      	lsls	r3, r3, #5
 8001f2a:	f507 51e3 	add.w	r1, r7, #7264	@ 0x1c60
 8001f2e:	f101 0108 	add.w	r1, r1, #8
 8001f32:	6809      	ldr	r1, [r1, #0]
 8001f34:	f44f 7011 	mov.w	r0, #580	@ 0x244
 8001f38:	fb00 f101 	mul.w	r1, r0, r1
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3328      	adds	r3, #40	@ 0x28
 8001f40:	4413      	add	r3, r2
 8001f42:	3305      	adds	r3, #5
 8001f44:	f507 52df 	add.w	r2, r7, #7136	@ 0x1be0
 8001f48:	f102 0218 	add.w	r2, r2, #24
 8001f4c:	4611      	mov	r1, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f004 fe30 	bl	8006bb4 <strcpy>
		  currentSize = j + 1;
 8001f54:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001f58:	f103 0304 	add.w	r3, r3, #4
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	3301      	adds	r3, #1
 8001f62:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8001f66:	f102 020e 	add.w	r2, r2, #14
 8001f6a:	7013      	strb	r3, [r2, #0]
		  totalSize++;
 8001f6c:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001f70:	f103 030d 	add.w	r3, r3, #13
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	3301      	adds	r3, #1
 8001f78:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8001f7c:	f102 020d 	add.w	r2, r2, #13
 8001f80:	7013      	strb	r3, [r2, #0]
		  currentPage = i;
 8001f82:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001f86:	f103 0308 	add.w	r3, r3, #8
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8001f90:	f102 020f 	add.w	r2, r2, #15
 8001f94:	7013      	strb	r3, [r2, #0]
		  totalPage = i;
 8001f96:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001f9a:	f103 0308 	add.w	r3, r3, #8
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8001fa4:	f102 020c 	add.w	r2, r2, #12
 8001fa8:	7013      	strb	r3, [r2, #0]
	  for (int j = 0; j < 6; j++) {
 8001faa:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001fae:	f103 0304 	add.w	r3, r3, #4
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8001fba:	f102 0204 	add.w	r2, r2, #4
 8001fbe:	6013      	str	r3, [r2, #0]
 8001fc0:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001fc4:	f103 0304 	add.w	r3, r3, #4
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b05      	cmp	r3, #5
 8001fcc:	f77f aeeb 	ble.w	8001da6 <main+0xb2>
 8001fd0:	e004      	b.n	8001fdc <main+0x2e8>
			  break;
 8001fd2:	bf00      	nop
 8001fd4:	e002      	b.n	8001fdc <main+0x2e8>
			  break;
 8001fd6:	bf00      	nop
 8001fd8:	e000      	b.n	8001fdc <main+0x2e8>
			  break;
 8001fda:	bf00      	nop
  for (int i = 1; i <= 10; i++) {
 8001fdc:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001fe0:	f103 0308 	add.w	r3, r3, #8
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8001fec:	f102 0208 	add.w	r2, r2, #8
 8001ff0:	6013      	str	r3, [r2, #0]
 8001ff2:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8001ff6:	f103 0308 	add.w	r3, r3, #8
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2b0a      	cmp	r3, #10
 8001ffe:	f77f aecb 	ble.w	8001d98 <main+0xa4>
	  }
  }
  if (currentPage >= 1 && currentSize != 0) {
 8002002:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002006:	f103 030f 	add.w	r3, r3, #15
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d025      	beq.n	800205c <main+0x368>
 8002010:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002014:	f103 030e 	add.w	r3, r3, #14
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d01e      	beq.n	800205c <main+0x368>
	  UI_Init(currentPage, totalSize);
 800201e:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002022:	f103 030d 	add.w	r3, r3, #13
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 800202c:	f103 030f 	add.w	r3, r3, #15
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	4611      	mov	r1, r2
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff fc05 	bl	8001844 <UI_Init>
	  Print_Students_InPg(page, currentPage, currentSize);
 800203a:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 800203e:	f103 030e 	add.w	r3, r3, #14
 8002042:	781a      	ldrb	r2, [r3, #0]
 8002044:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002048:	f103 030f 	add.w	r3, r3, #15
 800204c:	7819      	ldrb	r1, [r3, #0]
 800204e:	f107 0310 	add.w	r3, r7, #16
 8002052:	3b10      	subs	r3, #16
 8002054:	4618      	mov	r0, r3
 8002056:	f7ff fd3d 	bl	8001ad4 <Print_Students_InPg>
 800205a:	e025      	b.n	80020a8 <main+0x3b4>
  }
  else {
	  currentPage = 1, currentSize = 0, totalSize = 0, totalPage = 1;
 800205c:	2301      	movs	r3, #1
 800205e:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8002062:	f102 020f 	add.w	r2, r2, #15
 8002066:	7013      	strb	r3, [r2, #0]
 8002068:	2300      	movs	r3, #0
 800206a:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 800206e:	f102 020e 	add.w	r2, r2, #14
 8002072:	7013      	strb	r3, [r2, #0]
 8002074:	2300      	movs	r3, #0
 8002076:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 800207a:	f102 020d 	add.w	r2, r2, #13
 800207e:	7013      	strb	r3, [r2, #0]
 8002080:	2301      	movs	r3, #1
 8002082:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8002086:	f102 020c 	add.w	r2, r2, #12
 800208a:	7013      	strb	r3, [r2, #0]
	  UI_Init(currentPage, totalSize);
 800208c:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002090:	f103 030d 	add.w	r3, r3, #13
 8002094:	781a      	ldrb	r2, [r3, #0]
 8002096:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 800209a:	f103 030f 	add.w	r3, r3, #15
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	4611      	mov	r1, r2
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fbce 	bl	8001844 <UI_Init>
	  //Print_Students_InPg(page, currentPage, currentSize);
  }
  //__disable_irq();
  int index = 0;
 80020a8:	2300      	movs	r3, #0
 80020aa:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 80020ae:	6013      	str	r3, [r2, #0]
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 80020b0:	2201      	movs	r2, #1
 80020b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80020b6:	480e      	ldr	r0, [pc, #56]	@ (80020f0 <main+0x3fc>)
 80020b8:	f002 f8ce 	bl	8004258 <HAL_GPIO_WritePin>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		switch (state) {
 80020bc:	4b0d      	ldr	r3, [pc, #52]	@ (80020f4 <main+0x400>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	3b64      	subs	r3, #100	@ 0x64
 80020c2:	2b06      	cmp	r3, #6
 80020c4:	f200 8359 	bhi.w	800277a <main+0xa86>
 80020c8:	a201      	add	r2, pc, #4	@ (adr r2, 80020d0 <main+0x3dc>)
 80020ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ce:	bf00      	nop
 80020d0:	080020f9 	.word	0x080020f9
 80020d4:	080021c7 	.word	0x080021c7
 80020d8:	080022a1 	.word	0x080022a1
 80020dc:	080026f7 	.word	0x080026f7
 80020e0:	0800277b 	.word	0x0800277b
 80020e4:	0800277b 	.word	0x0800277b
 80020e8:	08002773 	.word	0x08002773
 80020ec:	20000164 	.word	0x20000164
 80020f0:	40021800 	.word	0x40021800
 80020f4:	200000c8 	.word	0x200000c8
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f8:	b672      	cpsid	i
}
 80020fa:	bf00      	nop
		case NextPg:
			__disable_irq();
			if (totalPage == 1) {
 80020fc:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002100:	f103 030c 	add.w	r3, r3, #12
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d105      	bne.n	8002116 <main+0x422>
				state = ScanID;
 800210a:	4b62      	ldr	r3, [pc, #392]	@ (8002294 <main+0x5a0>)
 800210c:	2266      	movs	r2, #102	@ 0x66
 800210e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002110:	b662      	cpsie	i
}
 8002112:	bf00      	nop
				__enable_irq();
				break;
 8002114:	e336      	b.n	8002784 <main+0xa90>
			}
			Npage++;
 8002116:	4b60      	ldr	r3, [pc, #384]	@ (8002298 <main+0x5a4>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	3301      	adds	r3, #1
 800211c:	4a5e      	ldr	r2, [pc, #376]	@ (8002298 <main+0x5a4>)
 800211e:	6013      	str	r3, [r2, #0]
			if (Npage == currentPage) {
 8002120:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002124:	f103 030f 	add.w	r3, r3, #15
 8002128:	781a      	ldrb	r2, [r3, #0]
 800212a:	4b5b      	ldr	r3, [pc, #364]	@ (8002298 <main+0x5a4>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	429a      	cmp	r2, r3
 8002130:	d11d      	bne.n	800216e <main+0x47a>
				state = ScanID;
 8002132:	4b58      	ldr	r3, [pc, #352]	@ (8002294 <main+0x5a0>)
 8002134:	2266      	movs	r2, #102	@ 0x66
 8002136:	601a      	str	r2, [r3, #0]
				UI_Init(Npage, totalSize);
 8002138:	4b57      	ldr	r3, [pc, #348]	@ (8002298 <main+0x5a4>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8002142:	f102 020d 	add.w	r2, r2, #13
 8002146:	7812      	ldrb	r2, [r2, #0]
 8002148:	4611      	mov	r1, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f7ff fb7a 	bl	8001844 <UI_Init>
				Print_Students_InPg(page, Npage, currentSize);
 8002150:	4b51      	ldr	r3, [pc, #324]	@ (8002298 <main+0x5a4>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	b2d9      	uxtb	r1, r3
 8002156:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 800215a:	f103 030e 	add.w	r3, r3, #14
 800215e:	781a      	ldrb	r2, [r3, #0]
 8002160:	f107 0310 	add.w	r3, r7, #16
 8002164:	3b10      	subs	r3, #16
 8002166:	4618      	mov	r0, r3
 8002168:	f7ff fcb4 	bl	8001ad4 <Print_Students_InPg>
 800216c:	e024      	b.n	80021b8 <main+0x4c4>
			} else {
				if (Npage > currentPage) {
 800216e:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002172:	f103 030f 	add.w	r3, r3, #15
 8002176:	781a      	ldrb	r2, [r3, #0]
 8002178:	4b47      	ldr	r3, [pc, #284]	@ (8002298 <main+0x5a4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	429a      	cmp	r2, r3
 800217e:	da02      	bge.n	8002186 <main+0x492>
					Npage = 1;
 8002180:	4b45      	ldr	r3, [pc, #276]	@ (8002298 <main+0x5a4>)
 8002182:	2201      	movs	r2, #1
 8002184:	601a      	str	r2, [r3, #0]
				}
				UI_Init(Npage, totalSize);
 8002186:	4b44      	ldr	r3, [pc, #272]	@ (8002298 <main+0x5a4>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	b2db      	uxtb	r3, r3
 800218c:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8002190:	f102 020d 	add.w	r2, r2, #13
 8002194:	7812      	ldrb	r2, [r2, #0]
 8002196:	4611      	mov	r1, r2
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff fb53 	bl	8001844 <UI_Init>
				Print_Students_InPg(page, Npage, 6);
 800219e:	4b3e      	ldr	r3, [pc, #248]	@ (8002298 <main+0x5a4>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	b2d9      	uxtb	r1, r3
 80021a4:	f107 0310 	add.w	r3, r7, #16
 80021a8:	3b10      	subs	r3, #16
 80021aa:	2206      	movs	r2, #6
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fc91 	bl	8001ad4 <Print_Students_InPg>
				state = None;
 80021b2:	4b38      	ldr	r3, [pc, #224]	@ (8002294 <main+0x5a0>)
 80021b4:	2268      	movs	r2, #104	@ 0x68
 80021b6:	601a      	str	r2, [r3, #0]
			}
			Ppage = Npage;
 80021b8:	4b37      	ldr	r3, [pc, #220]	@ (8002298 <main+0x5a4>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a37      	ldr	r2, [pc, #220]	@ (800229c <main+0x5a8>)
 80021be:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021c0:	b662      	cpsie	i
}
 80021c2:	bf00      	nop
			__enable_irq();
			break;
 80021c4:	e2de      	b.n	8002784 <main+0xa90>
  __ASM volatile ("cpsid i" : : : "memory");
 80021c6:	b672      	cpsid	i
}
 80021c8:	bf00      	nop
		case PrevPg:
			__disable_irq();
			if (totalPage == 1) {
 80021ca:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 80021ce:	f103 030c 	add.w	r3, r3, #12
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d105      	bne.n	80021e4 <main+0x4f0>
				state = ScanID;
 80021d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002294 <main+0x5a0>)
 80021da:	2266      	movs	r2, #102	@ 0x66
 80021dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80021de:	b662      	cpsie	i
}
 80021e0:	bf00      	nop
				__enable_irq();
				break;
 80021e2:	e2cf      	b.n	8002784 <main+0xa90>
			}
			Ppage--;
 80021e4:	4b2d      	ldr	r3, [pc, #180]	@ (800229c <main+0x5a8>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	3b01      	subs	r3, #1
 80021ea:	4a2c      	ldr	r2, [pc, #176]	@ (800229c <main+0x5a8>)
 80021ec:	6013      	str	r3, [r2, #0]
			if (Ppage <= 0) {
 80021ee:	4b2b      	ldr	r3, [pc, #172]	@ (800229c <main+0x5a8>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	dc06      	bgt.n	8002204 <main+0x510>
				Ppage = currentPage;
 80021f6:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 80021fa:	f103 030f 	add.w	r3, r3, #15
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	4a26      	ldr	r2, [pc, #152]	@ (800229c <main+0x5a8>)
 8002202:	6013      	str	r3, [r2, #0]
			}
			if (Ppage == currentPage) {
 8002204:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002208:	f103 030f 	add.w	r3, r3, #15
 800220c:	781a      	ldrb	r2, [r3, #0]
 800220e:	4b23      	ldr	r3, [pc, #140]	@ (800229c <main+0x5a8>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	429a      	cmp	r2, r3
 8002214:	d11d      	bne.n	8002252 <main+0x55e>
				state = ScanID;
 8002216:	4b1f      	ldr	r3, [pc, #124]	@ (8002294 <main+0x5a0>)
 8002218:	2266      	movs	r2, #102	@ 0x66
 800221a:	601a      	str	r2, [r3, #0]
				UI_Init(Ppage, totalSize);
 800221c:	4b1f      	ldr	r3, [pc, #124]	@ (800229c <main+0x5a8>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8002226:	f102 020d 	add.w	r2, r2, #13
 800222a:	7812      	ldrb	r2, [r2, #0]
 800222c:	4611      	mov	r1, r2
 800222e:	4618      	mov	r0, r3
 8002230:	f7ff fb08 	bl	8001844 <UI_Init>
				Print_Students_InPg(page, Ppage, currentSize);
 8002234:	4b19      	ldr	r3, [pc, #100]	@ (800229c <main+0x5a8>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	b2d9      	uxtb	r1, r3
 800223a:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 800223e:	f103 030e 	add.w	r3, r3, #14
 8002242:	781a      	ldrb	r2, [r3, #0]
 8002244:	f107 0310 	add.w	r3, r7, #16
 8002248:	3b10      	subs	r3, #16
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fc42 	bl	8001ad4 <Print_Students_InPg>
 8002250:	e018      	b.n	8002284 <main+0x590>
			} else {
				UI_Init(Ppage, totalSize);
 8002252:	4b12      	ldr	r3, [pc, #72]	@ (800229c <main+0x5a8>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	b2db      	uxtb	r3, r3
 8002258:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 800225c:	f102 020d 	add.w	r2, r2, #13
 8002260:	7812      	ldrb	r2, [r2, #0]
 8002262:	4611      	mov	r1, r2
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff faed 	bl	8001844 <UI_Init>
				Print_Students_InPg(page, Ppage, 6);
 800226a:	4b0c      	ldr	r3, [pc, #48]	@ (800229c <main+0x5a8>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	b2d9      	uxtb	r1, r3
 8002270:	f107 0310 	add.w	r3, r7, #16
 8002274:	3b10      	subs	r3, #16
 8002276:	2206      	movs	r2, #6
 8002278:	4618      	mov	r0, r3
 800227a:	f7ff fc2b 	bl	8001ad4 <Print_Students_InPg>
				state = None;
 800227e:	4b05      	ldr	r3, [pc, #20]	@ (8002294 <main+0x5a0>)
 8002280:	2268      	movs	r2, #104	@ 0x68
 8002282:	601a      	str	r2, [r3, #0]
			}
			Npage = Ppage;
 8002284:	4b05      	ldr	r3, [pc, #20]	@ (800229c <main+0x5a8>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a03      	ldr	r2, [pc, #12]	@ (8002298 <main+0x5a4>)
 800228a:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800228c:	b662      	cpsie	i
}
 800228e:	bf00      	nop
			__enable_irq();
			break;
 8002290:	e278      	b.n	8002784 <main+0xa90>
 8002292:	bf00      	nop
 8002294:	200000c8 	.word	0x200000c8
 8002298:	200001cc 	.word	0x200001cc
 800229c:	200001d0 	.word	0x200001d0
		case ScanID:
			MFRC522_Request(PICC_REQIDL, str);
 80022a0:	4943      	ldr	r1, [pc, #268]	@ (80023b0 <main+0x6bc>)
 80022a2:	2026      	movs	r0, #38	@ 0x26
 80022a4:	f000 fc85 	bl	8002bb2 <MFRC522_Request>
			status = MFRC522_Anticoll(str);
 80022a8:	4841      	ldr	r0, [pc, #260]	@ (80023b0 <main+0x6bc>)
 80022aa:	f000 fca7 	bl	8002bfc <MFRC522_Anticoll>
 80022ae:	4603      	mov	r3, r0
 80022b0:	461a      	mov	r2, r3
 80022b2:	4b40      	ldr	r3, [pc, #256]	@ (80023b4 <main+0x6c0>)
 80022b4:	701a      	strb	r2, [r3, #0]
			if (status == MI_OK && isEnd != 1)
 80022b6:	4b3f      	ldr	r3, [pc, #252]	@ (80023b4 <main+0x6c0>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f040 825f 	bne.w	800277e <main+0xa8a>
 80022c0:	4b3d      	ldr	r3, [pc, #244]	@ (80023b8 <main+0x6c4>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	f000 825a 	beq.w	800277e <main+0xa8a>
			{

				sprintf(buffer, "%X%X%X%X", str[0], str[1], str[2], str[3]);
 80022ca:	4b39      	ldr	r3, [pc, #228]	@ (80023b0 <main+0x6bc>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	4619      	mov	r1, r3
 80022d0:	4b37      	ldr	r3, [pc, #220]	@ (80023b0 <main+0x6bc>)
 80022d2:	785b      	ldrb	r3, [r3, #1]
 80022d4:	461c      	mov	r4, r3
 80022d6:	4b36      	ldr	r3, [pc, #216]	@ (80023b0 <main+0x6bc>)
 80022d8:	789b      	ldrb	r3, [r3, #2]
 80022da:	461a      	mov	r2, r3
 80022dc:	4b34      	ldr	r3, [pc, #208]	@ (80023b0 <main+0x6bc>)
 80022de:	78db      	ldrb	r3, [r3, #3]
 80022e0:	f507 50e1 	add.w	r0, r7, #7200	@ 0x1c20
 80022e4:	f100 000c 	add.w	r0, r0, #12
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	9200      	str	r2, [sp, #0]
 80022ec:	4623      	mov	r3, r4
 80022ee:	460a      	mov	r2, r1
 80022f0:	4932      	ldr	r1, [pc, #200]	@ (80023bc <main+0x6c8>)
 80022f2:	f004 fc0b 	bl	8006b0c <siprintf>
				if (isDuplicateID(page, totalPage, currentSize, buffer) == 1) {
 80022f6:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 80022fa:	f103 030c 	add.w	r3, r3, #12
 80022fe:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8002302:	f102 020e 	add.w	r2, r2, #14
 8002306:	7812      	ldrb	r2, [r2, #0]
 8002308:	f507 51e3 	add.w	r1, r7, #7264	@ 0x1c60
 800230c:	f101 010c 	add.w	r1, r1, #12
 8002310:	7809      	ldrb	r1, [r1, #0]
 8002312:	f107 0010 	add.w	r0, r7, #16
 8002316:	3810      	subs	r0, #16
 8002318:	f7ff fca2 	bl	8001c60 <isDuplicateID>
 800231c:	4603      	mov	r3, r0
 800231e:	2b01      	cmp	r3, #1
 8002320:	f000 822f 	beq.w	8002782 <main+0xa8e>
					break;
				}
				HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 0);
 8002324:	2200      	movs	r2, #0
 8002326:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800232a:	4825      	ldr	r0, [pc, #148]	@ (80023c0 <main+0x6cc>)
 800232c:	f001 ff94 	bl	8004258 <HAL_GPIO_WritePin>
				//__disable_irq();
				if (currentSize == 6) {
 8002330:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002334:	f103 030e 	add.w	r3, r3, #14
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b06      	cmp	r3, #6
 800233c:	d146      	bne.n	80023cc <main+0x6d8>
					currentPage++;
 800233e:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002342:	f103 030f 	add.w	r3, r3, #15
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	3301      	adds	r3, #1
 800234a:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 800234e:	f102 020f 	add.w	r2, r2, #15
 8002352:	7013      	strb	r3, [r2, #0]
					totalPage++;
 8002354:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002358:	f103 030c 	add.w	r3, r3, #12
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	3301      	adds	r3, #1
 8002360:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8002364:	f102 020c 	add.w	r2, r2, #12
 8002368:	7013      	strb	r3, [r2, #0]
					Npage = currentPage;
 800236a:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 800236e:	f103 030f 	add.w	r3, r3, #15
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	4a13      	ldr	r2, [pc, #76]	@ (80023c4 <main+0x6d0>)
 8002376:	6013      	str	r3, [r2, #0]
					Ppage = currentPage;
 8002378:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 800237c:	f103 030f 	add.w	r3, r3, #15
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	4a11      	ldr	r2, [pc, #68]	@ (80023c8 <main+0x6d4>)
 8002384:	6013      	str	r3, [r2, #0]
					currentSize = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 800238c:	f102 020e 	add.w	r2, r2, #14
 8002390:	7013      	strb	r3, [r2, #0]
					UI_Init(currentPage, totalSize);
 8002392:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002396:	f103 030d 	add.w	r3, r3, #13
 800239a:	781a      	ldrb	r2, [r3, #0]
 800239c:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 80023a0:	f103 030f 	add.w	r3, r3, #15
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	4611      	mov	r1, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	f7ff fa4b 	bl	8001844 <UI_Init>
 80023ae:	e00d      	b.n	80023cc <main+0x6d8>
 80023b0:	200001bc 	.word	0x200001bc
 80023b4:	200001b8 	.word	0x200001b8
 80023b8:	200001d4 	.word	0x200001d4
 80023bc:	080078b4 	.word	0x080078b4
 80023c0:	40021800 	.word	0x40021800
 80023c4:	200001cc 	.word	0x200001cc
 80023c8:	200001d0 	.word	0x200001d0
				}
				//page[currentPage].student[currentSize].order = totalSize + 1;
				// Get uid
				strcpy(page[currentPage].student[currentSize].ID, buffer);
 80023cc:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 80023d0:	f103 030f 	add.w	r3, r3, #15
 80023d4:	7818      	ldrb	r0, [r3, #0]
 80023d6:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 80023da:	f103 030e 	add.w	r3, r3, #14
 80023de:	7819      	ldrb	r1, [r3, #0]
 80023e0:	f107 0210 	add.w	r2, r7, #16
 80023e4:	3a10      	subs	r2, #16
 80023e6:	460b      	mov	r3, r1
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	440b      	add	r3, r1
 80023ec:	015b      	lsls	r3, r3, #5
 80023ee:	f44f 7111 	mov.w	r1, #580	@ 0x244
 80023f2:	fb00 f101 	mul.w	r1, r0, r1
 80023f6:	440b      	add	r3, r1
 80023f8:	4413      	add	r3, r2
 80023fa:	3305      	adds	r3, #5
 80023fc:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 8002400:	f102 020c 	add.w	r2, r2, #12
 8002404:	4611      	mov	r1, r2
 8002406:	4618      	mov	r0, r3
 8002408:	f004 fbd4 	bl	8006bb4 <strcpy>
				Flash_Write_CharArr(buffer, page[currentPage].student[currentSize].addr);
 800240c:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002410:	f103 030f 	add.w	r3, r3, #15
 8002414:	7818      	ldrb	r0, [r3, #0]
 8002416:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 800241a:	f103 030e 	add.w	r3, r3, #14
 800241e:	781a      	ldrb	r2, [r3, #0]
 8002420:	f507 6347 	add.w	r3, r7, #3184	@ 0xc70
 8002424:	f5a3 6147 	sub.w	r1, r3, #3184	@ 0xc70
 8002428:	4613      	mov	r3, r2
 800242a:	005b      	lsls	r3, r3, #1
 800242c:	4413      	add	r3, r2
 800242e:	015b      	lsls	r3, r3, #5
 8002430:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8002434:	fb00 f202 	mul.w	r2, r0, r2
 8002438:	4413      	add	r3, r2
 800243a:	440b      	add	r3, r1
 800243c:	3360      	adds	r3, #96	@ 0x60
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 8002444:	f103 030c 	add.w	r3, r3, #12
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f7fe faaa 	bl	80009a4 <Flash_Write_CharArr>
				// Get name
				strcpy(buffer, Get_Name(page, index++, currentPage, currentSize));
 8002450:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002454:	6819      	ldr	r1, [r3, #0]
 8002456:	1c4b      	adds	r3, r1, #1
 8002458:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002462:	f103 030e 	add.w	r3, r3, #14
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 800246c:	f102 020f 	add.w	r2, r2, #15
 8002470:	7812      	ldrb	r2, [r2, #0]
 8002472:	f107 0010 	add.w	r0, r7, #16
 8002476:	3810      	subs	r0, #16
 8002478:	f7ff f958 	bl	800172c <Get_Name>
 800247c:	4602      	mov	r2, r0
 800247e:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 8002482:	f103 030c 	add.w	r3, r3, #12
 8002486:	4611      	mov	r1, r2
 8002488:	4618      	mov	r0, r3
 800248a:	f004 fb93 	bl	8006bb4 <strcpy>
				strcpy(page[currentPage].student[currentSize].name, buffer);
 800248e:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002492:	f103 030f 	add.w	r3, r3, #15
 8002496:	7818      	ldrb	r0, [r3, #0]
 8002498:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 800249c:	f103 030e 	add.w	r3, r3, #14
 80024a0:	7819      	ldrb	r1, [r3, #0]
 80024a2:	f107 0210 	add.w	r2, r7, #16
 80024a6:	3a10      	subs	r2, #16
 80024a8:	460b      	mov	r3, r1
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	440b      	add	r3, r1
 80024ae:	015b      	lsls	r3, r3, #5
 80024b0:	f44f 7111 	mov.w	r1, #580	@ 0x244
 80024b4:	fb00 f101 	mul.w	r1, r0, r1
 80024b8:	440b      	add	r3, r1
 80024ba:	3308      	adds	r3, #8
 80024bc:	4413      	add	r3, r2
 80024be:	3307      	adds	r3, #7
 80024c0:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 80024c4:	f102 020c 	add.w	r2, r2, #12
 80024c8:	4611      	mov	r1, r2
 80024ca:	4618      	mov	r0, r3
 80024cc:	f004 fb72 	bl	8006bb4 <strcpy>
				Flash_Write_CharArr(buffer, page[currentPage].student[currentSize].addr + 0x10);
 80024d0:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 80024d4:	f103 030f 	add.w	r3, r3, #15
 80024d8:	7818      	ldrb	r0, [r3, #0]
 80024da:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 80024de:	f103 030e 	add.w	r3, r3, #14
 80024e2:	781a      	ldrb	r2, [r3, #0]
 80024e4:	f507 6347 	add.w	r3, r7, #3184	@ 0xc70
 80024e8:	f5a3 6147 	sub.w	r1, r3, #3184	@ 0xc70
 80024ec:	4613      	mov	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	4413      	add	r3, r2
 80024f2:	015b      	lsls	r3, r3, #5
 80024f4:	f44f 7211 	mov.w	r2, #580	@ 0x244
 80024f8:	fb00 f202 	mul.w	r2, r0, r2
 80024fc:	4413      	add	r3, r2
 80024fe:	440b      	add	r3, r1
 8002500:	3360      	adds	r3, #96	@ 0x60
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f103 0210 	add.w	r2, r3, #16
 8002508:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800250c:	f103 030c 	add.w	r3, r3, #12
 8002510:	4611      	mov	r1, r2
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe fa46 	bl	80009a4 <Flash_Write_CharArr>
				// Get time
				Get_Time(buffer);
 8002518:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 800251c:	f103 030c 	add.w	r3, r3, #12
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff faf5 	bl	8001b10 <Get_Time>
				strcpy(page[currentPage].student[currentSize].time, buffer);
 8002526:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 800252a:	f103 030f 	add.w	r3, r3, #15
 800252e:	7818      	ldrb	r0, [r3, #0]
 8002530:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002534:	f103 030e 	add.w	r3, r3, #14
 8002538:	7819      	ldrb	r1, [r3, #0]
 800253a:	f107 0210 	add.w	r2, r7, #16
 800253e:	3a10      	subs	r2, #16
 8002540:	460b      	mov	r3, r1
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	440b      	add	r3, r1
 8002546:	015b      	lsls	r3, r3, #5
 8002548:	f44f 7111 	mov.w	r1, #580	@ 0x244
 800254c:	fb00 f101 	mul.w	r1, r0, r1
 8002550:	440b      	add	r3, r1
 8002552:	3328      	adds	r3, #40	@ 0x28
 8002554:	4413      	add	r3, r2
 8002556:	3305      	adds	r3, #5
 8002558:	f507 52e1 	add.w	r2, r7, #7200	@ 0x1c20
 800255c:	f102 020c 	add.w	r2, r2, #12
 8002560:	4611      	mov	r1, r2
 8002562:	4618      	mov	r0, r3
 8002564:	f004 fb26 	bl	8006bb4 <strcpy>
				Flash_Write_CharArr(buffer, page[currentPage].student[currentSize].addr + 0x30);
 8002568:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 800256c:	f103 030f 	add.w	r3, r3, #15
 8002570:	7818      	ldrb	r0, [r3, #0]
 8002572:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002576:	f103 030e 	add.w	r3, r3, #14
 800257a:	781a      	ldrb	r2, [r3, #0]
 800257c:	f507 6347 	add.w	r3, r7, #3184	@ 0xc70
 8002580:	f5a3 6147 	sub.w	r1, r3, #3184	@ 0xc70
 8002584:	4613      	mov	r3, r2
 8002586:	005b      	lsls	r3, r3, #1
 8002588:	4413      	add	r3, r2
 800258a:	015b      	lsls	r3, r3, #5
 800258c:	f44f 7211 	mov.w	r2, #580	@ 0x244
 8002590:	fb00 f202 	mul.w	r2, r0, r2
 8002594:	4413      	add	r3, r2
 8002596:	440b      	add	r3, r1
 8002598:	3360      	adds	r3, #96	@ 0x60
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80025a0:	f507 53e1 	add.w	r3, r7, #7200	@ 0x1c20
 80025a4:	f103 030c 	add.w	r3, r3, #12
 80025a8:	4611      	mov	r1, r2
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe f9fa 	bl	80009a4 <Flash_Write_CharArr>

				printStudent(page, currentPage, currentSize);
 80025b0:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 80025b4:	f103 030e 	add.w	r3, r3, #14
 80025b8:	781a      	ldrb	r2, [r3, #0]
 80025ba:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 80025be:	f103 030f 	add.w	r3, r3, #15
 80025c2:	7819      	ldrb	r1, [r3, #0]
 80025c4:	f107 0310 	add.w	r3, r7, #16
 80025c8:	3b10      	subs	r3, #16
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff f9ce 	bl	800196c <printStudent>
				sprintf(txBuffer, "%s|%s|%s", page[currentPage].student[currentSize].name, page[currentPage].student[currentSize].ID, page[currentPage].student[currentSize].time);
 80025d0:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 80025d4:	f103 030f 	add.w	r3, r3, #15
 80025d8:	7818      	ldrb	r0, [r3, #0]
 80025da:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 80025de:	f103 030e 	add.w	r3, r3, #14
 80025e2:	7819      	ldrb	r1, [r3, #0]
 80025e4:	f107 0210 	add.w	r2, r7, #16
 80025e8:	3a10      	subs	r2, #16
 80025ea:	460b      	mov	r3, r1
 80025ec:	005b      	lsls	r3, r3, #1
 80025ee:	440b      	add	r3, r1
 80025f0:	015b      	lsls	r3, r3, #5
 80025f2:	f44f 7111 	mov.w	r1, #580	@ 0x244
 80025f6:	fb00 f101 	mul.w	r1, r0, r1
 80025fa:	440b      	add	r3, r1
 80025fc:	3308      	adds	r3, #8
 80025fe:	4413      	add	r3, r2
 8002600:	1ddc      	adds	r4, r3, #7
 8002602:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002606:	f103 030f 	add.w	r3, r3, #15
 800260a:	7818      	ldrb	r0, [r3, #0]
 800260c:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002610:	f103 030e 	add.w	r3, r3, #14
 8002614:	7819      	ldrb	r1, [r3, #0]
 8002616:	f107 0210 	add.w	r2, r7, #16
 800261a:	3a10      	subs	r2, #16
 800261c:	460b      	mov	r3, r1
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	440b      	add	r3, r1
 8002622:	015b      	lsls	r3, r3, #5
 8002624:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8002628:	fb00 f101 	mul.w	r1, r0, r1
 800262c:	440b      	add	r3, r1
 800262e:	4413      	add	r3, r2
 8002630:	1d5d      	adds	r5, r3, #5
 8002632:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002636:	f103 030f 	add.w	r3, r3, #15
 800263a:	7818      	ldrb	r0, [r3, #0]
 800263c:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002640:	f103 030e 	add.w	r3, r3, #14
 8002644:	7819      	ldrb	r1, [r3, #0]
 8002646:	f107 0210 	add.w	r2, r7, #16
 800264a:	3a10      	subs	r2, #16
 800264c:	460b      	mov	r3, r1
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	440b      	add	r3, r1
 8002652:	015b      	lsls	r3, r3, #5
 8002654:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8002658:	fb00 f101 	mul.w	r1, r0, r1
 800265c:	440b      	add	r3, r1
 800265e:	3328      	adds	r3, #40	@ 0x28
 8002660:	4413      	add	r3, r2
 8002662:	3305      	adds	r3, #5
 8002664:	f507 50d9 	add.w	r0, r7, #6944	@ 0x1b20
 8002668:	f100 0010 	add.w	r0, r0, #16
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	462b      	mov	r3, r5
 8002670:	4622      	mov	r2, r4
 8002672:	4945      	ldr	r1, [pc, #276]	@ (8002788 <main+0xa94>)
 8002674:	f004 fa4a 	bl	8006b0c <siprintf>
				HAL_UART_Transmit(&huart1, txBuffer, strlen(txBuffer), 1000);
 8002678:	f507 53d9 	add.w	r3, r7, #6944	@ 0x1b20
 800267c:	f103 0310 	add.w	r3, r3, #16
 8002680:	4618      	mov	r0, r3
 8002682:	f7fd fdbf 	bl	8000204 <strlen>
 8002686:	4603      	mov	r3, r0
 8002688:	b29a      	uxth	r2, r3
 800268a:	f507 51d9 	add.w	r1, r7, #6944	@ 0x1b20
 800268e:	f101 0110 	add.w	r1, r1, #16
 8002692:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002696:	483d      	ldr	r0, [pc, #244]	@ (800278c <main+0xa98>)
 8002698:	f003 fe7c 	bl	8006394 <HAL_UART_Transmit>
				currentSize++;
 800269c:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 80026a0:	f103 030e 	add.w	r3, r3, #14
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	3301      	adds	r3, #1
 80026a8:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 80026ac:	f102 020e 	add.w	r2, r2, #14
 80026b0:	7013      	strb	r3, [r2, #0]
				totalSize++;
 80026b2:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 80026b6:	f103 030d 	add.w	r3, r3, #13
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	3301      	adds	r3, #1
 80026be:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 80026c2:	f102 020d 	add.w	r2, r2, #13
 80026c6:	7013      	strb	r3, [r2, #0]
				if (totalSize == 50) state = End;
 80026c8:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 80026cc:	f103 030d 	add.w	r3, r3, #13
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	2b32      	cmp	r3, #50	@ 0x32
 80026d4:	d102      	bne.n	80026dc <main+0x9e8>
 80026d6:	4b2e      	ldr	r3, [pc, #184]	@ (8002790 <main+0xa9c>)
 80026d8:	226a      	movs	r2, #106	@ 0x6a
 80026da:	601a      	str	r2, [r3, #0]
				New_SS(totalSize);
 80026dc:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 80026e0:	f103 030d 	add.w	r3, r3, #13
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	4618      	mov	r0, r3
 80026e8:	f7ff fa9e 	bl	8001c28 <New_SS>

				HAL_Delay(30000);
 80026ec:	f247 5030 	movw	r0, #30000	@ 0x7530
 80026f0:	f000 ffca 	bl	8003688 <HAL_Delay>
				//__enable_irq();
				//HAL_Delay(15000);
			}
			break;
 80026f4:	e043      	b.n	800277e <main+0xa8a>
		case Reset:

			HAL_Delay(5000);
 80026f6:	f241 3088 	movw	r0, #5000	@ 0x1388
 80026fa:	f000 ffc5 	bl	8003688 <HAL_Delay>
			Flash_Erase_Sector11();
 80026fe:	f7fe f9d6 	bl	8000aae <Flash_Erase_Sector11>
			HAL_Delay(5000);
 8002702:	f241 3088 	movw	r0, #5000	@ 0x1388
 8002706:	f000 ffbf 	bl	8003688 <HAL_Delay>
			Fill_Black(0, LCD_ACTIVE_WIDTH, 0, LCD_ACTIVE_HEIGHT);
 800270a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800270e:	2200      	movs	r2, #0
 8002710:	21f0      	movs	r1, #240	@ 0xf0
 8002712:	2000      	movs	r0, #0
 8002714:	f7fe f81d 	bl	8000752 <Fill_Black>
			currentPage = 1, currentSize = 0, totalSize = 0, totalPage = 1;
 8002718:	2301      	movs	r3, #1
 800271a:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 800271e:	f102 020f 	add.w	r2, r2, #15
 8002722:	7013      	strb	r3, [r2, #0]
 8002724:	2300      	movs	r3, #0
 8002726:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 800272a:	f102 020e 	add.w	r2, r2, #14
 800272e:	7013      	strb	r3, [r2, #0]
 8002730:	2300      	movs	r3, #0
 8002732:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8002736:	f102 020d 	add.w	r2, r2, #13
 800273a:	7013      	strb	r3, [r2, #0]
 800273c:	2301      	movs	r3, #1
 800273e:	f507 52e3 	add.w	r2, r7, #7264	@ 0x1c60
 8002742:	f102 020c 	add.w	r2, r2, #12
 8002746:	7013      	strb	r3, [r2, #0]
			isEnd = 0;
 8002748:	4b12      	ldr	r3, [pc, #72]	@ (8002794 <main+0xaa0>)
 800274a:	2200      	movs	r2, #0
 800274c:	601a      	str	r2, [r3, #0]
			UI_Init(currentPage, totalSize);
 800274e:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 8002752:	f103 030d 	add.w	r3, r3, #13
 8002756:	781a      	ldrb	r2, [r3, #0]
 8002758:	f507 53e3 	add.w	r3, r7, #7264	@ 0x1c60
 800275c:	f103 030f 	add.w	r3, r3, #15
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	4611      	mov	r1, r2
 8002764:	4618      	mov	r0, r3
 8002766:	f7ff f86d 	bl	8001844 <UI_Init>
			state = ScanID;
 800276a:	4b09      	ldr	r3, [pc, #36]	@ (8002790 <main+0xa9c>)
 800276c:	2266      	movs	r2, #102	@ 0x66
 800276e:	601a      	str	r2, [r3, #0]

			break;
 8002770:	e008      	b.n	8002784 <main+0xa90>
		case End:
			isEnd = 1;
 8002772:	4b08      	ldr	r3, [pc, #32]	@ (8002794 <main+0xaa0>)
 8002774:	2201      	movs	r2, #1
 8002776:	601a      	str	r2, [r3, #0]
			break;
 8002778:	e004      	b.n	8002784 <main+0xa90>
		default:
			break;
 800277a:	bf00      	nop
 800277c:	e498      	b.n	80020b0 <main+0x3bc>
			break;
 800277e:	bf00      	nop
 8002780:	e496      	b.n	80020b0 <main+0x3bc>
					break;
 8002782:	bf00      	nop
	  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, 1);
 8002784:	e494      	b.n	80020b0 <main+0x3bc>
 8002786:	bf00      	nop
 8002788:	080078c0 	.word	0x080078c0
 800278c:	20000238 	.word	0x20000238
 8002790:	200000c8 	.word	0x200000c8
 8002794:	200001d4 	.word	0x200001d4

08002798 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b094      	sub	sp, #80	@ 0x50
 800279c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800279e:	f107 0320 	add.w	r3, r7, #32
 80027a2:	2230      	movs	r2, #48	@ 0x30
 80027a4:	2100      	movs	r1, #0
 80027a6:	4618      	mov	r0, r3
 80027a8:	f004 f9d0 	bl	8006b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80027ac:	f107 030c 	add.w	r3, r7, #12
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80027bc:	2300      	movs	r3, #0
 80027be:	60bb      	str	r3, [r7, #8]
 80027c0:	4b23      	ldr	r3, [pc, #140]	@ (8002850 <SystemClock_Config+0xb8>)
 80027c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c4:	4a22      	ldr	r2, [pc, #136]	@ (8002850 <SystemClock_Config+0xb8>)
 80027c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80027cc:	4b20      	ldr	r3, [pc, #128]	@ (8002850 <SystemClock_Config+0xb8>)
 80027ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027d4:	60bb      	str	r3, [r7, #8]
 80027d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80027d8:	2300      	movs	r3, #0
 80027da:	607b      	str	r3, [r7, #4]
 80027dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002854 <SystemClock_Config+0xbc>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80027e4:	4a1b      	ldr	r2, [pc, #108]	@ (8002854 <SystemClock_Config+0xbc>)
 80027e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027ea:	6013      	str	r3, [r2, #0]
 80027ec:	4b19      	ldr	r3, [pc, #100]	@ (8002854 <SystemClock_Config+0xbc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80027f4:	607b      	str	r3, [r7, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80027f8:	2302      	movs	r3, #2
 80027fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80027fc:	2301      	movs	r3, #1
 80027fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002800:	2310      	movs	r3, #16
 8002802:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002804:	2300      	movs	r3, #0
 8002806:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002808:	f107 0320 	add.w	r3, r7, #32
 800280c:	4618      	mov	r0, r3
 800280e:	f002 fdcb 	bl	80053a8 <HAL_RCC_OscConfig>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002818:	f000 f81e 	bl	8002858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800281c:	230f      	movs	r3, #15
 800281e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002820:	2300      	movs	r3, #0
 8002822:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002824:	2300      	movs	r3, #0
 8002826:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002828:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800282c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800282e:	2300      	movs	r3, #0
 8002830:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002832:	f107 030c 	add.w	r3, r7, #12
 8002836:	2100      	movs	r1, #0
 8002838:	4618      	mov	r0, r3
 800283a:	f003 f82d 	bl	8005898 <HAL_RCC_ClockConfig>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d001      	beq.n	8002848 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002844:	f000 f808 	bl	8002858 <Error_Handler>
  }
}
 8002848:	bf00      	nop
 800284a:	3750      	adds	r7, #80	@ 0x50
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40023800 	.word	0x40023800
 8002854:	40007000 	.word	0x40007000

08002858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800285c:	b672      	cpsid	i
}
 800285e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002860:	bf00      	nop
 8002862:	e7fd      	b.n	8002860 <Error_Handler+0x8>

08002864 <RC522_SPI_Transfer>:
 * Description: A common function used by Write_MFRC522 and Read_MFRC522
 * Input Parameters: data - the value to be written
 * Returns: a byte of data read from the module
 */
uint8_t RC522_SPI_Transfer(uchar data)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b086      	sub	sp, #24
 8002868:	af02      	add	r7, sp, #8
 800286a:	4603      	mov	r3, r0
 800286c:	71fb      	strb	r3, [r7, #7]
	uchar rx_data;
	HAL_SPI_TransmitReceive(HSPI_INSTANCE,&data,&rx_data,1,100);
 800286e:	f107 020f 	add.w	r2, r7, #15
 8002872:	1df9      	adds	r1, r7, #7
 8002874:	2364      	movs	r3, #100	@ 0x64
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2301      	movs	r3, #1
 800287a:	4804      	ldr	r0, [pc, #16]	@ (800288c <RC522_SPI_Transfer+0x28>)
 800287c:	f003 fab5 	bl	8005dea <HAL_SPI_TransmitReceive>

	return rx_data;
 8002880:	7bfb      	ldrb	r3, [r7, #15]
}
 8002882:	4618      	mov	r0, r3
 8002884:	3710      	adds	r7, #16
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	200001dc 	.word	0x200001dc

08002890 <Write_MFRC522>:
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parameters: addr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uchar addr, uchar val)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b082      	sub	sp, #8
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	460a      	mov	r2, r1
 800289a:	71fb      	strb	r3, [r7, #7]
 800289c:	4613      	mov	r3, r2
 800289e:	71bb      	strb	r3, [r7, #6]
	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2110      	movs	r1, #16
 80028a4:	480c      	ldr	r0, [pc, #48]	@ (80028d8 <Write_MFRC522+0x48>)
 80028a6:	f001 fcd7 	bl	8004258 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and clear the MSb to indicate a write
	  // - bottom 8 bits are the data bits being sent for that address, we send them
	RC522_SPI_Transfer((addr<<1)&0x7E);
 80028aa:	79fb      	ldrb	r3, [r7, #7]
 80028ac:	005b      	lsls	r3, r3, #1
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff ffd4 	bl	8002864 <RC522_SPI_Transfer>
	RC522_SPI_Transfer(val);
 80028bc:	79bb      	ldrb	r3, [r7, #6]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff ffd0 	bl	8002864 <RC522_SPI_Transfer>

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80028c4:	2201      	movs	r2, #1
 80028c6:	2110      	movs	r1, #16
 80028c8:	4803      	ldr	r0, [pc, #12]	@ (80028d8 <Write_MFRC522+0x48>)
 80028ca:	f001 fcc5 	bl	8004258 <HAL_GPIO_WritePin>
}
 80028ce:	bf00      	nop
 80028d0:	3708      	adds	r7, #8
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40021000 	.word	0x40021000

080028dc <Read_MFRC522>:
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the module
 */
uchar Read_MFRC522(uchar addr)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	4603      	mov	r3, r0
 80028e4:	71fb      	strb	r3, [r7, #7]
	uchar val;

	/* CS LOW */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_RESET);
 80028e6:	2200      	movs	r2, #0
 80028e8:	2110      	movs	r1, #16
 80028ea:	480f      	ldr	r0, [pc, #60]	@ (8002928 <Read_MFRC522+0x4c>)
 80028ec:	f001 fcb4 	bl	8004258 <HAL_GPIO_WritePin>
	  // two 8-bit frames smooshed together-- sending two 8 bit frames back to back
	  // results in a spike in the select line which will jack with transactions
	  // - top 8 bits are the address. Per the spec, we shift the address left
	  //   1 bit, clear the LSb, and set the MSb to indicate a read
	  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
	RC522_SPI_Transfer(((addr<<1)&0x7E) | 0x80);
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	005b      	lsls	r3, r3, #1
 80028f4:	b25b      	sxtb	r3, r3
 80028f6:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80028fa:	b25b      	sxtb	r3, r3
 80028fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002900:	b25b      	sxtb	r3, r3
 8002902:	b2db      	uxtb	r3, r3
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ffad 	bl	8002864 <RC522_SPI_Transfer>
	val = RC522_SPI_Transfer(0x00);
 800290a:	2000      	movs	r0, #0
 800290c:	f7ff ffaa 	bl	8002864 <RC522_SPI_Transfer>
 8002910:	4603      	mov	r3, r0
 8002912:	73fb      	strb	r3, [r7, #15]

	/* CS HIGH */
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 8002914:	2201      	movs	r2, #1
 8002916:	2110      	movs	r1, #16
 8002918:	4803      	ldr	r0, [pc, #12]	@ (8002928 <Read_MFRC522+0x4c>)
 800291a:	f001 fc9d 	bl	8004258 <HAL_GPIO_WritePin>

	return val;
 800291e:	7bfb      	ldrb	r3, [r7, #15]

}
 8002920:	4618      	mov	r0, r3
 8002922:	3710      	adds	r7, #16
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}
 8002928:	40021000 	.word	0x40021000

0800292c <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uchar reg, uchar mask)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	460a      	mov	r2, r1
 8002936:	71fb      	strb	r3, [r7, #7]
 8002938:	4613      	mov	r3, r2
 800293a:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 800293c:	79fb      	ldrb	r3, [r7, #7]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ffcc 	bl	80028dc <Read_MFRC522>
 8002944:	4603      	mov	r3, r0
 8002946:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8002948:	7bfa      	ldrb	r2, [r7, #15]
 800294a:	79bb      	ldrb	r3, [r7, #6]
 800294c:	4313      	orrs	r3, r2
 800294e:	b2da      	uxtb	r2, r3
 8002950:	79fb      	ldrb	r3, [r7, #7]
 8002952:	4611      	mov	r1, r2
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff9b 	bl	8002890 <Write_MFRC522>
}
 800295a:	bf00      	nop
 800295c:	3710      	adds	r7, #16
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}

08002962 <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uchar reg, uchar mask)
{
 8002962:	b580      	push	{r7, lr}
 8002964:	b084      	sub	sp, #16
 8002966:	af00      	add	r7, sp, #0
 8002968:	4603      	mov	r3, r0
 800296a:	460a      	mov	r2, r1
 800296c:	71fb      	strb	r3, [r7, #7]
 800296e:	4613      	mov	r3, r2
 8002970:	71bb      	strb	r3, [r7, #6]
    uchar tmp;
    tmp = Read_MFRC522(reg);
 8002972:	79fb      	ldrb	r3, [r7, #7]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ffb1 	bl	80028dc <Read_MFRC522>
 800297a:	4603      	mov	r3, r0
 800297c:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 800297e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002982:	43db      	mvns	r3, r3
 8002984:	b25a      	sxtb	r2, r3
 8002986:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800298a:	4013      	ands	r3, r2
 800298c:	b25b      	sxtb	r3, r3
 800298e:	b2da      	uxtb	r2, r3
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f7ff ff7b 	bl	8002890 <Write_MFRC522>
}
 800299a:	bf00      	nop
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	af00      	add	r7, sp, #0

	Read_MFRC522(TxControlReg);
 80029a6:	2014      	movs	r0, #20
 80029a8:	f7ff ff98 	bl	80028dc <Read_MFRC522>
	SetBitMask(TxControlReg, 0x03);
 80029ac:	2103      	movs	r1, #3
 80029ae:	2014      	movs	r0, #20
 80029b0:	f7ff ffbc 	bl	800292c <SetBitMask>
}
 80029b4:	bf00      	nop
 80029b6:	bd80      	pop	{r7, pc}

080029b8 <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
    Write_MFRC522(CommandReg, PCD_RESETPHASE);
 80029bc:	210f      	movs	r1, #15
 80029be:	2001      	movs	r0, #1
 80029c0:	f7ff ff66 	bl	8002890 <Write_MFRC522>
}
 80029c4:	bf00      	nop
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MFRC522_CS_PORT,MFRC522_CS_PIN,GPIO_PIN_SET);
 80029cc:	2201      	movs	r2, #1
 80029ce:	2110      	movs	r1, #16
 80029d0:	4812      	ldr	r0, [pc, #72]	@ (8002a1c <MFRC522_Init+0x54>)
 80029d2:	f001 fc41 	bl	8004258 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MFRC522_RST_PORT,MFRC522_RST_PIN,GPIO_PIN_SET);
 80029d6:	2201      	movs	r2, #1
 80029d8:	2108      	movs	r1, #8
 80029da:	4810      	ldr	r0, [pc, #64]	@ (8002a1c <MFRC522_Init+0x54>)
 80029dc:	f001 fc3c 	bl	8004258 <HAL_GPIO_WritePin>
	MFRC522_Reset();
 80029e0:	f7ff ffea 	bl	80029b8 <MFRC522_Reset>

	//Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
	Write_MFRC522(TModeReg, 0x8D);		//Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 80029e4:	218d      	movs	r1, #141	@ 0x8d
 80029e6:	202a      	movs	r0, #42	@ 0x2a
 80029e8:	f7ff ff52 	bl	8002890 <Write_MFRC522>
	Write_MFRC522(TPrescalerReg, 0x3E);	//TModeReg[3..0] + TPrescalerReg
 80029ec:	213e      	movs	r1, #62	@ 0x3e
 80029ee:	202b      	movs	r0, #43	@ 0x2b
 80029f0:	f7ff ff4e 	bl	8002890 <Write_MFRC522>
	Write_MFRC522(TReloadRegL, 30);
 80029f4:	211e      	movs	r1, #30
 80029f6:	202d      	movs	r0, #45	@ 0x2d
 80029f8:	f7ff ff4a 	bl	8002890 <Write_MFRC522>
	Write_MFRC522(TReloadRegH, 0);
 80029fc:	2100      	movs	r1, #0
 80029fe:	202c      	movs	r0, #44	@ 0x2c
 8002a00:	f7ff ff46 	bl	8002890 <Write_MFRC522>

	Write_MFRC522(TxAutoReg, 0x40);		// force 100% ASK modulation
 8002a04:	2140      	movs	r1, #64	@ 0x40
 8002a06:	2015      	movs	r0, #21
 8002a08:	f7ff ff42 	bl	8002890 <Write_MFRC522>
	Write_MFRC522(ModeReg, 0x3D);		// CRC Initial value 0x6363
 8002a0c:	213d      	movs	r1, #61	@ 0x3d
 8002a0e:	2011      	movs	r0, #17
 8002a10:	f7ff ff3e 	bl	8002890 <Write_MFRC522>

	AntennaOn();
 8002a14:	f7ff ffc5 	bl	80029a2 <AntennaOn>
}
 8002a18:	bf00      	nop
 8002a1a:	bd80      	pop	{r7, pc}
 8002a1c:	40021000 	.word	0x40021000

08002a20 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uchar MFRC522_ToCard(uchar command, uchar *sendData, uchar sendLen, uchar *backData, uint *backLen)
{
 8002a20:	b590      	push	{r4, r7, lr}
 8002a22:	b089      	sub	sp, #36	@ 0x24
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60b9      	str	r1, [r7, #8]
 8002a28:	607b      	str	r3, [r7, #4]
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	73fb      	strb	r3, [r7, #15]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	73bb      	strb	r3, [r7, #14]
    uchar status = MI_ERR;
 8002a32:	2302      	movs	r3, #2
 8002a34:	77fb      	strb	r3, [r7, #31]
    uchar irqEn = 0x00;
 8002a36:	2300      	movs	r3, #0
 8002a38:	77bb      	strb	r3, [r7, #30]
    uchar waitIRq = 0x00;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	777b      	strb	r3, [r7, #29]
    uchar lastBits;
    uchar n;
    uint i;

    switch (command)
 8002a3e:	7bfb      	ldrb	r3, [r7, #15]
 8002a40:	2b0c      	cmp	r3, #12
 8002a42:	d006      	beq.n	8002a52 <MFRC522_ToCard+0x32>
 8002a44:	2b0e      	cmp	r3, #14
 8002a46:	d109      	bne.n	8002a5c <MFRC522_ToCard+0x3c>
    {
        case PCD_AUTHENT:		// Certification cards close
		{
			irqEn = 0x12;
 8002a48:	2312      	movs	r3, #18
 8002a4a:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x10;
 8002a4c:	2310      	movs	r3, #16
 8002a4e:	777b      	strb	r3, [r7, #29]
			break;
 8002a50:	e005      	b.n	8002a5e <MFRC522_ToCard+0x3e>
		}
		case PCD_TRANSCEIVE:	// Transmit FIFO data
		{
			irqEn = 0x77;
 8002a52:	2377      	movs	r3, #119	@ 0x77
 8002a54:	77bb      	strb	r3, [r7, #30]
			waitIRq = 0x30;
 8002a56:	2330      	movs	r3, #48	@ 0x30
 8002a58:	777b      	strb	r3, [r7, #29]
			break;
 8002a5a:	e000      	b.n	8002a5e <MFRC522_ToCard+0x3e>
		}
		default:
			break;
 8002a5c:	bf00      	nop
    }

    Write_MFRC522(CommIEnReg, irqEn|0x80);	// Interrupt request
 8002a5e:	7fbb      	ldrb	r3, [r7, #30]
 8002a60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	4619      	mov	r1, r3
 8002a68:	2002      	movs	r0, #2
 8002a6a:	f7ff ff11 	bl	8002890 <Write_MFRC522>
    ClearBitMask(CommIrqReg, 0x80);			// Clear all interrupt request bit
 8002a6e:	2180      	movs	r1, #128	@ 0x80
 8002a70:	2004      	movs	r0, #4
 8002a72:	f7ff ff76 	bl	8002962 <ClearBitMask>
    SetBitMask(FIFOLevelReg, 0x80);			// FlushBuffer=1, FIFO Initialization
 8002a76:	2180      	movs	r1, #128	@ 0x80
 8002a78:	200a      	movs	r0, #10
 8002a7a:	f7ff ff57 	bl	800292c <SetBitMask>

	Write_MFRC522(CommandReg, PCD_IDLE);	// NO action; Cancel the current command
 8002a7e:	2100      	movs	r1, #0
 8002a80:	2001      	movs	r0, #1
 8002a82:	f7ff ff05 	bl	8002890 <Write_MFRC522>

	// Writing data to the FIFO
    for (i=0; i<sendLen; i++)
 8002a86:	2300      	movs	r3, #0
 8002a88:	61bb      	str	r3, [r7, #24]
 8002a8a:	e00a      	b.n	8002aa2 <MFRC522_ToCard+0x82>
    {
		Write_MFRC522(FIFODataReg, sendData[i]);
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	4413      	add	r3, r2
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	4619      	mov	r1, r3
 8002a96:	2009      	movs	r0, #9
 8002a98:	f7ff fefa 	bl	8002890 <Write_MFRC522>
    for (i=0; i<sendLen; i++)
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	7bbb      	ldrb	r3, [r7, #14]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d3f0      	bcc.n	8002a8c <MFRC522_ToCard+0x6c>
	}

    // Execute the command
	Write_MFRC522(CommandReg, command);
 8002aaa:	7bfb      	ldrb	r3, [r7, #15]
 8002aac:	4619      	mov	r1, r3
 8002aae:	2001      	movs	r0, #1
 8002ab0:	f7ff feee 	bl	8002890 <Write_MFRC522>
    if (command == PCD_TRANSCEIVE)
 8002ab4:	7bfb      	ldrb	r3, [r7, #15]
 8002ab6:	2b0c      	cmp	r3, #12
 8002ab8:	d103      	bne.n	8002ac2 <MFRC522_ToCard+0xa2>
    {
		SetBitMask(BitFramingReg, 0x80);		// StartSend=1,transmission of data starts
 8002aba:	2180      	movs	r1, #128	@ 0x80
 8002abc:	200d      	movs	r0, #13
 8002abe:	f7ff ff35 	bl	800292c <SetBitMask>
	}

    // Waiting to receive data to complete
	i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8002ac2:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8002ac6:	61bb      	str	r3, [r7, #24]
    do
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = Read_MFRC522(CommIrqReg);
 8002ac8:	2004      	movs	r0, #4
 8002aca:	f7ff ff07 	bl	80028dc <Read_MFRC522>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	773b      	strb	r3, [r7, #28]
        i--;
 8002ad2:	69bb      	ldr	r3, [r7, #24]
 8002ad4:	3b01      	subs	r3, #1
 8002ad6:	61bb      	str	r3, [r7, #24]
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8002ad8:	69bb      	ldr	r3, [r7, #24]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <MFRC522_ToCard+0xd4>
 8002ade:	7f3b      	ldrb	r3, [r7, #28]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d105      	bne.n	8002af4 <MFRC522_ToCard+0xd4>
 8002ae8:	7f3a      	ldrb	r2, [r7, #28]
 8002aea:	7f7b      	ldrb	r3, [r7, #29]
 8002aec:	4013      	ands	r3, r2
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0e9      	beq.n	8002ac8 <MFRC522_ToCard+0xa8>

    ClearBitMask(BitFramingReg, 0x80);			//StartSend=0
 8002af4:	2180      	movs	r1, #128	@ 0x80
 8002af6:	200d      	movs	r0, #13
 8002af8:	f7ff ff33 	bl	8002962 <ClearBitMask>

    if (i != 0)
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d052      	beq.n	8002ba8 <MFRC522_ToCard+0x188>
    {
        if(!(Read_MFRC522(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
 8002b02:	2006      	movs	r0, #6
 8002b04:	f7ff feea 	bl	80028dc <Read_MFRC522>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	f003 031b 	and.w	r3, r3, #27
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d148      	bne.n	8002ba4 <MFRC522_ToCard+0x184>
        {
            status = MI_OK;
 8002b12:	2300      	movs	r3, #0
 8002b14:	77fb      	strb	r3, [r7, #31]
            if (n & irqEn & 0x01)
 8002b16:	7f3a      	ldrb	r2, [r7, #28]
 8002b18:	7fbb      	ldrb	r3, [r7, #30]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	b2db      	uxtb	r3, r3
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d001      	beq.n	8002b2a <MFRC522_ToCard+0x10a>
            {
				status = MI_NOTAGERR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	77fb      	strb	r3, [r7, #31]
			}

            if (command == PCD_TRANSCEIVE)
 8002b2a:	7bfb      	ldrb	r3, [r7, #15]
 8002b2c:	2b0c      	cmp	r3, #12
 8002b2e:	d13b      	bne.n	8002ba8 <MFRC522_ToCard+0x188>
            {
               	n = Read_MFRC522(FIFOLevelReg);
 8002b30:	200a      	movs	r0, #10
 8002b32:	f7ff fed3 	bl	80028dc <Read_MFRC522>
 8002b36:	4603      	mov	r3, r0
 8002b38:	773b      	strb	r3, [r7, #28]
              	lastBits = Read_MFRC522(ControlReg) & 0x07;
 8002b3a:	200c      	movs	r0, #12
 8002b3c:	f7ff fece 	bl	80028dc <Read_MFRC522>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f003 0307 	and.w	r3, r3, #7
 8002b46:	75fb      	strb	r3, [r7, #23]
                if (lastBits)
 8002b48:	7dfb      	ldrb	r3, [r7, #23]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d008      	beq.n	8002b60 <MFRC522_ToCard+0x140>
                {
					*backLen = (n-1)*8 + lastBits;
 8002b4e:	7f3b      	ldrb	r3, [r7, #28]
 8002b50:	3b01      	subs	r3, #1
 8002b52:	00da      	lsls	r2, r3, #3
 8002b54:	7dfb      	ldrb	r3, [r7, #23]
 8002b56:	4413      	add	r3, r2
 8002b58:	461a      	mov	r2, r3
 8002b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e004      	b.n	8002b6a <MFRC522_ToCard+0x14a>
				}
                else
                {
					*backLen = n*8;
 8002b60:	7f3b      	ldrb	r3, [r7, #28]
 8002b62:	00db      	lsls	r3, r3, #3
 8002b64:	461a      	mov	r2, r3
 8002b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b68:	601a      	str	r2, [r3, #0]
				}

                if (n == 0)
 8002b6a:	7f3b      	ldrb	r3, [r7, #28]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <MFRC522_ToCard+0x154>
                {
					n = 1;
 8002b70:	2301      	movs	r3, #1
 8002b72:	773b      	strb	r3, [r7, #28]
				}
                if (n > MAX_LEN)
 8002b74:	7f3b      	ldrb	r3, [r7, #28]
 8002b76:	2b10      	cmp	r3, #16
 8002b78:	d901      	bls.n	8002b7e <MFRC522_ToCard+0x15e>
                {
					n = MAX_LEN;
 8002b7a:	2310      	movs	r3, #16
 8002b7c:	773b      	strb	r3, [r7, #28]
				}

                // Reading the received data in FIFO
                for (i=0; i<n; i++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	e00a      	b.n	8002b9a <MFRC522_ToCard+0x17a>
                {
					backData[i] = Read_MFRC522(FIFODataReg);
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	18d4      	adds	r4, r2, r3
 8002b8a:	2009      	movs	r0, #9
 8002b8c:	f7ff fea6 	bl	80028dc <Read_MFRC522>
 8002b90:	4603      	mov	r3, r0
 8002b92:	7023      	strb	r3, [r4, #0]
                for (i=0; i<n; i++)
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	3301      	adds	r3, #1
 8002b98:	61bb      	str	r3, [r7, #24]
 8002b9a:	7f3b      	ldrb	r3, [r7, #28]
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d3f0      	bcc.n	8002b84 <MFRC522_ToCard+0x164>
 8002ba2:	e001      	b.n	8002ba8 <MFRC522_ToCard+0x188>
				}
            }
        }
        else
        {
			status = MI_ERR;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	77fb      	strb	r3, [r7, #31]
    }

    //SetBitMask(ControlReg,0x80);           //timer stops
    //Write_MFRC522(CommandReg, PCD_IDLE);

    return status;
 8002ba8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3724      	adds	r7, #36	@ 0x24
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd90      	pop	{r4, r7, pc}

08002bb2 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Request(uchar reqMode, uchar *TagType)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b086      	sub	sp, #24
 8002bb6:	af02      	add	r7, sp, #8
 8002bb8:	4603      	mov	r3, r0
 8002bba:	6039      	str	r1, [r7, #0]
 8002bbc:	71fb      	strb	r3, [r7, #7]
	uchar status;
	uint backBits;			 // The received data bits

	Write_MFRC522(BitFramingReg, 0x07);		//TxLastBists = BitFramingReg[2..0]
 8002bbe:	2107      	movs	r1, #7
 8002bc0:	200d      	movs	r0, #13
 8002bc2:	f7ff fe65 	bl	8002890 <Write_MFRC522>

	TagType[0] = reqMode;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	79fa      	ldrb	r2, [r7, #7]
 8002bca:	701a      	strb	r2, [r3, #0]
	status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8002bcc:	f107 0308 	add.w	r3, r7, #8
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	6839      	ldr	r1, [r7, #0]
 8002bd8:	200c      	movs	r0, #12
 8002bda:	f7ff ff21 	bl	8002a20 <MFRC522_ToCard>
 8002bde:	4603      	mov	r3, r0
 8002be0:	73fb      	strb	r3, [r7, #15]

	if ((status != MI_OK) || (backBits != 0x10))
 8002be2:	7bfb      	ldrb	r3, [r7, #15]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d102      	bne.n	8002bee <MFRC522_Request+0x3c>
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	2b10      	cmp	r3, #16
 8002bec:	d001      	beq.n	8002bf2 <MFRC522_Request+0x40>
	{
		status = MI_ERR;
 8002bee:	2302      	movs	r3, #2
 8002bf0:	73fb      	strb	r3, [r7, #15]
	}

	return status;
 8002bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uchar MFRC522_Anticoll(uchar *serNum)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	6078      	str	r0, [r7, #4]
    uchar status;
    uchar i;
	uchar serNumCheck=0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	737b      	strb	r3, [r7, #13]
    uint unLen;

	Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8002c08:	2100      	movs	r1, #0
 8002c0a:	200d      	movs	r0, #13
 8002c0c:	f7ff fe40 	bl	8002890 <Write_MFRC522>

    serNum[0] = PICC_ANTICOLL;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2293      	movs	r2, #147	@ 0x93
 8002c14:	701a      	strb	r2, [r3, #0]
    serNum[1] = 0x20;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	3301      	adds	r3, #1
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	701a      	strb	r2, [r3, #0]
    status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8002c1e:	f107 0308 	add.w	r3, r7, #8
 8002c22:	9300      	str	r3, [sp, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	6879      	ldr	r1, [r7, #4]
 8002c2a:	200c      	movs	r0, #12
 8002c2c:	f7ff fef8 	bl	8002a20 <MFRC522_ToCard>
 8002c30:	4603      	mov	r3, r0
 8002c32:	73fb      	strb	r3, [r7, #15]

    if (status == MI_OK)
 8002c34:	7bfb      	ldrb	r3, [r7, #15]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d118      	bne.n	8002c6c <MFRC522_Anticoll+0x70>
	{
    	 //Check card serial number
		for (i=0; i<4; i++)
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	73bb      	strb	r3, [r7, #14]
 8002c3e:	e009      	b.n	8002c54 <MFRC522_Anticoll+0x58>
		{
		 	serNumCheck ^= serNum[i];
 8002c40:	7bbb      	ldrb	r3, [r7, #14]
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	4413      	add	r3, r2
 8002c46:	781a      	ldrb	r2, [r3, #0]
 8002c48:	7b7b      	ldrb	r3, [r7, #13]
 8002c4a:	4053      	eors	r3, r2
 8002c4c:	737b      	strb	r3, [r7, #13]
		for (i=0; i<4; i++)
 8002c4e:	7bbb      	ldrb	r3, [r7, #14]
 8002c50:	3301      	adds	r3, #1
 8002c52:	73bb      	strb	r3, [r7, #14]
 8002c54:	7bbb      	ldrb	r3, [r7, #14]
 8002c56:	2b03      	cmp	r3, #3
 8002c58:	d9f2      	bls.n	8002c40 <MFRC522_Anticoll+0x44>
		}
		if (serNumCheck != serNum[i])
 8002c5a:	7bbb      	ldrb	r3, [r7, #14]
 8002c5c:	687a      	ldr	r2, [r7, #4]
 8002c5e:	4413      	add	r3, r2
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	7b7a      	ldrb	r2, [r7, #13]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	d001      	beq.n	8002c6c <MFRC522_Anticoll+0x70>
		{
			status = MI_ERR;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	73fb      	strb	r3, [r7, #15]
		}
    }

    return status;
 8002c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}
	...

08002c78 <SDRAM_IO_Init>:
#define RTR_COUNT   (1386 & ~(0x1FFF))      // ((64ms / 4096) * 90MHz) - 20

//*********************************************************//

void SDRAM_IO_Init(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af04      	add	r7, sp, #16
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIOCEN | RCC_AHB1ENR_GPIODEN | RCC_AHB1ENR_GPIOEEN | RCC_AHB1ENR_GPIOFEN | RCC_AHB1ENR_GPIOGEN;
 8002c7e:	4bbe      	ldr	r3, [pc, #760]	@ (8002f78 <SDRAM_IO_Init+0x300>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c82:	4abd      	ldr	r2, [pc, #756]	@ (8002f78 <SDRAM_IO_Init+0x300>)
 8002c84:	f043 037e 	orr.w	r3, r3, #126	@ 0x7e
 8002c88:	6313      	str	r3, [r2, #48]	@ 0x30

    Pin_Cfg(GPIOF,  0, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_A0
 8002c8a:	230c      	movs	r3, #12
 8002c8c:	9302      	str	r3, [sp, #8]
 8002c8e:	2300      	movs	r3, #0
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	2303      	movs	r3, #3
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	2300      	movs	r3, #0
 8002c98:	2202      	movs	r2, #2
 8002c9a:	2100      	movs	r1, #0
 8002c9c:	48b7      	ldr	r0, [pc, #732]	@ (8002f7c <SDRAM_IO_Init+0x304>)
 8002c9e:	f7fe f833 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOF,  1, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_A1
 8002ca2:	230c      	movs	r3, #12
 8002ca4:	9302      	str	r3, [sp, #8]
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	9301      	str	r3, [sp, #4]
 8002caa:	2303      	movs	r3, #3
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2300      	movs	r3, #0
 8002cb0:	2202      	movs	r2, #2
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	48b1      	ldr	r0, [pc, #708]	@ (8002f7c <SDRAM_IO_Init+0x304>)
 8002cb6:	f7fe f827 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOF,  2, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_A2
 8002cba:	230c      	movs	r3, #12
 8002cbc:	9302      	str	r3, [sp, #8]
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	2202      	movs	r2, #2
 8002cca:	2102      	movs	r1, #2
 8002ccc:	48ab      	ldr	r0, [pc, #684]	@ (8002f7c <SDRAM_IO_Init+0x304>)
 8002cce:	f7fe f81b 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOF,  3, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_A3
 8002cd2:	230c      	movs	r3, #12
 8002cd4:	9302      	str	r3, [sp, #8]
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	9301      	str	r3, [sp, #4]
 8002cda:	2303      	movs	r3, #3
 8002cdc:	9300      	str	r3, [sp, #0]
 8002cde:	2300      	movs	r3, #0
 8002ce0:	2202      	movs	r2, #2
 8002ce2:	2103      	movs	r1, #3
 8002ce4:	48a5      	ldr	r0, [pc, #660]	@ (8002f7c <SDRAM_IO_Init+0x304>)
 8002ce6:	f7fe f80f 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOF,  4, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_A4
 8002cea:	230c      	movs	r3, #12
 8002cec:	9302      	str	r3, [sp, #8]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	2303      	movs	r3, #3
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	2104      	movs	r1, #4
 8002cfc:	489f      	ldr	r0, [pc, #636]	@ (8002f7c <SDRAM_IO_Init+0x304>)
 8002cfe:	f7fe f803 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOF,  5, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_A5
 8002d02:	230c      	movs	r3, #12
 8002d04:	9302      	str	r3, [sp, #8]
 8002d06:	2300      	movs	r3, #0
 8002d08:	9301      	str	r3, [sp, #4]
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	9300      	str	r3, [sp, #0]
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2202      	movs	r2, #2
 8002d12:	2105      	movs	r1, #5
 8002d14:	4899      	ldr	r0, [pc, #612]	@ (8002f7c <SDRAM_IO_Init+0x304>)
 8002d16:	f7fd fff7 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOF, 12, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_A6
 8002d1a:	230c      	movs	r3, #12
 8002d1c:	9302      	str	r3, [sp, #8]
 8002d1e:	2300      	movs	r3, #0
 8002d20:	9301      	str	r3, [sp, #4]
 8002d22:	2303      	movs	r3, #3
 8002d24:	9300      	str	r3, [sp, #0]
 8002d26:	2300      	movs	r3, #0
 8002d28:	2202      	movs	r2, #2
 8002d2a:	210c      	movs	r1, #12
 8002d2c:	4893      	ldr	r0, [pc, #588]	@ (8002f7c <SDRAM_IO_Init+0x304>)
 8002d2e:	f7fd ffeb 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOF, 13, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_A7
 8002d32:	230c      	movs	r3, #12
 8002d34:	9302      	str	r3, [sp, #8]
 8002d36:	2300      	movs	r3, #0
 8002d38:	9301      	str	r3, [sp, #4]
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	2202      	movs	r2, #2
 8002d42:	210d      	movs	r1, #13
 8002d44:	488d      	ldr	r0, [pc, #564]	@ (8002f7c <SDRAM_IO_Init+0x304>)
 8002d46:	f7fd ffdf 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOF, 14, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_A8
 8002d4a:	230c      	movs	r3, #12
 8002d4c:	9302      	str	r3, [sp, #8]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	9301      	str	r3, [sp, #4]
 8002d52:	2303      	movs	r3, #3
 8002d54:	9300      	str	r3, [sp, #0]
 8002d56:	2300      	movs	r3, #0
 8002d58:	2202      	movs	r2, #2
 8002d5a:	210e      	movs	r1, #14
 8002d5c:	4887      	ldr	r0, [pc, #540]	@ (8002f7c <SDRAM_IO_Init+0x304>)
 8002d5e:	f7fd ffd3 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOF, 15, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_A9
 8002d62:	230c      	movs	r3, #12
 8002d64:	9302      	str	r3, [sp, #8]
 8002d66:	2300      	movs	r3, #0
 8002d68:	9301      	str	r3, [sp, #4]
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	9300      	str	r3, [sp, #0]
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2202      	movs	r2, #2
 8002d72:	210f      	movs	r1, #15
 8002d74:	4881      	ldr	r0, [pc, #516]	@ (8002f7c <SDRAM_IO_Init+0x304>)
 8002d76:	f7fd ffc7 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOG,  0, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_A10
 8002d7a:	230c      	movs	r3, #12
 8002d7c:	9302      	str	r3, [sp, #8]
 8002d7e:	2300      	movs	r3, #0
 8002d80:	9301      	str	r3, [sp, #4]
 8002d82:	2303      	movs	r3, #3
 8002d84:	9300      	str	r3, [sp, #0]
 8002d86:	2300      	movs	r3, #0
 8002d88:	2202      	movs	r2, #2
 8002d8a:	2100      	movs	r1, #0
 8002d8c:	487c      	ldr	r0, [pc, #496]	@ (8002f80 <SDRAM_IO_Init+0x308>)
 8002d8e:	f7fd ffbb 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOG,  1, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_A11
 8002d92:	230c      	movs	r3, #12
 8002d94:	9302      	str	r3, [sp, #8]
 8002d96:	2300      	movs	r3, #0
 8002d98:	9301      	str	r3, [sp, #4]
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2202      	movs	r2, #2
 8002da2:	2101      	movs	r1, #1
 8002da4:	4876      	ldr	r0, [pc, #472]	@ (8002f80 <SDRAM_IO_Init+0x308>)
 8002da6:	f7fd ffaf 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOD, 14, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_D0
 8002daa:	230c      	movs	r3, #12
 8002dac:	9302      	str	r3, [sp, #8]
 8002dae:	2300      	movs	r3, #0
 8002db0:	9301      	str	r3, [sp, #4]
 8002db2:	2303      	movs	r3, #3
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	2300      	movs	r3, #0
 8002db8:	2202      	movs	r2, #2
 8002dba:	210e      	movs	r1, #14
 8002dbc:	4871      	ldr	r0, [pc, #452]	@ (8002f84 <SDRAM_IO_Init+0x30c>)
 8002dbe:	f7fd ffa3 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOD, 15, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_D1
 8002dc2:	230c      	movs	r3, #12
 8002dc4:	9302      	str	r3, [sp, #8]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	2303      	movs	r3, #3
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2202      	movs	r2, #2
 8002dd2:	210f      	movs	r1, #15
 8002dd4:	486b      	ldr	r0, [pc, #428]	@ (8002f84 <SDRAM_IO_Init+0x30c>)
 8002dd6:	f7fd ff97 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOD,  0, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_D2
 8002dda:	230c      	movs	r3, #12
 8002ddc:	9302      	str	r3, [sp, #8]
 8002dde:	2300      	movs	r3, #0
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	2303      	movs	r3, #3
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	2300      	movs	r3, #0
 8002de8:	2202      	movs	r2, #2
 8002dea:	2100      	movs	r1, #0
 8002dec:	4865      	ldr	r0, [pc, #404]	@ (8002f84 <SDRAM_IO_Init+0x30c>)
 8002dee:	f7fd ff8b 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOD,  1, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_D3
 8002df2:	230c      	movs	r3, #12
 8002df4:	9302      	str	r3, [sp, #8]
 8002df6:	2300      	movs	r3, #0
 8002df8:	9301      	str	r3, [sp, #4]
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	9300      	str	r3, [sp, #0]
 8002dfe:	2300      	movs	r3, #0
 8002e00:	2202      	movs	r2, #2
 8002e02:	2101      	movs	r1, #1
 8002e04:	485f      	ldr	r0, [pc, #380]	@ (8002f84 <SDRAM_IO_Init+0x30c>)
 8002e06:	f7fd ff7f 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOE,  7, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_D4
 8002e0a:	230c      	movs	r3, #12
 8002e0c:	9302      	str	r3, [sp, #8]
 8002e0e:	2300      	movs	r3, #0
 8002e10:	9301      	str	r3, [sp, #4]
 8002e12:	2303      	movs	r3, #3
 8002e14:	9300      	str	r3, [sp, #0]
 8002e16:	2300      	movs	r3, #0
 8002e18:	2202      	movs	r2, #2
 8002e1a:	2107      	movs	r1, #7
 8002e1c:	485a      	ldr	r0, [pc, #360]	@ (8002f88 <SDRAM_IO_Init+0x310>)
 8002e1e:	f7fd ff73 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOE,  8, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_D5
 8002e22:	230c      	movs	r3, #12
 8002e24:	9302      	str	r3, [sp, #8]
 8002e26:	2300      	movs	r3, #0
 8002e28:	9301      	str	r3, [sp, #4]
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	9300      	str	r3, [sp, #0]
 8002e2e:	2300      	movs	r3, #0
 8002e30:	2202      	movs	r2, #2
 8002e32:	2108      	movs	r1, #8
 8002e34:	4854      	ldr	r0, [pc, #336]	@ (8002f88 <SDRAM_IO_Init+0x310>)
 8002e36:	f7fd ff67 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOE,  9, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_D6
 8002e3a:	230c      	movs	r3, #12
 8002e3c:	9302      	str	r3, [sp, #8]
 8002e3e:	2300      	movs	r3, #0
 8002e40:	9301      	str	r3, [sp, #4]
 8002e42:	2303      	movs	r3, #3
 8002e44:	9300      	str	r3, [sp, #0]
 8002e46:	2300      	movs	r3, #0
 8002e48:	2202      	movs	r2, #2
 8002e4a:	2109      	movs	r1, #9
 8002e4c:	484e      	ldr	r0, [pc, #312]	@ (8002f88 <SDRAM_IO_Init+0x310>)
 8002e4e:	f7fd ff5b 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOE, 10, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_D7
 8002e52:	230c      	movs	r3, #12
 8002e54:	9302      	str	r3, [sp, #8]
 8002e56:	2300      	movs	r3, #0
 8002e58:	9301      	str	r3, [sp, #4]
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	9300      	str	r3, [sp, #0]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	2202      	movs	r2, #2
 8002e62:	210a      	movs	r1, #10
 8002e64:	4848      	ldr	r0, [pc, #288]	@ (8002f88 <SDRAM_IO_Init+0x310>)
 8002e66:	f7fd ff4f 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOE, 11, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_D8
 8002e6a:	230c      	movs	r3, #12
 8002e6c:	9302      	str	r3, [sp, #8]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	9301      	str	r3, [sp, #4]
 8002e72:	2303      	movs	r3, #3
 8002e74:	9300      	str	r3, [sp, #0]
 8002e76:	2300      	movs	r3, #0
 8002e78:	2202      	movs	r2, #2
 8002e7a:	210b      	movs	r1, #11
 8002e7c:	4842      	ldr	r0, [pc, #264]	@ (8002f88 <SDRAM_IO_Init+0x310>)
 8002e7e:	f7fd ff43 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOE, 12, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_D9
 8002e82:	230c      	movs	r3, #12
 8002e84:	9302      	str	r3, [sp, #8]
 8002e86:	2300      	movs	r3, #0
 8002e88:	9301      	str	r3, [sp, #4]
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	2202      	movs	r2, #2
 8002e92:	210c      	movs	r1, #12
 8002e94:	483c      	ldr	r0, [pc, #240]	@ (8002f88 <SDRAM_IO_Init+0x310>)
 8002e96:	f7fd ff37 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOE, 13, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_D10
 8002e9a:	230c      	movs	r3, #12
 8002e9c:	9302      	str	r3, [sp, #8]
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	2202      	movs	r2, #2
 8002eaa:	210d      	movs	r1, #13
 8002eac:	4836      	ldr	r0, [pc, #216]	@ (8002f88 <SDRAM_IO_Init+0x310>)
 8002eae:	f7fd ff2b 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOE, 14, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_D11
 8002eb2:	230c      	movs	r3, #12
 8002eb4:	9302      	str	r3, [sp, #8]
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	2303      	movs	r3, #3
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	2202      	movs	r2, #2
 8002ec2:	210e      	movs	r1, #14
 8002ec4:	4830      	ldr	r0, [pc, #192]	@ (8002f88 <SDRAM_IO_Init+0x310>)
 8002ec6:	f7fd ff1f 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOE, 15, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_D12
 8002eca:	230c      	movs	r3, #12
 8002ecc:	9302      	str	r3, [sp, #8]
 8002ece:	2300      	movs	r3, #0
 8002ed0:	9301      	str	r3, [sp, #4]
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	2202      	movs	r2, #2
 8002eda:	210f      	movs	r1, #15
 8002edc:	482a      	ldr	r0, [pc, #168]	@ (8002f88 <SDRAM_IO_Init+0x310>)
 8002ede:	f7fd ff13 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOD,  8, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_D13
 8002ee2:	230c      	movs	r3, #12
 8002ee4:	9302      	str	r3, [sp, #8]
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	9301      	str	r3, [sp, #4]
 8002eea:	2303      	movs	r3, #3
 8002eec:	9300      	str	r3, [sp, #0]
 8002eee:	2300      	movs	r3, #0
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	2108      	movs	r1, #8
 8002ef4:	4823      	ldr	r0, [pc, #140]	@ (8002f84 <SDRAM_IO_Init+0x30c>)
 8002ef6:	f7fd ff07 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOD,  9, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_D14
 8002efa:	230c      	movs	r3, #12
 8002efc:	9302      	str	r3, [sp, #8]
 8002efe:	2300      	movs	r3, #0
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	2303      	movs	r3, #3
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2300      	movs	r3, #0
 8002f08:	2202      	movs	r2, #2
 8002f0a:	2109      	movs	r1, #9
 8002f0c:	481d      	ldr	r0, [pc, #116]	@ (8002f84 <SDRAM_IO_Init+0x30c>)
 8002f0e:	f7fd fefb 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOD, 10, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_D15
 8002f12:	230c      	movs	r3, #12
 8002f14:	9302      	str	r3, [sp, #8]
 8002f16:	2300      	movs	r3, #0
 8002f18:	9301      	str	r3, [sp, #4]
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	9300      	str	r3, [sp, #0]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	2202      	movs	r2, #2
 8002f22:	210a      	movs	r1, #10
 8002f24:	4817      	ldr	r0, [pc, #92]	@ (8002f84 <SDRAM_IO_Init+0x30c>)
 8002f26:	f7fd feef 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOB,  5, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_SDCKE1
 8002f2a:	230c      	movs	r3, #12
 8002f2c:	9302      	str	r3, [sp, #8]
 8002f2e:	2300      	movs	r3, #0
 8002f30:	9301      	str	r3, [sp, #4]
 8002f32:	2303      	movs	r3, #3
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	2300      	movs	r3, #0
 8002f38:	2202      	movs	r2, #2
 8002f3a:	2105      	movs	r1, #5
 8002f3c:	4813      	ldr	r0, [pc, #76]	@ (8002f8c <SDRAM_IO_Init+0x314>)
 8002f3e:	f7fd fee3 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOB,  6, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_SDNE1
 8002f42:	230c      	movs	r3, #12
 8002f44:	9302      	str	r3, [sp, #8]
 8002f46:	2300      	movs	r3, #0
 8002f48:	9301      	str	r3, [sp, #4]
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	9300      	str	r3, [sp, #0]
 8002f4e:	2300      	movs	r3, #0
 8002f50:	2202      	movs	r2, #2
 8002f52:	2106      	movs	r1, #6
 8002f54:	480d      	ldr	r0, [pc, #52]	@ (8002f8c <SDRAM_IO_Init+0x314>)
 8002f56:	f7fd fed7 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOC,  0, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_SDNWE
 8002f5a:	230c      	movs	r3, #12
 8002f5c:	9302      	str	r3, [sp, #8]
 8002f5e:	2300      	movs	r3, #0
 8002f60:	9301      	str	r3, [sp, #4]
 8002f62:	2303      	movs	r3, #3
 8002f64:	9300      	str	r3, [sp, #0]
 8002f66:	2300      	movs	r3, #0
 8002f68:	2202      	movs	r2, #2
 8002f6a:	2100      	movs	r1, #0
 8002f6c:	4808      	ldr	r0, [pc, #32]	@ (8002f90 <SDRAM_IO_Init+0x318>)
 8002f6e:	f7fd fecb 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOE,  0, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_NBL0
 8002f72:	230c      	movs	r3, #12
 8002f74:	e00e      	b.n	8002f94 <SDRAM_IO_Init+0x31c>
 8002f76:	bf00      	nop
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40021400 	.word	0x40021400
 8002f80:	40021800 	.word	0x40021800
 8002f84:	40020c00 	.word	0x40020c00
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	40020400 	.word	0x40020400
 8002f90:	40020800 	.word	0x40020800
 8002f94:	9302      	str	r3, [sp, #8]
 8002f96:	2300      	movs	r3, #0
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	2303      	movs	r3, #3
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	2100      	movs	r1, #0
 8002fa4:	4826      	ldr	r0, [pc, #152]	@ (8003040 <SDRAM_IO_Init+0x3c8>)
 8002fa6:	f7fd feaf 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOE,  1, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_NBL1
 8002faa:	230c      	movs	r3, #12
 8002fac:	9302      	str	r3, [sp, #8]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	2303      	movs	r3, #3
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	2202      	movs	r2, #2
 8002fba:	2101      	movs	r1, #1
 8002fbc:	4820      	ldr	r0, [pc, #128]	@ (8003040 <SDRAM_IO_Init+0x3c8>)
 8002fbe:	f7fd fea3 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOF, 11, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_SDNRAS
 8002fc2:	230c      	movs	r3, #12
 8002fc4:	9302      	str	r3, [sp, #8]
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	9301      	str	r3, [sp, #4]
 8002fca:	2303      	movs	r3, #3
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	2202      	movs	r2, #2
 8002fd2:	210b      	movs	r1, #11
 8002fd4:	481b      	ldr	r0, [pc, #108]	@ (8003044 <SDRAM_IO_Init+0x3cc>)
 8002fd6:	f7fd fe97 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOG,  4, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_BA0
 8002fda:	230c      	movs	r3, #12
 8002fdc:	9302      	str	r3, [sp, #8]
 8002fde:	2300      	movs	r3, #0
 8002fe0:	9301      	str	r3, [sp, #4]
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	2202      	movs	r2, #2
 8002fea:	2104      	movs	r1, #4
 8002fec:	4816      	ldr	r0, [pc, #88]	@ (8003048 <SDRAM_IO_Init+0x3d0>)
 8002fee:	f7fd fe8b 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOG,  5, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_BA1
 8002ff2:	230c      	movs	r3, #12
 8002ff4:	9302      	str	r3, [sp, #8]
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	9301      	str	r3, [sp, #4]
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	9300      	str	r3, [sp, #0]
 8002ffe:	2300      	movs	r3, #0
 8003000:	2202      	movs	r2, #2
 8003002:	2105      	movs	r1, #5
 8003004:	4810      	ldr	r0, [pc, #64]	@ (8003048 <SDRAM_IO_Init+0x3d0>)
 8003006:	f7fd fe7f 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOG,  8, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_SDCLK
 800300a:	230c      	movs	r3, #12
 800300c:	9302      	str	r3, [sp, #8]
 800300e:	2300      	movs	r3, #0
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	2303      	movs	r3, #3
 8003014:	9300      	str	r3, [sp, #0]
 8003016:	2300      	movs	r3, #0
 8003018:	2202      	movs	r2, #2
 800301a:	2108      	movs	r1, #8
 800301c:	480a      	ldr	r0, [pc, #40]	@ (8003048 <SDRAM_IO_Init+0x3d0>)
 800301e:	f7fd fe73 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOG, 15, MODER_AF, OTYPER_PP, OSPEEDR_VERY_HIGH, PUPDR_PULL_NONE, AF_12);    // SDRAM_SDNCAS
 8003022:	230c      	movs	r3, #12
 8003024:	9302      	str	r3, [sp, #8]
 8003026:	2300      	movs	r3, #0
 8003028:	9301      	str	r3, [sp, #4]
 800302a:	2303      	movs	r3, #3
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	2300      	movs	r3, #0
 8003030:	2202      	movs	r2, #2
 8003032:	210f      	movs	r1, #15
 8003034:	4804      	ldr	r0, [pc, #16]	@ (8003048 <SDRAM_IO_Init+0x3d0>)
 8003036:	f7fd fe67 	bl	8000d08 <Pin_Cfg>
}
 800303a:	bf00      	nop
 800303c:	46bd      	mov	sp, r7
 800303e:	bd80      	pop	{r7, pc}
 8003040:	40021000 	.word	0x40021000
 8003044:	40021400 	.word	0x40021400
 8003048:	40021800 	.word	0x40021800

0800304c <SDRAM_Init>:

void SDRAM_Init(void)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
	RCC->AHB3ENR |= RCC_AHB3ENR_FMCEN;	
 8003052:	4b32      	ldr	r3, [pc, #200]	@ (800311c <SDRAM_Init+0xd0>)
 8003054:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003056:	4a31      	ldr	r2, [pc, #196]	@ (800311c <SDRAM_Init+0xd0>)
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	6393      	str	r3, [r2, #56]	@ 0x38
	// SDRAM features
    FMC_Bank5_6->SDCR[0] = FMC_SDCR1_RPIPE_1 | FMC_SDCR1_RBURST | FMC_SDCR1_SDCLK_1;
 800305e:	4b30      	ldr	r3, [pc, #192]	@ (8003120 <SDRAM_Init+0xd4>)
 8003060:	f44f 42b0 	mov.w	r2, #22528	@ 0x5800
 8003064:	601a      	str	r2, [r3, #0]
	FMC_Bank5_6->SDCR[1] = FMC_SDCR1_CAS | FMC_SDCR1_NB | FMC_SDCR1_MWID_0 | FMC_SDCR1_NR_0;
 8003066:	4b2e      	ldr	r3, [pc, #184]	@ (8003120 <SDRAM_Init+0xd4>)
 8003068:	f44f 72ea 	mov.w	r2, #468	@ 0x1d4
 800306c:	605a      	str	r2, [r3, #4]
	// Set timings
    FMC_Bank5_6->SDTR[0] = (TRP << FMC_SDTR1_TRP_Pos) | (TRC << FMC_SDTR1_TRC_Pos);
 800306e:	4b2c      	ldr	r3, [pc, #176]	@ (8003120 <SDRAM_Init+0xd4>)
 8003070:	4a2c      	ldr	r2, [pc, #176]	@ (8003124 <SDRAM_Init+0xd8>)
 8003072:	609a      	str	r2, [r3, #8]
    FMC_Bank5_6->SDTR[1] = (TRCD << FMC_SDTR2_TRCD_Pos) | (TWR << FMC_SDTR2_TWR_Pos) | (TRAS << FMC_SDTR2_TRAS_Pos) | (TXSR << FMC_SDTR2_TXSR_Pos) | (TMRD << FMC_SDTR2_TMRD_Pos);
 8003074:	4b2a      	ldr	r3, [pc, #168]	@ (8003120 <SDRAM_Init+0xd4>)
 8003076:	4a2c      	ldr	r2, [pc, #176]	@ (8003128 <SDRAM_Init+0xdc>)
 8003078:	60da      	str	r2, [r3, #12]
    // Clock Configuration Enable
	while(FMC_Bank5_6->SDSR & FMC_SDSR_BUSY){};
 800307a:	bf00      	nop
 800307c:	4b28      	ldr	r3, [pc, #160]	@ (8003120 <SDRAM_Init+0xd4>)
 800307e:	699b      	ldr	r3, [r3, #24]
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1f9      	bne.n	800307c <SDRAM_Init+0x30>
    FMC_Bank5_6->SDCMR = FMC_SDCMR_CTB2 | FMC_SDCMR_MODE_0;
 8003088:	4b25      	ldr	r3, [pc, #148]	@ (8003120 <SDRAM_Init+0xd4>)
 800308a:	2209      	movs	r2, #9
 800308c:	611a      	str	r2, [r3, #16]

	// Wait 
	//delay_ms(1);
    HAL_Delay(1);
 800308e:	2001      	movs	r0, #1
 8003090:	f000 fafa 	bl	8003688 <HAL_Delay>

    // PALL (“All Bank Precharge”) command
	while(FMC_Bank5_6->SDSR & FMC_SDSR_BUSY){};
 8003094:	bf00      	nop
 8003096:	4b22      	ldr	r3, [pc, #136]	@ (8003120 <SDRAM_Init+0xd4>)
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	f003 0320 	and.w	r3, r3, #32
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1f9      	bne.n	8003096 <SDRAM_Init+0x4a>
	FMC_Bank5_6->SDCMR = FMC_SDCMR_CTB2 | FMC_SDCMR_MODE_1;
 80030a2:	4b1f      	ldr	r3, [pc, #124]	@ (8003120 <SDRAM_Init+0xd4>)
 80030a4:	220a      	movs	r2, #10
 80030a6:	611a      	str	r2, [r3, #16]
	// Auto-refresh command
	while(FMC_Bank5_6->SDSR & FMC_SDSR_BUSY){};
 80030a8:	bf00      	nop
 80030aa:	4b1d      	ldr	r3, [pc, #116]	@ (8003120 <SDRAM_Init+0xd4>)
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	f003 0320 	and.w	r3, r3, #32
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f9      	bne.n	80030aa <SDRAM_Init+0x5e>
	FMC_Bank5_6->SDCMR = FMC_SDCMR_CTB2 | ((CMR_NRFS-1) << FMC_SDCMR_NRFS_Pos) | FMC_SDCMR_MODE_1 | FMC_SDCMR_MODE_0;	
 80030b6:	4b1a      	ldr	r3, [pc, #104]	@ (8003120 <SDRAM_Init+0xd4>)
 80030b8:	222b      	movs	r2, #43	@ 0x2b
 80030ba:	611a      	str	r2, [r3, #16]
	// Load Mode Register
	while(FMC_Bank5_6->SDSR & FMC_SDSR_BUSY){};
 80030bc:	bf00      	nop
 80030be:	4b18      	ldr	r3, [pc, #96]	@ (8003120 <SDRAM_Init+0xd4>)
 80030c0:	699b      	ldr	r3, [r3, #24]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d1f9      	bne.n	80030be <SDRAM_Init+0x72>
	FMC_Bank5_6->SDCMR = (MRD_VAL << FMC_SDCMR_MRD_Pos) | FMC_SDCMR_CTB2 | FMC_SDCMR_MODE_2;
 80030ca:	4b15      	ldr	r3, [pc, #84]	@ (8003120 <SDRAM_Init+0xd4>)
 80030cc:	4a17      	ldr	r2, [pc, #92]	@ (800312c <SDRAM_Init+0xe0>)
 80030ce:	611a      	str	r2, [r3, #16]
	// Refresh Rate
	while(FMC_Bank5_6->SDSR & FMC_SDSR_BUSY){};
 80030d0:	bf00      	nop
 80030d2:	4b13      	ldr	r3, [pc, #76]	@ (8003120 <SDRAM_Init+0xd4>)
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1f9      	bne.n	80030d2 <SDRAM_Init+0x86>
	FMC_Bank5_6->SDRTR = (RTR_COUNT << FMC_SDRTR_COUNT_Pos);
 80030de:	4b10      	ldr	r3, [pc, #64]	@ (8003120 <SDRAM_Init+0xd4>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	615a      	str	r2, [r3, #20]
    while(FMC_Bank5_6->SDSR & FMC_SDSR_BUSY){};
 80030e4:	bf00      	nop
 80030e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003120 <SDRAM_Init+0xd4>)
 80030e8:	699b      	ldr	r3, [r3, #24]
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1f9      	bne.n	80030e6 <SDRAM_Init+0x9a>
	// Clear SDRAM
    for(uint32_t ptr = SDRAM_BASE; ptr < (SDRAM_BASE + SDRAM_SIZE); ptr += 4)
 80030f2:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80030f6:	607b      	str	r3, [r7, #4]
 80030f8:	e006      	b.n	8003108 <SDRAM_Init+0xbc>
	{
        *((uint32_t *)ptr) = 0xFFFFFFFF;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003100:	601a      	str	r2, [r3, #0]
    for(uint32_t ptr = SDRAM_BASE; ptr < (SDRAM_BASE + SDRAM_SIZE); ptr += 4)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3304      	adds	r3, #4
 8003106:	607b      	str	r3, [r7, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f113 5f3e 	cmn.w	r3, #796917760	@ 0x2f800000
 800310e:	d3f4      	bcc.n	80030fa <SDRAM_Init+0xae>
	}
}
 8003110:	bf00      	nop
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	40023800 	.word	0x40023800
 8003120:	a0000140 	.word	0xa0000140
 8003124:	00207000 	.word	0x00207000
 8003128:	02020472 	.word	0x02020472
 800312c:	0004620c 	.word	0x0004620c

08003130 <MX_SPI4_Init>:

SPI_HandleTypeDef hspi4;

/* SPI4 init function */
void MX_SPI4_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 8003134:	4b17      	ldr	r3, [pc, #92]	@ (8003194 <MX_SPI4_Init+0x64>)
 8003136:	4a18      	ldr	r2, [pc, #96]	@ (8003198 <MX_SPI4_Init+0x68>)
 8003138:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_MASTER;
 800313a:	4b16      	ldr	r3, [pc, #88]	@ (8003194 <MX_SPI4_Init+0x64>)
 800313c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003140:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8003142:	4b14      	ldr	r3, [pc, #80]	@ (8003194 <MX_SPI4_Init+0x64>)
 8003144:	2200      	movs	r2, #0
 8003146:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_8BIT;
 8003148:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <MX_SPI4_Init+0x64>)
 800314a:	2200      	movs	r2, #0
 800314c:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 800314e:	4b11      	ldr	r3, [pc, #68]	@ (8003194 <MX_SPI4_Init+0x64>)
 8003150:	2200      	movs	r2, #0
 8003152:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003154:	4b0f      	ldr	r3, [pc, #60]	@ (8003194 <MX_SPI4_Init+0x64>)
 8003156:	2200      	movs	r2, #0
 8003158:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 800315a:	4b0e      	ldr	r3, [pc, #56]	@ (8003194 <MX_SPI4_Init+0x64>)
 800315c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003160:	619a      	str	r2, [r3, #24]
  hspi4.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003162:	4b0c      	ldr	r3, [pc, #48]	@ (8003194 <MX_SPI4_Init+0x64>)
 8003164:	2200      	movs	r2, #0
 8003166:	61da      	str	r2, [r3, #28]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003168:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <MX_SPI4_Init+0x64>)
 800316a:	2200      	movs	r2, #0
 800316c:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 800316e:	4b09      	ldr	r3, [pc, #36]	@ (8003194 <MX_SPI4_Init+0x64>)
 8003170:	2200      	movs	r2, #0
 8003172:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003174:	4b07      	ldr	r3, [pc, #28]	@ (8003194 <MX_SPI4_Init+0x64>)
 8003176:	2200      	movs	r2, #0
 8003178:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi4.Init.CRCPolynomial = 10;
 800317a:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <MX_SPI4_Init+0x64>)
 800317c:	220a      	movs	r2, #10
 800317e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 8003180:	4804      	ldr	r0, [pc, #16]	@ (8003194 <MX_SPI4_Init+0x64>)
 8003182:	f002 fda9 	bl	8005cd8 <HAL_SPI_Init>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <MX_SPI4_Init+0x60>
  {
    Error_Handler();
 800318c:	f7ff fb64 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}
 8003194:	200001dc 	.word	0x200001dc
 8003198:	40013400 	.word	0x40013400

0800319c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	b08a      	sub	sp, #40	@ 0x28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031a4:	f107 0314 	add.w	r3, r7, #20
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	609a      	str	r2, [r3, #8]
 80031b0:	60da      	str	r2, [r3, #12]
 80031b2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI4)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a19      	ldr	r2, [pc, #100]	@ (8003220 <HAL_SPI_MspInit+0x84>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d12b      	bne.n	8003216 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI4_MspInit 0 */

  /* USER CODE END SPI4_MspInit 0 */
    /* SPI4 clock enable */
    __HAL_RCC_SPI4_CLK_ENABLE();
 80031be:	2300      	movs	r3, #0
 80031c0:	613b      	str	r3, [r7, #16]
 80031c2:	4b18      	ldr	r3, [pc, #96]	@ (8003224 <HAL_SPI_MspInit+0x88>)
 80031c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031c6:	4a17      	ldr	r2, [pc, #92]	@ (8003224 <HAL_SPI_MspInit+0x88>)
 80031c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80031cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80031ce:	4b15      	ldr	r3, [pc, #84]	@ (8003224 <HAL_SPI_MspInit+0x88>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031d2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80031d6:	613b      	str	r3, [r7, #16]
 80031d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80031da:	2300      	movs	r3, #0
 80031dc:	60fb      	str	r3, [r7, #12]
 80031de:	4b11      	ldr	r3, [pc, #68]	@ (8003224 <HAL_SPI_MspInit+0x88>)
 80031e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e2:	4a10      	ldr	r2, [pc, #64]	@ (8003224 <HAL_SPI_MspInit+0x88>)
 80031e4:	f043 0310 	orr.w	r3, r3, #16
 80031e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80031ea:	4b0e      	ldr	r3, [pc, #56]	@ (8003224 <HAL_SPI_MspInit+0x88>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ee:	f003 0310 	and.w	r3, r3, #16
 80031f2:	60fb      	str	r3, [r7, #12]
 80031f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI4 GPIO Configuration
    PE2     ------> SPI4_SCK
    PE5     ------> SPI4_MISO
    PE6     ------> SPI4_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 80031f6:	2364      	movs	r3, #100	@ 0x64
 80031f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031fa:	2302      	movs	r3, #2
 80031fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031fe:	2300      	movs	r3, #0
 8003200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003202:	2303      	movs	r3, #3
 8003204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8003206:	2305      	movs	r3, #5
 8003208:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800320a:	f107 0314 	add.w	r3, r7, #20
 800320e:	4619      	mov	r1, r3
 8003210:	4805      	ldr	r0, [pc, #20]	@ (8003228 <HAL_SPI_MspInit+0x8c>)
 8003212:	f000 fe75 	bl	8003f00 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI4_MspInit 1 */

  /* USER CODE END SPI4_MspInit 1 */
  }
}
 8003216:	bf00      	nop
 8003218:	3728      	adds	r7, #40	@ 0x28
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	40013400 	.word	0x40013400
 8003224:	40023800 	.word	0x40023800
 8003228:	40021000 	.word	0x40021000

0800322c <SPI5_IO_Init>:
#include "stm32f4xx.h"
#include "spi_cfg.h"
#include "gpio_cfg.h"

__inline void SPI5_IO_Init(void)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b084      	sub	sp, #16
 8003230:	af04      	add	r7, sp, #16
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOFEN;
 8003232:	4b10      	ldr	r3, [pc, #64]	@ (8003274 <SPI5_IO_Init+0x48>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003236:	4a0f      	ldr	r2, [pc, #60]	@ (8003274 <SPI5_IO_Init+0x48>)
 8003238:	f043 0320 	orr.w	r3, r3, #32
 800323c:	6313      	str	r3, [r2, #48]	@ 0x30
    
    Pin_Cfg(GPIOF, 7, MODER_AF, OTYPER_PP, OSPEEDR_HIGH, PUPDR_PULL_NONE, AF_5);    // SPI5_SCK
 800323e:	2305      	movs	r3, #5
 8003240:	9302      	str	r3, [sp, #8]
 8003242:	2300      	movs	r3, #0
 8003244:	9301      	str	r3, [sp, #4]
 8003246:	2302      	movs	r3, #2
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	2300      	movs	r3, #0
 800324c:	2202      	movs	r2, #2
 800324e:	2107      	movs	r1, #7
 8003250:	4809      	ldr	r0, [pc, #36]	@ (8003278 <SPI5_IO_Init+0x4c>)
 8003252:	f7fd fd59 	bl	8000d08 <Pin_Cfg>
    Pin_Cfg(GPIOF, 9, MODER_AF, OTYPER_PP, OSPEEDR_HIGH, PUPDR_PULL_NONE, AF_5);    // SPI5_MISO
 8003256:	2305      	movs	r3, #5
 8003258:	9302      	str	r3, [sp, #8]
 800325a:	2300      	movs	r3, #0
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	2302      	movs	r3, #2
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2300      	movs	r3, #0
 8003264:	2202      	movs	r2, #2
 8003266:	2109      	movs	r1, #9
 8003268:	4803      	ldr	r0, [pc, #12]	@ (8003278 <SPI5_IO_Init+0x4c>)
 800326a:	f7fd fd4d 	bl	8000d08 <Pin_Cfg>
}
 800326e:	bf00      	nop
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}
 8003274:	40023800 	.word	0x40023800
 8003278:	40021400 	.word	0x40021400

0800327c <SPI5_Core_Init>:

__inline void SPI5_Core_Init(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
    RCC->APB2ENR |= RCC_APB2ENR_SPI5EN;
 8003280:	4b0a      	ldr	r3, [pc, #40]	@ (80032ac <SPI5_Core_Init+0x30>)
 8003282:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003284:	4a09      	ldr	r2, [pc, #36]	@ (80032ac <SPI5_Core_Init+0x30>)
 8003286:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800328a:	6453      	str	r3, [r2, #68]	@ 0x44
    SPI5->CR1 = SPI_CR1_BIDIMODE | SPI_CR1_BIDIOE | SPI_CR1_MSTR | SPI_CR1_SSM | SPI_CR1_SSI | SPI_CR1_BR_1 | SPI_CR1_BR_0;
 800328c:	4b08      	ldr	r3, [pc, #32]	@ (80032b0 <SPI5_Core_Init+0x34>)
 800328e:	f24c 321c 	movw	r2, #49948	@ 0xc31c
 8003292:	601a      	str	r2, [r3, #0]
    SPI5->CR1 |= SPI_CR1_SPE;
 8003294:	4b06      	ldr	r3, [pc, #24]	@ (80032b0 <SPI5_Core_Init+0x34>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a05      	ldr	r2, [pc, #20]	@ (80032b0 <SPI5_Core_Init+0x34>)
 800329a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800329e:	6013      	str	r3, [r2, #0]
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40023800 	.word	0x40023800
 80032b0:	40015000 	.word	0x40015000

080032b4 <SPI_Write_Byte>:

__inline void SPI_Write_Byte(SPI_TypeDef* hw, uint8_t data)
{
 80032b4:	b480      	push	{r7}
 80032b6:	b083      	sub	sp, #12
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	6078      	str	r0, [r7, #4]
 80032bc:	460b      	mov	r3, r1
 80032be:	70fb      	strb	r3, [r7, #3]
    while (! (hw->SR & SPI_SR_TXE)){};
 80032c0:	bf00      	nop
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	689b      	ldr	r3, [r3, #8]
 80032c6:	f003 0302 	and.w	r3, r3, #2
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0f9      	beq.n	80032c2 <SPI_Write_Byte+0xe>
    (*(volatile uint8_t*)((uint32_t)&(hw->DR))) = data;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	330c      	adds	r3, #12
 80032d2:	78fa      	ldrb	r2, [r7, #3]
 80032d4:	701a      	strb	r2, [r3, #0]
    while (! (hw->SR & SPI_SR_TXE)){};
 80032d6:	bf00      	nop
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0f9      	beq.n	80032d8 <SPI_Write_Byte+0x24>
    while (hw->SR & SPI_SR_BSY){};
 80032e4:	bf00      	nop
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d1f9      	bne.n	80032e6 <SPI_Write_Byte+0x32>
}
 80032f2:	bf00      	nop
 80032f4:	bf00      	nop
 80032f6:	370c      	adds	r7, #12
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr

08003300 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003306:	2300      	movs	r3, #0
 8003308:	607b      	str	r3, [r7, #4]
 800330a:	4b10      	ldr	r3, [pc, #64]	@ (800334c <HAL_MspInit+0x4c>)
 800330c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800330e:	4a0f      	ldr	r2, [pc, #60]	@ (800334c <HAL_MspInit+0x4c>)
 8003310:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003314:	6453      	str	r3, [r2, #68]	@ 0x44
 8003316:	4b0d      	ldr	r3, [pc, #52]	@ (800334c <HAL_MspInit+0x4c>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800331a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800331e:	607b      	str	r3, [r7, #4]
 8003320:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003322:	2300      	movs	r3, #0
 8003324:	603b      	str	r3, [r7, #0]
 8003326:	4b09      	ldr	r3, [pc, #36]	@ (800334c <HAL_MspInit+0x4c>)
 8003328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800332a:	4a08      	ldr	r2, [pc, #32]	@ (800334c <HAL_MspInit+0x4c>)
 800332c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003330:	6413      	str	r3, [r2, #64]	@ 0x40
 8003332:	4b06      	ldr	r3, [pc, #24]	@ (800334c <HAL_MspInit+0x4c>)
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800333a:	603b      	str	r3, [r7, #0]
 800333c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr
 800334a:	bf00      	nop
 800334c:	40023800 	.word	0x40023800

08003350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003350:	b480      	push	{r7}
 8003352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003354:	bf00      	nop
 8003356:	e7fd      	b.n	8003354 <NMI_Handler+0x4>

08003358 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800335c:	bf00      	nop
 800335e:	e7fd      	b.n	800335c <HardFault_Handler+0x4>

08003360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003364:	bf00      	nop
 8003366:	e7fd      	b.n	8003364 <MemManage_Handler+0x4>

08003368 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800336c:	bf00      	nop
 800336e:	e7fd      	b.n	800336c <BusFault_Handler+0x4>

08003370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003370:	b480      	push	{r7}
 8003372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003374:	bf00      	nop
 8003376:	e7fd      	b.n	8003374 <UsageFault_Handler+0x4>

08003378 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800337c:	bf00      	nop
 800337e:	46bd      	mov	sp, r7
 8003380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003384:	4770      	bx	lr

08003386 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003386:	b480      	push	{r7}
 8003388:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800338a:	bf00      	nop
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033a6:	f000 f94f 	bl	8003648 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033aa:	bf00      	nop
 80033ac:	bd80      	pop	{r7, pc}

080033ae <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80033b2:	2001      	movs	r0, #1
 80033b4:	f000 ff6a 	bl	800428c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80033b8:	bf00      	nop
 80033ba:	bd80      	pop	{r7, pc}

080033bc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80033c0:	2004      	movs	r0, #4
 80033c2:	f000 ff63 	bl	800428c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80033c6:	bf00      	nop
 80033c8:	bd80      	pop	{r7, pc}

080033ca <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80033ce:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80033d2:	f000 ff5b 	bl	800428c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033d6:	bf00      	nop
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b086      	sub	sp, #24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80033e4:	4a14      	ldr	r2, [pc, #80]	@ (8003438 <_sbrk+0x5c>)
 80033e6:	4b15      	ldr	r3, [pc, #84]	@ (800343c <_sbrk+0x60>)
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80033ec:	697b      	ldr	r3, [r7, #20]
 80033ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80033f0:	4b13      	ldr	r3, [pc, #76]	@ (8003440 <_sbrk+0x64>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d102      	bne.n	80033fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80033f8:	4b11      	ldr	r3, [pc, #68]	@ (8003440 <_sbrk+0x64>)
 80033fa:	4a12      	ldr	r2, [pc, #72]	@ (8003444 <_sbrk+0x68>)
 80033fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80033fe:	4b10      	ldr	r3, [pc, #64]	@ (8003440 <_sbrk+0x64>)
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4413      	add	r3, r2
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	429a      	cmp	r2, r3
 800340a:	d207      	bcs.n	800341c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800340c:	f003 fba6 	bl	8006b5c <__errno>
 8003410:	4603      	mov	r3, r0
 8003412:	220c      	movs	r2, #12
 8003414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003416:	f04f 33ff 	mov.w	r3, #4294967295
 800341a:	e009      	b.n	8003430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800341c:	4b08      	ldr	r3, [pc, #32]	@ (8003440 <_sbrk+0x64>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003422:	4b07      	ldr	r3, [pc, #28]	@ (8003440 <_sbrk+0x64>)
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4413      	add	r3, r2
 800342a:	4a05      	ldr	r2, [pc, #20]	@ (8003440 <_sbrk+0x64>)
 800342c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800342e:	68fb      	ldr	r3, [r7, #12]
}
 8003430:	4618      	mov	r0, r3
 8003432:	3718      	adds	r7, #24
 8003434:	46bd      	mov	sp, r7
 8003436:	bd80      	pop	{r7, pc}
 8003438:	20030000 	.word	0x20030000
 800343c:	00000400 	.word	0x00000400
 8003440:	20000234 	.word	0x20000234
 8003444:	200003f0 	.word	0x200003f0

08003448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003448:	b480      	push	{r7}
 800344a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800344c:	4b06      	ldr	r3, [pc, #24]	@ (8003468 <SystemInit+0x20>)
 800344e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003452:	4a05      	ldr	r2, [pc, #20]	@ (8003468 <SystemInit+0x20>)
 8003454:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003458:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	e000ed00 	.word	0xe000ed00

0800346c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003470:	4b11      	ldr	r3, [pc, #68]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 8003472:	4a12      	ldr	r2, [pc, #72]	@ (80034bc <MX_USART1_UART_Init+0x50>)
 8003474:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003476:	4b10      	ldr	r3, [pc, #64]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 8003478:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800347c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800347e:	4b0e      	ldr	r3, [pc, #56]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003484:	4b0c      	ldr	r3, [pc, #48]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 8003486:	2200      	movs	r2, #0
 8003488:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800348a:	4b0b      	ldr	r3, [pc, #44]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 800348c:	2200      	movs	r2, #0
 800348e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003490:	4b09      	ldr	r3, [pc, #36]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 8003492:	220c      	movs	r2, #12
 8003494:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003496:	4b08      	ldr	r3, [pc, #32]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 8003498:	2200      	movs	r2, #0
 800349a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800349c:	4b06      	ldr	r3, [pc, #24]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 800349e:	2200      	movs	r2, #0
 80034a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80034a2:	4805      	ldr	r0, [pc, #20]	@ (80034b8 <MX_USART1_UART_Init+0x4c>)
 80034a4:	f002 ff26 	bl	80062f4 <HAL_UART_Init>
 80034a8:	4603      	mov	r3, r0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80034ae:	f7ff f9d3 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80034b2:	bf00      	nop
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	20000238 	.word	0x20000238
 80034bc:	40011000 	.word	0x40011000

080034c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b08a      	sub	sp, #40	@ 0x28
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034c8:	f107 0314 	add.w	r3, r7, #20
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a19      	ldr	r2, [pc, #100]	@ (8003544 <HAL_UART_MspInit+0x84>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d12c      	bne.n	800353c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80034e2:	2300      	movs	r3, #0
 80034e4:	613b      	str	r3, [r7, #16]
 80034e6:	4b18      	ldr	r3, [pc, #96]	@ (8003548 <HAL_UART_MspInit+0x88>)
 80034e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ea:	4a17      	ldr	r2, [pc, #92]	@ (8003548 <HAL_UART_MspInit+0x88>)
 80034ec:	f043 0310 	orr.w	r3, r3, #16
 80034f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80034f2:	4b15      	ldr	r3, [pc, #84]	@ (8003548 <HAL_UART_MspInit+0x88>)
 80034f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	613b      	str	r3, [r7, #16]
 80034fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034fe:	2300      	movs	r3, #0
 8003500:	60fb      	str	r3, [r7, #12]
 8003502:	4b11      	ldr	r3, [pc, #68]	@ (8003548 <HAL_UART_MspInit+0x88>)
 8003504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003506:	4a10      	ldr	r2, [pc, #64]	@ (8003548 <HAL_UART_MspInit+0x88>)
 8003508:	f043 0301 	orr.w	r3, r3, #1
 800350c:	6313      	str	r3, [r2, #48]	@ 0x30
 800350e:	4b0e      	ldr	r3, [pc, #56]	@ (8003548 <HAL_UART_MspInit+0x88>)
 8003510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800351a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800351e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003520:	2302      	movs	r3, #2
 8003522:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003524:	2300      	movs	r3, #0
 8003526:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003528:	2303      	movs	r3, #3
 800352a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800352c:	2307      	movs	r3, #7
 800352e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003530:	f107 0314 	add.w	r3, r7, #20
 8003534:	4619      	mov	r1, r3
 8003536:	4805      	ldr	r0, [pc, #20]	@ (800354c <HAL_UART_MspInit+0x8c>)
 8003538:	f000 fce2 	bl	8003f00 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800353c:	bf00      	nop
 800353e:	3728      	adds	r7, #40	@ 0x28
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}
 8003544:	40011000 	.word	0x40011000
 8003548:	40023800 	.word	0x40023800
 800354c:	40020000 	.word	0x40020000

08003550 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003550:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003588 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003554:	f7ff ff78 	bl	8003448 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003558:	480c      	ldr	r0, [pc, #48]	@ (800358c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800355a:	490d      	ldr	r1, [pc, #52]	@ (8003590 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800355c:	4a0d      	ldr	r2, [pc, #52]	@ (8003594 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800355e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003560:	e002      	b.n	8003568 <LoopCopyDataInit>

08003562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003566:	3304      	adds	r3, #4

08003568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800356a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800356c:	d3f9      	bcc.n	8003562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800356e:	4a0a      	ldr	r2, [pc, #40]	@ (8003598 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003570:	4c0a      	ldr	r4, [pc, #40]	@ (800359c <LoopFillZerobss+0x22>)
  movs r3, #0
 8003572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003574:	e001      	b.n	800357a <LoopFillZerobss>

08003576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003578:	3204      	adds	r2, #4

0800357a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800357a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800357c:	d3fb      	bcc.n	8003576 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800357e:	f003 faf3 	bl	8006b68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003582:	f7fe fbb7 	bl	8001cf4 <main>
  bx  lr    
 8003586:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003588:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800358c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003590:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8003594:	08007a50 	.word	0x08007a50
  ldr r2, =_sbss
 8003598:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 800359c:	200003ec 	.word	0x200003ec

080035a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80035a0:	e7fe      	b.n	80035a0 <ADC_IRQHandler>
	...

080035a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035a8:	4b0e      	ldr	r3, [pc, #56]	@ (80035e4 <HAL_Init+0x40>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a0d      	ldr	r2, [pc, #52]	@ (80035e4 <HAL_Init+0x40>)
 80035ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035b4:	4b0b      	ldr	r3, [pc, #44]	@ (80035e4 <HAL_Init+0x40>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a0a      	ldr	r2, [pc, #40]	@ (80035e4 <HAL_Init+0x40>)
 80035ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80035be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035c0:	4b08      	ldr	r3, [pc, #32]	@ (80035e4 <HAL_Init+0x40>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a07      	ldr	r2, [pc, #28]	@ (80035e4 <HAL_Init+0x40>)
 80035c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035cc:	2003      	movs	r0, #3
 80035ce:	f000 f94f 	bl	8003870 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035d2:	200f      	movs	r0, #15
 80035d4:	f000 f808 	bl	80035e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035d8:	f7ff fe92 	bl	8003300 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	40023c00 	.word	0x40023c00

080035e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b082      	sub	sp, #8
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035f0:	4b12      	ldr	r3, [pc, #72]	@ (800363c <HAL_InitTick+0x54>)
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	4b12      	ldr	r3, [pc, #72]	@ (8003640 <HAL_InitTick+0x58>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	4619      	mov	r1, r3
 80035fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80035fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8003602:	fbb2 f3f3 	udiv	r3, r2, r3
 8003606:	4618      	mov	r0, r3
 8003608:	f000 f967 	bl	80038da <HAL_SYSTICK_Config>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d001      	beq.n	8003616 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e00e      	b.n	8003634 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b0f      	cmp	r3, #15
 800361a:	d80a      	bhi.n	8003632 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800361c:	2200      	movs	r2, #0
 800361e:	6879      	ldr	r1, [r7, #4]
 8003620:	f04f 30ff 	mov.w	r0, #4294967295
 8003624:	f000 f92f 	bl	8003886 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003628:	4a06      	ldr	r2, [pc, #24]	@ (8003644 <HAL_InitTick+0x5c>)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
 8003630:	e000      	b.n	8003634 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
}
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}
 800363c:	200000e8 	.word	0x200000e8
 8003640:	200000f0 	.word	0x200000f0
 8003644:	200000ec 	.word	0x200000ec

08003648 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003648:	b480      	push	{r7}
 800364a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800364c:	4b06      	ldr	r3, [pc, #24]	@ (8003668 <HAL_IncTick+0x20>)
 800364e:	781b      	ldrb	r3, [r3, #0]
 8003650:	461a      	mov	r2, r3
 8003652:	4b06      	ldr	r3, [pc, #24]	@ (800366c <HAL_IncTick+0x24>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4413      	add	r3, r2
 8003658:	4a04      	ldr	r2, [pc, #16]	@ (800366c <HAL_IncTick+0x24>)
 800365a:	6013      	str	r3, [r2, #0]
}
 800365c:	bf00      	nop
 800365e:	46bd      	mov	sp, r7
 8003660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003664:	4770      	bx	lr
 8003666:	bf00      	nop
 8003668:	200000f0 	.word	0x200000f0
 800366c:	20000280 	.word	0x20000280

08003670 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003670:	b480      	push	{r7}
 8003672:	af00      	add	r7, sp, #0
  return uwTick;
 8003674:	4b03      	ldr	r3, [pc, #12]	@ (8003684 <HAL_GetTick+0x14>)
 8003676:	681b      	ldr	r3, [r3, #0]
}
 8003678:	4618      	mov	r0, r3
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
 8003682:	bf00      	nop
 8003684:	20000280 	.word	0x20000280

08003688 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b084      	sub	sp, #16
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003690:	f7ff ffee 	bl	8003670 <HAL_GetTick>
 8003694:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a0:	d005      	beq.n	80036ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80036a2:	4b0a      	ldr	r3, [pc, #40]	@ (80036cc <HAL_Delay+0x44>)
 80036a4:	781b      	ldrb	r3, [r3, #0]
 80036a6:	461a      	mov	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4413      	add	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80036ae:	bf00      	nop
 80036b0:	f7ff ffde 	bl	8003670 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	429a      	cmp	r2, r3
 80036be:	d8f7      	bhi.n	80036b0 <HAL_Delay+0x28>
  {
  }
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
 80036ca:	bf00      	nop
 80036cc:	200000f0 	.word	0x200000f0

080036d0 <__NVIC_SetPriorityGrouping>:
{
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f003 0307 	and.w	r3, r3, #7
 80036de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003714 <__NVIC_SetPriorityGrouping+0x44>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036e6:	68ba      	ldr	r2, [r7, #8]
 80036e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036ec:	4013      	ands	r3, r2
 80036ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036f4:	68bb      	ldr	r3, [r7, #8]
 80036f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003700:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003702:	4a04      	ldr	r2, [pc, #16]	@ (8003714 <__NVIC_SetPriorityGrouping+0x44>)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	60d3      	str	r3, [r2, #12]
}
 8003708:	bf00      	nop
 800370a:	3714      	adds	r7, #20
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr
 8003714:	e000ed00 	.word	0xe000ed00

08003718 <__NVIC_GetPriorityGrouping>:
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800371c:	4b04      	ldr	r3, [pc, #16]	@ (8003730 <__NVIC_GetPriorityGrouping+0x18>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	0a1b      	lsrs	r3, r3, #8
 8003722:	f003 0307 	and.w	r3, r3, #7
}
 8003726:	4618      	mov	r0, r3
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr
 8003730:	e000ed00 	.word	0xe000ed00

08003734 <__NVIC_EnableIRQ>:
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003742:	2b00      	cmp	r3, #0
 8003744:	db0b      	blt.n	800375e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003746:	79fb      	ldrb	r3, [r7, #7]
 8003748:	f003 021f 	and.w	r2, r3, #31
 800374c:	4907      	ldr	r1, [pc, #28]	@ (800376c <__NVIC_EnableIRQ+0x38>)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	2001      	movs	r0, #1
 8003756:	fa00 f202 	lsl.w	r2, r0, r2
 800375a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	e000e100 	.word	0xe000e100

08003770 <__NVIC_SetPriority>:
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	4603      	mov	r3, r0
 8003778:	6039      	str	r1, [r7, #0]
 800377a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800377c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003780:	2b00      	cmp	r3, #0
 8003782:	db0a      	blt.n	800379a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	b2da      	uxtb	r2, r3
 8003788:	490c      	ldr	r1, [pc, #48]	@ (80037bc <__NVIC_SetPriority+0x4c>)
 800378a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800378e:	0112      	lsls	r2, r2, #4
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	440b      	add	r3, r1
 8003794:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003798:	e00a      	b.n	80037b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	b2da      	uxtb	r2, r3
 800379e:	4908      	ldr	r1, [pc, #32]	@ (80037c0 <__NVIC_SetPriority+0x50>)
 80037a0:	79fb      	ldrb	r3, [r7, #7]
 80037a2:	f003 030f 	and.w	r3, r3, #15
 80037a6:	3b04      	subs	r3, #4
 80037a8:	0112      	lsls	r2, r2, #4
 80037aa:	b2d2      	uxtb	r2, r2
 80037ac:	440b      	add	r3, r1
 80037ae:	761a      	strb	r2, [r3, #24]
}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	e000e100 	.word	0xe000e100
 80037c0:	e000ed00 	.word	0xe000ed00

080037c4 <NVIC_EncodePriority>:
{
 80037c4:	b480      	push	{r7}
 80037c6:	b089      	sub	sp, #36	@ 0x24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f003 0307 	and.w	r3, r3, #7
 80037d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80037d8:	69fb      	ldr	r3, [r7, #28]
 80037da:	f1c3 0307 	rsb	r3, r3, #7
 80037de:	2b04      	cmp	r3, #4
 80037e0:	bf28      	it	cs
 80037e2:	2304      	movcs	r3, #4
 80037e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037e6:	69fb      	ldr	r3, [r7, #28]
 80037e8:	3304      	adds	r3, #4
 80037ea:	2b06      	cmp	r3, #6
 80037ec:	d902      	bls.n	80037f4 <NVIC_EncodePriority+0x30>
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	3b03      	subs	r3, #3
 80037f2:	e000      	b.n	80037f6 <NVIC_EncodePriority+0x32>
 80037f4:	2300      	movs	r3, #0
 80037f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037f8:	f04f 32ff 	mov.w	r2, #4294967295
 80037fc:	69bb      	ldr	r3, [r7, #24]
 80037fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003802:	43da      	mvns	r2, r3
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	401a      	ands	r2, r3
 8003808:	697b      	ldr	r3, [r7, #20]
 800380a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800380c:	f04f 31ff 	mov.w	r1, #4294967295
 8003810:	697b      	ldr	r3, [r7, #20]
 8003812:	fa01 f303 	lsl.w	r3, r1, r3
 8003816:	43d9      	mvns	r1, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800381c:	4313      	orrs	r3, r2
}
 800381e:	4618      	mov	r0, r3
 8003820:	3724      	adds	r7, #36	@ 0x24
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
	...

0800382c <SysTick_Config>:
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	3b01      	subs	r3, #1
 8003838:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800383c:	d301      	bcc.n	8003842 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800383e:	2301      	movs	r3, #1
 8003840:	e00f      	b.n	8003862 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003842:	4a0a      	ldr	r2, [pc, #40]	@ (800386c <SysTick_Config+0x40>)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3b01      	subs	r3, #1
 8003848:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800384a:	210f      	movs	r1, #15
 800384c:	f04f 30ff 	mov.w	r0, #4294967295
 8003850:	f7ff ff8e 	bl	8003770 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003854:	4b05      	ldr	r3, [pc, #20]	@ (800386c <SysTick_Config+0x40>)
 8003856:	2200      	movs	r2, #0
 8003858:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800385a:	4b04      	ldr	r3, [pc, #16]	@ (800386c <SysTick_Config+0x40>)
 800385c:	2207      	movs	r2, #7
 800385e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
 800386a:	bf00      	nop
 800386c:	e000e010 	.word	0xe000e010

08003870 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b082      	sub	sp, #8
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff ff29 	bl	80036d0 <__NVIC_SetPriorityGrouping>
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003886:	b580      	push	{r7, lr}
 8003888:	b086      	sub	sp, #24
 800388a:	af00      	add	r7, sp, #0
 800388c:	4603      	mov	r3, r0
 800388e:	60b9      	str	r1, [r7, #8]
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003894:	2300      	movs	r3, #0
 8003896:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003898:	f7ff ff3e 	bl	8003718 <__NVIC_GetPriorityGrouping>
 800389c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	68b9      	ldr	r1, [r7, #8]
 80038a2:	6978      	ldr	r0, [r7, #20]
 80038a4:	f7ff ff8e 	bl	80037c4 <NVIC_EncodePriority>
 80038a8:	4602      	mov	r2, r0
 80038aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ae:	4611      	mov	r1, r2
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff ff5d 	bl	8003770 <__NVIC_SetPriority>
}
 80038b6:	bf00      	nop
 80038b8:	3718      	adds	r7, #24
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b082      	sub	sp, #8
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	4603      	mov	r3, r0
 80038c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80038c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff ff31 	bl	8003734 <__NVIC_EnableIRQ>
}
 80038d2:	bf00      	nop
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}

080038da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80038da:	b580      	push	{r7, lr}
 80038dc:	b082      	sub	sp, #8
 80038de:	af00      	add	r7, sp, #0
 80038e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f7ff ffa2 	bl	800382c <SysTick_Config>
 80038e8:	4603      	mov	r3, r0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
	...

080038f4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b086      	sub	sp, #24
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	60f8      	str	r0, [r7, #12]
 80038fc:	60b9      	str	r1, [r7, #8]
 80038fe:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003906:	4b23      	ldr	r3, [pc, #140]	@ (8003994 <HAL_FLASH_Program+0xa0>)
 8003908:	7e1b      	ldrb	r3, [r3, #24]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d101      	bne.n	8003912 <HAL_FLASH_Program+0x1e>
 800390e:	2302      	movs	r3, #2
 8003910:	e03b      	b.n	800398a <HAL_FLASH_Program+0x96>
 8003912:	4b20      	ldr	r3, [pc, #128]	@ (8003994 <HAL_FLASH_Program+0xa0>)
 8003914:	2201      	movs	r2, #1
 8003916:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003918:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800391c:	f000 f870 	bl	8003a00 <FLASH_WaitForLastOperation>
 8003920:	4603      	mov	r3, r0
 8003922:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003924:	7dfb      	ldrb	r3, [r7, #23]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d12b      	bne.n	8003982 <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003930:	783b      	ldrb	r3, [r7, #0]
 8003932:	4619      	mov	r1, r3
 8003934:	68b8      	ldr	r0, [r7, #8]
 8003936:	f000 f91b 	bl	8003b70 <FLASH_Program_Byte>
 800393a:	e016      	b.n	800396a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2b01      	cmp	r3, #1
 8003940:	d105      	bne.n	800394e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003942:	883b      	ldrh	r3, [r7, #0]
 8003944:	4619      	mov	r1, r3
 8003946:	68b8      	ldr	r0, [r7, #8]
 8003948:	f000 f8ee 	bl	8003b28 <FLASH_Program_HalfWord>
 800394c:	e00d      	b.n	800396a <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b02      	cmp	r3, #2
 8003952:	d105      	bne.n	8003960 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	4619      	mov	r1, r3
 8003958:	68b8      	ldr	r0, [r7, #8]
 800395a:	f000 f8c3 	bl	8003ae4 <FLASH_Program_Word>
 800395e:	e004      	b.n	800396a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003960:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003964:	68b8      	ldr	r0, [r7, #8]
 8003966:	f000 f88b 	bl	8003a80 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800396a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800396e:	f000 f847 	bl	8003a00 <FLASH_WaitForLastOperation>
 8003972:	4603      	mov	r3, r0
 8003974:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8003976:	4b08      	ldr	r3, [pc, #32]	@ (8003998 <HAL_FLASH_Program+0xa4>)
 8003978:	691b      	ldr	r3, [r3, #16]
 800397a:	4a07      	ldr	r2, [pc, #28]	@ (8003998 <HAL_FLASH_Program+0xa4>)
 800397c:	f023 0301 	bic.w	r3, r3, #1
 8003980:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003982:	4b04      	ldr	r3, [pc, #16]	@ (8003994 <HAL_FLASH_Program+0xa0>)
 8003984:	2200      	movs	r2, #0
 8003986:	761a      	strb	r2, [r3, #24]

  return status;
 8003988:	7dfb      	ldrb	r3, [r7, #23]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3718      	adds	r7, #24
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	20000284 	.word	0x20000284
 8003998:	40023c00 	.word	0x40023c00

0800399c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80039a2:	2300      	movs	r3, #0
 80039a4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039a6:	4b0b      	ldr	r3, [pc, #44]	@ (80039d4 <HAL_FLASH_Unlock+0x38>)
 80039a8:	691b      	ldr	r3, [r3, #16]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	da0b      	bge.n	80039c6 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80039ae:	4b09      	ldr	r3, [pc, #36]	@ (80039d4 <HAL_FLASH_Unlock+0x38>)
 80039b0:	4a09      	ldr	r2, [pc, #36]	@ (80039d8 <HAL_FLASH_Unlock+0x3c>)
 80039b2:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80039b4:	4b07      	ldr	r3, [pc, #28]	@ (80039d4 <HAL_FLASH_Unlock+0x38>)
 80039b6:	4a09      	ldr	r2, [pc, #36]	@ (80039dc <HAL_FLASH_Unlock+0x40>)
 80039b8:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80039ba:	4b06      	ldr	r3, [pc, #24]	@ (80039d4 <HAL_FLASH_Unlock+0x38>)
 80039bc:	691b      	ldr	r3, [r3, #16]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	da01      	bge.n	80039c6 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80039c6:	79fb      	ldrb	r3, [r7, #7]
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	40023c00 	.word	0x40023c00
 80039d8:	45670123 	.word	0x45670123
 80039dc:	cdef89ab 	.word	0xcdef89ab

080039e0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80039e4:	4b05      	ldr	r3, [pc, #20]	@ (80039fc <HAL_FLASH_Lock+0x1c>)
 80039e6:	691b      	ldr	r3, [r3, #16]
 80039e8:	4a04      	ldr	r2, [pc, #16]	@ (80039fc <HAL_FLASH_Lock+0x1c>)
 80039ea:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039ee:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr
 80039fc:	40023c00 	.word	0x40023c00

08003a00 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8003a78 <FLASH_WaitForLastOperation+0x78>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003a12:	f7ff fe2d 	bl	8003670 <HAL_GetTick>
 8003a16:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8003a18:	e010      	b.n	8003a3c <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d00c      	beq.n	8003a3c <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d007      	beq.n	8003a38 <FLASH_WaitForLastOperation+0x38>
 8003a28:	f7ff fe22 	bl	8003670 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d201      	bcs.n	8003a3c <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e019      	b.n	8003a70 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8003a3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a7c <FLASH_WaitForLastOperation+0x7c>)
 8003a3e:	68db      	ldr	r3, [r3, #12]
 8003a40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d1e8      	bne.n	8003a1a <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003a48:	4b0c      	ldr	r3, [pc, #48]	@ (8003a7c <FLASH_WaitForLastOperation+0x7c>)
 8003a4a:	68db      	ldr	r3, [r3, #12]
 8003a4c:	f003 0301 	and.w	r3, r3, #1
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d002      	beq.n	8003a5a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003a54:	4b09      	ldr	r3, [pc, #36]	@ (8003a7c <FLASH_WaitForLastOperation+0x7c>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003a5a:	4b08      	ldr	r3, [pc, #32]	@ (8003a7c <FLASH_WaitForLastOperation+0x7c>)
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d003      	beq.n	8003a6e <FLASH_WaitForLastOperation+0x6e>
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003a66:	f000 f8a5 	bl	8003bb4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	e000      	b.n	8003a70 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003a6e:	2300      	movs	r3, #0

}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3710      	adds	r7, #16
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	20000284 	.word	0x20000284
 8003a7c:	40023c00 	.word	0x40023c00

08003a80 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003a8c:	4b14      	ldr	r3, [pc, #80]	@ (8003ae0 <FLASH_Program_DoubleWord+0x60>)
 8003a8e:	691b      	ldr	r3, [r3, #16]
 8003a90:	4a13      	ldr	r2, [pc, #76]	@ (8003ae0 <FLASH_Program_DoubleWord+0x60>)
 8003a92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003a98:	4b11      	ldr	r3, [pc, #68]	@ (8003ae0 <FLASH_Program_DoubleWord+0x60>)
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	4a10      	ldr	r2, [pc, #64]	@ (8003ae0 <FLASH_Program_DoubleWord+0x60>)
 8003a9e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003aa2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003aa4:	4b0e      	ldr	r3, [pc, #56]	@ (8003ae0 <FLASH_Program_DoubleWord+0x60>)
 8003aa6:	691b      	ldr	r3, [r3, #16]
 8003aa8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ae0 <FLASH_Program_DoubleWord+0x60>)
 8003aaa:	f043 0301 	orr.w	r3, r3, #1
 8003aae:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003ab6:	f3bf 8f6f 	isb	sy
}
 8003aba:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8003abc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003ac0:	f04f 0200 	mov.w	r2, #0
 8003ac4:	f04f 0300 	mov.w	r3, #0
 8003ac8:	000a      	movs	r2, r1
 8003aca:	2300      	movs	r3, #0
 8003acc:	68f9      	ldr	r1, [r7, #12]
 8003ace:	3104      	adds	r1, #4
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	600b      	str	r3, [r1, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	40023c00 	.word	0x40023c00

08003ae4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003aee:	4b0d      	ldr	r3, [pc, #52]	@ (8003b24 <FLASH_Program_Word+0x40>)
 8003af0:	691b      	ldr	r3, [r3, #16]
 8003af2:	4a0c      	ldr	r2, [pc, #48]	@ (8003b24 <FLASH_Program_Word+0x40>)
 8003af4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003af8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003afa:	4b0a      	ldr	r3, [pc, #40]	@ (8003b24 <FLASH_Program_Word+0x40>)
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	4a09      	ldr	r2, [pc, #36]	@ (8003b24 <FLASH_Program_Word+0x40>)
 8003b00:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003b06:	4b07      	ldr	r3, [pc, #28]	@ (8003b24 <FLASH_Program_Word+0x40>)
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	4a06      	ldr	r2, [pc, #24]	@ (8003b24 <FLASH_Program_Word+0x40>)
 8003b0c:	f043 0301 	orr.w	r3, r3, #1
 8003b10:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	601a      	str	r2, [r3, #0]
}
 8003b18:	bf00      	nop
 8003b1a:	370c      	adds	r7, #12
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b22:	4770      	bx	lr
 8003b24:	40023c00 	.word	0x40023c00

08003b28 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003b34:	4b0d      	ldr	r3, [pc, #52]	@ (8003b6c <FLASH_Program_HalfWord+0x44>)
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	4a0c      	ldr	r2, [pc, #48]	@ (8003b6c <FLASH_Program_HalfWord+0x44>)
 8003b3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b3e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003b40:	4b0a      	ldr	r3, [pc, #40]	@ (8003b6c <FLASH_Program_HalfWord+0x44>)
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	4a09      	ldr	r2, [pc, #36]	@ (8003b6c <FLASH_Program_HalfWord+0x44>)
 8003b46:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003b4c:	4b07      	ldr	r3, [pc, #28]	@ (8003b6c <FLASH_Program_HalfWord+0x44>)
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	4a06      	ldr	r2, [pc, #24]	@ (8003b6c <FLASH_Program_HalfWord+0x44>)
 8003b52:	f043 0301 	orr.w	r3, r3, #1
 8003b56:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	887a      	ldrh	r2, [r7, #2]
 8003b5c:	801a      	strh	r2, [r3, #0]
}
 8003b5e:	bf00      	nop
 8003b60:	370c      	adds	r7, #12
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40023c00 	.word	0x40023c00

08003b70 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003b7c:	4b0c      	ldr	r3, [pc, #48]	@ (8003bb0 <FLASH_Program_Byte+0x40>)
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	4a0b      	ldr	r2, [pc, #44]	@ (8003bb0 <FLASH_Program_Byte+0x40>)
 8003b82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003b88:	4b09      	ldr	r3, [pc, #36]	@ (8003bb0 <FLASH_Program_Byte+0x40>)
 8003b8a:	4a09      	ldr	r2, [pc, #36]	@ (8003bb0 <FLASH_Program_Byte+0x40>)
 8003b8c:	691b      	ldr	r3, [r3, #16]
 8003b8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003b90:	4b07      	ldr	r3, [pc, #28]	@ (8003bb0 <FLASH_Program_Byte+0x40>)
 8003b92:	691b      	ldr	r3, [r3, #16]
 8003b94:	4a06      	ldr	r2, [pc, #24]	@ (8003bb0 <FLASH_Program_Byte+0x40>)
 8003b96:	f043 0301 	orr.w	r3, r3, #1
 8003b9a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	701a      	strb	r2, [r3, #0]
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	40023c00 	.word	0x40023c00

08003bb4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003bb8:	4b2f      	ldr	r3, [pc, #188]	@ (8003c78 <FLASH_SetErrorCode+0xc4>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 0310 	and.w	r3, r3, #16
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d008      	beq.n	8003bd6 <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003bc4:	4b2d      	ldr	r3, [pc, #180]	@ (8003c7c <FLASH_SetErrorCode+0xc8>)
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	f043 0310 	orr.w	r3, r3, #16
 8003bcc:	4a2b      	ldr	r2, [pc, #172]	@ (8003c7c <FLASH_SetErrorCode+0xc8>)
 8003bce:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003bd0:	4b29      	ldr	r3, [pc, #164]	@ (8003c78 <FLASH_SetErrorCode+0xc4>)
 8003bd2:	2210      	movs	r2, #16
 8003bd4:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003bd6:	4b28      	ldr	r3, [pc, #160]	@ (8003c78 <FLASH_SetErrorCode+0xc4>)
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	f003 0320 	and.w	r3, r3, #32
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d008      	beq.n	8003bf4 <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003be2:	4b26      	ldr	r3, [pc, #152]	@ (8003c7c <FLASH_SetErrorCode+0xc8>)
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f043 0308 	orr.w	r3, r3, #8
 8003bea:	4a24      	ldr	r2, [pc, #144]	@ (8003c7c <FLASH_SetErrorCode+0xc8>)
 8003bec:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003bee:	4b22      	ldr	r3, [pc, #136]	@ (8003c78 <FLASH_SetErrorCode+0xc4>)
 8003bf0:	2220      	movs	r2, #32
 8003bf2:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003bf4:	4b20      	ldr	r3, [pc, #128]	@ (8003c78 <FLASH_SetErrorCode+0xc4>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003c00:	4b1e      	ldr	r3, [pc, #120]	@ (8003c7c <FLASH_SetErrorCode+0xc8>)
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	f043 0304 	orr.w	r3, r3, #4
 8003c08:	4a1c      	ldr	r2, [pc, #112]	@ (8003c7c <FLASH_SetErrorCode+0xc8>)
 8003c0a:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003c0c:	4b1a      	ldr	r3, [pc, #104]	@ (8003c78 <FLASH_SetErrorCode+0xc4>)
 8003c0e:	2240      	movs	r2, #64	@ 0x40
 8003c10:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003c12:	4b19      	ldr	r3, [pc, #100]	@ (8003c78 <FLASH_SetErrorCode+0xc4>)
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d008      	beq.n	8003c30 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003c1e:	4b17      	ldr	r3, [pc, #92]	@ (8003c7c <FLASH_SetErrorCode+0xc8>)
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	f043 0302 	orr.w	r3, r3, #2
 8003c26:	4a15      	ldr	r2, [pc, #84]	@ (8003c7c <FLASH_SetErrorCode+0xc8>)
 8003c28:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003c2a:	4b13      	ldr	r3, [pc, #76]	@ (8003c78 <FLASH_SetErrorCode+0xc4>)
 8003c2c:	2280      	movs	r2, #128	@ 0x80
 8003c2e:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003c30:	4b11      	ldr	r3, [pc, #68]	@ (8003c78 <FLASH_SetErrorCode+0xc4>)
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d009      	beq.n	8003c50 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8003c7c <FLASH_SetErrorCode+0xc8>)
 8003c3e:	69db      	ldr	r3, [r3, #28]
 8003c40:	f043 0301 	orr.w	r3, r3, #1
 8003c44:	4a0d      	ldr	r2, [pc, #52]	@ (8003c7c <FLASH_SetErrorCode+0xc8>)
 8003c46:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003c48:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <FLASH_SetErrorCode+0xc4>)
 8003c4a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c4e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003c50:	4b09      	ldr	r3, [pc, #36]	@ (8003c78 <FLASH_SetErrorCode+0xc4>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	f003 0302 	and.w	r3, r3, #2
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d008      	beq.n	8003c6e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003c5c:	4b07      	ldr	r3, [pc, #28]	@ (8003c7c <FLASH_SetErrorCode+0xc8>)
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	f043 0320 	orr.w	r3, r3, #32
 8003c64:	4a05      	ldr	r2, [pc, #20]	@ (8003c7c <FLASH_SetErrorCode+0xc8>)
 8003c66:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003c68:	4b03      	ldr	r3, [pc, #12]	@ (8003c78 <FLASH_SetErrorCode+0xc4>)
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	60da      	str	r2, [r3, #12]
  }
}
 8003c6e:	bf00      	nop
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr
 8003c78:	40023c00 	.word	0x40023c00
 8003c7c:	20000284 	.word	0x20000284

08003c80 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b084      	sub	sp, #16
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003c92:	4b32      	ldr	r3, [pc, #200]	@ (8003d5c <HAL_FLASHEx_Erase+0xdc>)
 8003c94:	7e1b      	ldrb	r3, [r3, #24]
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_FLASHEx_Erase+0x1e>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e05a      	b.n	8003d54 <HAL_FLASHEx_Erase+0xd4>
 8003c9e:	4b2f      	ldr	r3, [pc, #188]	@ (8003d5c <HAL_FLASHEx_Erase+0xdc>)
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003ca4:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003ca8:	f7ff feaa 	bl	8003a00 <FLASH_WaitForLastOperation>
 8003cac:	4603      	mov	r3, r0
 8003cae:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d14a      	bne.n	8003d4c <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8003cbc:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d117      	bne.n	8003cf6 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	b2da      	uxtb	r2, r3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	f000 f846 	bl	8003d64 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003cd8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003cdc:	f7ff fe90 	bl	8003a00 <FLASH_WaitForLastOperation>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003ce4:	4b1e      	ldr	r3, [pc, #120]	@ (8003d60 <HAL_FLASHEx_Erase+0xe0>)
 8003ce6:	691b      	ldr	r3, [r3, #16]
 8003ce8:	4a1d      	ldr	r2, [pc, #116]	@ (8003d60 <HAL_FLASHEx_Erase+0xe0>)
 8003cea:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003cee:	f023 0304 	bic.w	r3, r3, #4
 8003cf2:	6113      	str	r3, [r2, #16]
 8003cf4:	e028      	b.n	8003d48 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	60bb      	str	r3, [r7, #8]
 8003cfc:	e01c      	b.n	8003d38 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	691b      	ldr	r3, [r3, #16]
 8003d02:	b2db      	uxtb	r3, r3
 8003d04:	4619      	mov	r1, r3
 8003d06:	68b8      	ldr	r0, [r7, #8]
 8003d08:	f000 f866 	bl	8003dd8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003d0c:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8003d10:	f7ff fe76 	bl	8003a00 <FLASH_WaitForLastOperation>
 8003d14:	4603      	mov	r3, r0
 8003d16:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8003d18:	4b11      	ldr	r3, [pc, #68]	@ (8003d60 <HAL_FLASHEx_Erase+0xe0>)
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	4a10      	ldr	r2, [pc, #64]	@ (8003d60 <HAL_FLASHEx_Erase+0xe0>)
 8003d1e:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8003d22:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8003d24:	7bfb      	ldrb	r3, [r7, #15]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d003      	beq.n	8003d32 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	601a      	str	r2, [r3, #0]
          break;
 8003d30:	e00a      	b.n	8003d48 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	3301      	adds	r3, #1
 8003d36:	60bb      	str	r3, [r7, #8]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	689b      	ldr	r3, [r3, #8]
 8003d40:	4413      	add	r3, r2
 8003d42:	68ba      	ldr	r2, [r7, #8]
 8003d44:	429a      	cmp	r2, r3
 8003d46:	d3da      	bcc.n	8003cfe <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8003d48:	f000 f894 	bl	8003e74 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003d4c:	4b03      	ldr	r3, [pc, #12]	@ (8003d5c <HAL_FLASHEx_Erase+0xdc>)
 8003d4e:	2200      	movs	r2, #0
 8003d50:	761a      	strb	r2, [r3, #24]

  return status;
 8003d52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	20000284 	.word	0x20000284
 8003d60:	40023c00 	.word	0x40023c00

08003d64 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003d64:	b480      	push	{r7}
 8003d66:	b083      	sub	sp, #12
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	6039      	str	r1, [r7, #0]
 8003d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003d70:	4b18      	ldr	r3, [pc, #96]	@ (8003dd4 <FLASH_MassErase+0x70>)
 8003d72:	691b      	ldr	r3, [r3, #16]
 8003d74:	4a17      	ldr	r2, [pc, #92]	@ (8003dd4 <FLASH_MassErase+0x70>)
 8003d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d7a:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2b03      	cmp	r3, #3
 8003d80:	d108      	bne.n	8003d94 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003d82:	4b14      	ldr	r3, [pc, #80]	@ (8003dd4 <FLASH_MassErase+0x70>)
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	4a13      	ldr	r2, [pc, #76]	@ (8003dd4 <FLASH_MassErase+0x70>)
 8003d88:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d8c:	f043 0304 	orr.w	r3, r3, #4
 8003d90:	6113      	str	r3, [r2, #16]
 8003d92:	e00f      	b.n	8003db4 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d106      	bne.n	8003da8 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 8003d9a:	4b0e      	ldr	r3, [pc, #56]	@ (8003dd4 <FLASH_MassErase+0x70>)
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	4a0d      	ldr	r2, [pc, #52]	@ (8003dd4 <FLASH_MassErase+0x70>)
 8003da0:	f043 0304 	orr.w	r3, r3, #4
 8003da4:	6113      	str	r3, [r2, #16]
 8003da6:	e005      	b.n	8003db4 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003da8:	4b0a      	ldr	r3, [pc, #40]	@ (8003dd4 <FLASH_MassErase+0x70>)
 8003daa:	691b      	ldr	r3, [r3, #16]
 8003dac:	4a09      	ldr	r2, [pc, #36]	@ (8003dd4 <FLASH_MassErase+0x70>)
 8003dae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003db2:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003db4:	4b07      	ldr	r3, [pc, #28]	@ (8003dd4 <FLASH_MassErase+0x70>)
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	79fb      	ldrb	r3, [r7, #7]
 8003dba:	021b      	lsls	r3, r3, #8
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	4a05      	ldr	r2, [pc, #20]	@ (8003dd4 <FLASH_MassErase+0x70>)
 8003dc0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003dc4:	6113      	str	r3, [r2, #16]
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd0:	4770      	bx	lr
 8003dd2:	bf00      	nop
 8003dd4:	40023c00 	.word	0x40023c00

08003dd8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	460b      	mov	r3, r1
 8003de2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003de4:	2300      	movs	r3, #0
 8003de6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d102      	bne.n	8003df4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	e010      	b.n	8003e16 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003df4:	78fb      	ldrb	r3, [r7, #3]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d103      	bne.n	8003e02 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003dfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	e009      	b.n	8003e16 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003e02:	78fb      	ldrb	r3, [r7, #3]
 8003e04:	2b02      	cmp	r3, #2
 8003e06:	d103      	bne.n	8003e10 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003e08:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e002      	b.n	8003e16 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003e10:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003e14:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2b0b      	cmp	r3, #11
 8003e1a:	d902      	bls.n	8003e22 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3304      	adds	r3, #4
 8003e20:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003e22:	4b13      	ldr	r3, [pc, #76]	@ (8003e70 <FLASH_Erase_Sector+0x98>)
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	4a12      	ldr	r2, [pc, #72]	@ (8003e70 <FLASH_Erase_Sector+0x98>)
 8003e28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e2c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003e2e:	4b10      	ldr	r3, [pc, #64]	@ (8003e70 <FLASH_Erase_Sector+0x98>)
 8003e30:	691a      	ldr	r2, [r3, #16]
 8003e32:	490f      	ldr	r1, [pc, #60]	@ (8003e70 <FLASH_Erase_Sector+0x98>)
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e70 <FLASH_Erase_Sector+0x98>)
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	4a0c      	ldr	r2, [pc, #48]	@ (8003e70 <FLASH_Erase_Sector+0x98>)
 8003e40:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003e44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003e46:	4b0a      	ldr	r3, [pc, #40]	@ (8003e70 <FLASH_Erase_Sector+0x98>)
 8003e48:	691a      	ldr	r2, [r3, #16]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	4a07      	ldr	r2, [pc, #28]	@ (8003e70 <FLASH_Erase_Sector+0x98>)
 8003e52:	f043 0302 	orr.w	r3, r3, #2
 8003e56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003e58:	4b05      	ldr	r3, [pc, #20]	@ (8003e70 <FLASH_Erase_Sector+0x98>)
 8003e5a:	691b      	ldr	r3, [r3, #16]
 8003e5c:	4a04      	ldr	r2, [pc, #16]	@ (8003e70 <FLASH_Erase_Sector+0x98>)
 8003e5e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e62:	6113      	str	r3, [r2, #16]
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr
 8003e70:	40023c00 	.word	0x40023c00

08003e74 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003e78:	4b20      	ldr	r3, [pc, #128]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d017      	beq.n	8003eb4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003e84:	4b1d      	ldr	r3, [pc, #116]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a1c      	ldr	r2, [pc, #112]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003e8a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e8e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003e90:	4b1a      	ldr	r3, [pc, #104]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a19      	ldr	r2, [pc, #100]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003e96:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e9a:	6013      	str	r3, [r2, #0]
 8003e9c:	4b17      	ldr	r3, [pc, #92]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a16      	ldr	r2, [pc, #88]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003ea2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003ea6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ea8:	4b14      	ldr	r3, [pc, #80]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a13      	ldr	r2, [pc, #76]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003eae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003eb2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003eb4:	4b11      	ldr	r3, [pc, #68]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d017      	beq.n	8003ef0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003ec6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003eca:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003ed2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003ed6:	6013      	str	r3, [r2, #0]
 8003ed8:	4b08      	ldr	r3, [pc, #32]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a07      	ldr	r2, [pc, #28]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003ede:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ee2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ee4:	4b05      	ldr	r3, [pc, #20]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a04      	ldr	r2, [pc, #16]	@ (8003efc <FLASH_FlushCaches+0x88>)
 8003eea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003eee:	6013      	str	r3, [r2, #0]
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
 8003efa:	bf00      	nop
 8003efc:	40023c00 	.word	0x40023c00

08003f00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b089      	sub	sp, #36	@ 0x24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
 8003f08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f12:	2300      	movs	r3, #0
 8003f14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f16:	2300      	movs	r3, #0
 8003f18:	61fb      	str	r3, [r7, #28]
 8003f1a:	e177      	b.n	800420c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	fa02 f303 	lsl.w	r3, r2, r3
 8003f24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	697a      	ldr	r2, [r7, #20]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f30:	693a      	ldr	r2, [r7, #16]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	429a      	cmp	r2, r3
 8003f36:	f040 8166 	bne.w	8004206 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f003 0303 	and.w	r3, r3, #3
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d005      	beq.n	8003f52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d130      	bne.n	8003fb4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	2203      	movs	r2, #3
 8003f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f62:	43db      	mvns	r3, r3
 8003f64:	69ba      	ldr	r2, [r7, #24]
 8003f66:	4013      	ands	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	68da      	ldr	r2, [r3, #12]
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	005b      	lsls	r3, r3, #1
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f88:	2201      	movs	r2, #1
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f90:	43db      	mvns	r3, r3
 8003f92:	69ba      	ldr	r2, [r7, #24]
 8003f94:	4013      	ands	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	091b      	lsrs	r3, r3, #4
 8003f9e:	f003 0201 	and.w	r2, r3, #1
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	2b03      	cmp	r3, #3
 8003fbe:	d017      	beq.n	8003ff0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	005b      	lsls	r3, r3, #1
 8003fca:	2203      	movs	r2, #3
 8003fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd0:	43db      	mvns	r3, r3
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	689a      	ldr	r2, [r3, #8]
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	005b      	lsls	r3, r3, #1
 8003fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fe4:	69ba      	ldr	r2, [r7, #24]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f003 0303 	and.w	r3, r3, #3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d123      	bne.n	8004044 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003ffc:	69fb      	ldr	r3, [r7, #28]
 8003ffe:	08da      	lsrs	r2, r3, #3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	3208      	adds	r2, #8
 8004004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004008:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800400a:	69fb      	ldr	r3, [r7, #28]
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	220f      	movs	r2, #15
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	43db      	mvns	r3, r3
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	4013      	ands	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	691a      	ldr	r2, [r3, #16]
 8004024:	69fb      	ldr	r3, [r7, #28]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004036:	69fb      	ldr	r3, [r7, #28]
 8004038:	08da      	lsrs	r2, r3, #3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	3208      	adds	r2, #8
 800403e:	69b9      	ldr	r1, [r7, #24]
 8004040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	005b      	lsls	r3, r3, #1
 800404e:	2203      	movs	r2, #3
 8004050:	fa02 f303 	lsl.w	r3, r2, r3
 8004054:	43db      	mvns	r3, r3
 8004056:	69ba      	ldr	r2, [r7, #24]
 8004058:	4013      	ands	r3, r2
 800405a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f003 0203 	and.w	r2, r3, #3
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	005b      	lsls	r3, r3, #1
 8004068:	fa02 f303 	lsl.w	r3, r2, r3
 800406c:	69ba      	ldr	r2, [r7, #24]
 800406e:	4313      	orrs	r3, r2
 8004070:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69ba      	ldr	r2, [r7, #24]
 8004076:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80c0 	beq.w	8004206 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004086:	2300      	movs	r3, #0
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	4b66      	ldr	r3, [pc, #408]	@ (8004224 <HAL_GPIO_Init+0x324>)
 800408c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800408e:	4a65      	ldr	r2, [pc, #404]	@ (8004224 <HAL_GPIO_Init+0x324>)
 8004090:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004094:	6453      	str	r3, [r2, #68]	@ 0x44
 8004096:	4b63      	ldr	r3, [pc, #396]	@ (8004224 <HAL_GPIO_Init+0x324>)
 8004098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800409a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800409e:	60fb      	str	r3, [r7, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80040a2:	4a61      	ldr	r2, [pc, #388]	@ (8004228 <HAL_GPIO_Init+0x328>)
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	089b      	lsrs	r3, r3, #2
 80040a8:	3302      	adds	r3, #2
 80040aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80040ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040b0:	69fb      	ldr	r3, [r7, #28]
 80040b2:	f003 0303 	and.w	r3, r3, #3
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	220f      	movs	r2, #15
 80040ba:	fa02 f303 	lsl.w	r3, r2, r3
 80040be:	43db      	mvns	r3, r3
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4013      	ands	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a58      	ldr	r2, [pc, #352]	@ (800422c <HAL_GPIO_Init+0x32c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d037      	beq.n	800413e <HAL_GPIO_Init+0x23e>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a57      	ldr	r2, [pc, #348]	@ (8004230 <HAL_GPIO_Init+0x330>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d031      	beq.n	800413a <HAL_GPIO_Init+0x23a>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a56      	ldr	r2, [pc, #344]	@ (8004234 <HAL_GPIO_Init+0x334>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d02b      	beq.n	8004136 <HAL_GPIO_Init+0x236>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a55      	ldr	r2, [pc, #340]	@ (8004238 <HAL_GPIO_Init+0x338>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d025      	beq.n	8004132 <HAL_GPIO_Init+0x232>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a54      	ldr	r2, [pc, #336]	@ (800423c <HAL_GPIO_Init+0x33c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d01f      	beq.n	800412e <HAL_GPIO_Init+0x22e>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a53      	ldr	r2, [pc, #332]	@ (8004240 <HAL_GPIO_Init+0x340>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d019      	beq.n	800412a <HAL_GPIO_Init+0x22a>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a52      	ldr	r2, [pc, #328]	@ (8004244 <HAL_GPIO_Init+0x344>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d013      	beq.n	8004126 <HAL_GPIO_Init+0x226>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a51      	ldr	r2, [pc, #324]	@ (8004248 <HAL_GPIO_Init+0x348>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d00d      	beq.n	8004122 <HAL_GPIO_Init+0x222>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	4a50      	ldr	r2, [pc, #320]	@ (800424c <HAL_GPIO_Init+0x34c>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d007      	beq.n	800411e <HAL_GPIO_Init+0x21e>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	4a4f      	ldr	r2, [pc, #316]	@ (8004250 <HAL_GPIO_Init+0x350>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d101      	bne.n	800411a <HAL_GPIO_Init+0x21a>
 8004116:	2309      	movs	r3, #9
 8004118:	e012      	b.n	8004140 <HAL_GPIO_Init+0x240>
 800411a:	230a      	movs	r3, #10
 800411c:	e010      	b.n	8004140 <HAL_GPIO_Init+0x240>
 800411e:	2308      	movs	r3, #8
 8004120:	e00e      	b.n	8004140 <HAL_GPIO_Init+0x240>
 8004122:	2307      	movs	r3, #7
 8004124:	e00c      	b.n	8004140 <HAL_GPIO_Init+0x240>
 8004126:	2306      	movs	r3, #6
 8004128:	e00a      	b.n	8004140 <HAL_GPIO_Init+0x240>
 800412a:	2305      	movs	r3, #5
 800412c:	e008      	b.n	8004140 <HAL_GPIO_Init+0x240>
 800412e:	2304      	movs	r3, #4
 8004130:	e006      	b.n	8004140 <HAL_GPIO_Init+0x240>
 8004132:	2303      	movs	r3, #3
 8004134:	e004      	b.n	8004140 <HAL_GPIO_Init+0x240>
 8004136:	2302      	movs	r3, #2
 8004138:	e002      	b.n	8004140 <HAL_GPIO_Init+0x240>
 800413a:	2301      	movs	r3, #1
 800413c:	e000      	b.n	8004140 <HAL_GPIO_Init+0x240>
 800413e:	2300      	movs	r3, #0
 8004140:	69fa      	ldr	r2, [r7, #28]
 8004142:	f002 0203 	and.w	r2, r2, #3
 8004146:	0092      	lsls	r2, r2, #2
 8004148:	4093      	lsls	r3, r2
 800414a:	69ba      	ldr	r2, [r7, #24]
 800414c:	4313      	orrs	r3, r2
 800414e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004150:	4935      	ldr	r1, [pc, #212]	@ (8004228 <HAL_GPIO_Init+0x328>)
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	089b      	lsrs	r3, r3, #2
 8004156:	3302      	adds	r3, #2
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800415e:	4b3d      	ldr	r3, [pc, #244]	@ (8004254 <HAL_GPIO_Init+0x354>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	43db      	mvns	r3, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4013      	ands	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004182:	4a34      	ldr	r2, [pc, #208]	@ (8004254 <HAL_GPIO_Init+0x354>)
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004188:	4b32      	ldr	r3, [pc, #200]	@ (8004254 <HAL_GPIO_Init+0x354>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	43db      	mvns	r3, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041ac:	4a29      	ldr	r2, [pc, #164]	@ (8004254 <HAL_GPIO_Init+0x354>)
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80041b2:	4b28      	ldr	r3, [pc, #160]	@ (8004254 <HAL_GPIO_Init+0x354>)
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	43db      	mvns	r3, r3
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	4013      	ands	r3, r2
 80041c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80041c2:	683b      	ldr	r3, [r7, #0]
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041d6:	4a1f      	ldr	r2, [pc, #124]	@ (8004254 <HAL_GPIO_Init+0x354>)
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041dc:	4b1d      	ldr	r3, [pc, #116]	@ (8004254 <HAL_GPIO_Init+0x354>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	43db      	mvns	r3, r3
 80041e6:	69ba      	ldr	r2, [r7, #24]
 80041e8:	4013      	ands	r3, r2
 80041ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80041f8:	69ba      	ldr	r2, [r7, #24]
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004200:	4a14      	ldr	r2, [pc, #80]	@ (8004254 <HAL_GPIO_Init+0x354>)
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	3301      	adds	r3, #1
 800420a:	61fb      	str	r3, [r7, #28]
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	2b0f      	cmp	r3, #15
 8004210:	f67f ae84 	bls.w	8003f1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004214:	bf00      	nop
 8004216:	bf00      	nop
 8004218:	3724      	adds	r7, #36	@ 0x24
 800421a:	46bd      	mov	sp, r7
 800421c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004220:	4770      	bx	lr
 8004222:	bf00      	nop
 8004224:	40023800 	.word	0x40023800
 8004228:	40013800 	.word	0x40013800
 800422c:	40020000 	.word	0x40020000
 8004230:	40020400 	.word	0x40020400
 8004234:	40020800 	.word	0x40020800
 8004238:	40020c00 	.word	0x40020c00
 800423c:	40021000 	.word	0x40021000
 8004240:	40021400 	.word	0x40021400
 8004244:	40021800 	.word	0x40021800
 8004248:	40021c00 	.word	0x40021c00
 800424c:	40022000 	.word	0x40022000
 8004250:	40022400 	.word	0x40022400
 8004254:	40013c00 	.word	0x40013c00

08004258 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
 8004260:	460b      	mov	r3, r1
 8004262:	807b      	strh	r3, [r7, #2]
 8004264:	4613      	mov	r3, r2
 8004266:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004268:	787b      	ldrb	r3, [r7, #1]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d003      	beq.n	8004276 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800426e:	887a      	ldrh	r2, [r7, #2]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004274:	e003      	b.n	800427e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004276:	887b      	ldrh	r3, [r7, #2]
 8004278:	041a      	lsls	r2, r3, #16
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	619a      	str	r2, [r3, #24]
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
	...

0800428c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004296:	4b08      	ldr	r3, [pc, #32]	@ (80042b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	88fb      	ldrh	r3, [r7, #6]
 800429c:	4013      	ands	r3, r2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d006      	beq.n	80042b0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80042a2:	4a05      	ldr	r2, [pc, #20]	@ (80042b8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80042a4:	88fb      	ldrh	r3, [r7, #6]
 80042a6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80042a8:	88fb      	ldrh	r3, [r7, #6]
 80042aa:	4618      	mov	r0, r3
 80042ac:	f7fd f9e6 	bl	800167c <HAL_GPIO_EXTI_Callback>
  }
}
 80042b0:	bf00      	nop
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40013c00 	.word	0x40013c00

080042bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e12b      	b.n	8004526 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fc fdd0 	bl	8000e88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2224      	movs	r2, #36	@ 0x24
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	681a      	ldr	r2, [r3, #0]
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800430e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800431e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004320:	f001 fcb2 	bl	8005c88 <HAL_RCC_GetPCLK1Freq>
 8004324:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	4a81      	ldr	r2, [pc, #516]	@ (8004530 <HAL_I2C_Init+0x274>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d807      	bhi.n	8004340 <HAL_I2C_Init+0x84>
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	4a80      	ldr	r2, [pc, #512]	@ (8004534 <HAL_I2C_Init+0x278>)
 8004334:	4293      	cmp	r3, r2
 8004336:	bf94      	ite	ls
 8004338:	2301      	movls	r3, #1
 800433a:	2300      	movhi	r3, #0
 800433c:	b2db      	uxtb	r3, r3
 800433e:	e006      	b.n	800434e <HAL_I2C_Init+0x92>
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4a7d      	ldr	r2, [pc, #500]	@ (8004538 <HAL_I2C_Init+0x27c>)
 8004344:	4293      	cmp	r3, r2
 8004346:	bf94      	ite	ls
 8004348:	2301      	movls	r3, #1
 800434a:	2300      	movhi	r3, #0
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e0e7      	b.n	8004526 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	4a78      	ldr	r2, [pc, #480]	@ (800453c <HAL_I2C_Init+0x280>)
 800435a:	fba2 2303 	umull	r2, r3, r2, r3
 800435e:	0c9b      	lsrs	r3, r3, #18
 8004360:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	430a      	orrs	r2, r1
 8004374:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4a6a      	ldr	r2, [pc, #424]	@ (8004530 <HAL_I2C_Init+0x274>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d802      	bhi.n	8004390 <HAL_I2C_Init+0xd4>
 800438a:	68bb      	ldr	r3, [r7, #8]
 800438c:	3301      	adds	r3, #1
 800438e:	e009      	b.n	80043a4 <HAL_I2C_Init+0xe8>
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004396:	fb02 f303 	mul.w	r3, r2, r3
 800439a:	4a69      	ldr	r2, [pc, #420]	@ (8004540 <HAL_I2C_Init+0x284>)
 800439c:	fba2 2303 	umull	r2, r3, r2, r3
 80043a0:	099b      	lsrs	r3, r3, #6
 80043a2:	3301      	adds	r3, #1
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6812      	ldr	r2, [r2, #0]
 80043a8:	430b      	orrs	r3, r1
 80043aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80043b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	495c      	ldr	r1, [pc, #368]	@ (8004530 <HAL_I2C_Init+0x274>)
 80043c0:	428b      	cmp	r3, r1
 80043c2:	d819      	bhi.n	80043f8 <HAL_I2C_Init+0x13c>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	1e59      	subs	r1, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80043d2:	1c59      	adds	r1, r3, #1
 80043d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80043d8:	400b      	ands	r3, r1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00a      	beq.n	80043f4 <HAL_I2C_Init+0x138>
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	1e59      	subs	r1, r3, #1
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ec:	3301      	adds	r3, #1
 80043ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f2:	e051      	b.n	8004498 <HAL_I2C_Init+0x1dc>
 80043f4:	2304      	movs	r3, #4
 80043f6:	e04f      	b.n	8004498 <HAL_I2C_Init+0x1dc>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d111      	bne.n	8004424 <HAL_I2C_Init+0x168>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	1e58      	subs	r0, r3, #1
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6859      	ldr	r1, [r3, #4]
 8004408:	460b      	mov	r3, r1
 800440a:	005b      	lsls	r3, r3, #1
 800440c:	440b      	add	r3, r1
 800440e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004412:	3301      	adds	r3, #1
 8004414:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004418:	2b00      	cmp	r3, #0
 800441a:	bf0c      	ite	eq
 800441c:	2301      	moveq	r3, #1
 800441e:	2300      	movne	r3, #0
 8004420:	b2db      	uxtb	r3, r3
 8004422:	e012      	b.n	800444a <HAL_I2C_Init+0x18e>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	1e58      	subs	r0, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6859      	ldr	r1, [r3, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	0099      	lsls	r1, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	fbb0 f3f3 	udiv	r3, r0, r3
 800443a:	3301      	adds	r3, #1
 800443c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004440:	2b00      	cmp	r3, #0
 8004442:	bf0c      	ite	eq
 8004444:	2301      	moveq	r3, #1
 8004446:	2300      	movne	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	d001      	beq.n	8004452 <HAL_I2C_Init+0x196>
 800444e:	2301      	movs	r3, #1
 8004450:	e022      	b.n	8004498 <HAL_I2C_Init+0x1dc>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10e      	bne.n	8004478 <HAL_I2C_Init+0x1bc>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	1e58      	subs	r0, r3, #1
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6859      	ldr	r1, [r3, #4]
 8004462:	460b      	mov	r3, r1
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	440b      	add	r3, r1
 8004468:	fbb0 f3f3 	udiv	r3, r0, r3
 800446c:	3301      	adds	r3, #1
 800446e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004472:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004476:	e00f      	b.n	8004498 <HAL_I2C_Init+0x1dc>
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	1e58      	subs	r0, r3, #1
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6859      	ldr	r1, [r3, #4]
 8004480:	460b      	mov	r3, r1
 8004482:	009b      	lsls	r3, r3, #2
 8004484:	440b      	add	r3, r1
 8004486:	0099      	lsls	r1, r3, #2
 8004488:	440b      	add	r3, r1
 800448a:	fbb0 f3f3 	udiv	r3, r0, r3
 800448e:	3301      	adds	r3, #1
 8004490:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004494:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004498:	6879      	ldr	r1, [r7, #4]
 800449a:	6809      	ldr	r1, [r1, #0]
 800449c:	4313      	orrs	r3, r2
 800449e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69da      	ldr	r2, [r3, #28]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	430a      	orrs	r2, r1
 80044ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	689b      	ldr	r3, [r3, #8]
 80044c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80044c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6911      	ldr	r1, [r2, #16]
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	68d2      	ldr	r2, [r2, #12]
 80044d2:	4311      	orrs	r1, r2
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	6812      	ldr	r2, [r2, #0]
 80044d8:	430b      	orrs	r3, r1
 80044da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68db      	ldr	r3, [r3, #12]
 80044e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695a      	ldr	r2, [r3, #20]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	430a      	orrs	r2, r1
 80044f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f042 0201 	orr.w	r2, r2, #1
 8004506:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3710      	adds	r7, #16
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	000186a0 	.word	0x000186a0
 8004534:	001e847f 	.word	0x001e847f
 8004538:	003d08ff 	.word	0x003d08ff
 800453c:	431bde83 	.word	0x431bde83
 8004540:	10624dd3 	.word	0x10624dd3

08004544 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b088      	sub	sp, #32
 8004548:	af02      	add	r7, sp, #8
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	607a      	str	r2, [r7, #4]
 800454e:	461a      	mov	r2, r3
 8004550:	460b      	mov	r3, r1
 8004552:	817b      	strh	r3, [r7, #10]
 8004554:	4613      	mov	r3, r2
 8004556:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004558:	f7ff f88a 	bl	8003670 <HAL_GetTick>
 800455c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004564:	b2db      	uxtb	r3, r3
 8004566:	2b20      	cmp	r3, #32
 8004568:	f040 80e0 	bne.w	800472c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	9300      	str	r3, [sp, #0]
 8004570:	2319      	movs	r3, #25
 8004572:	2201      	movs	r2, #1
 8004574:	4970      	ldr	r1, [pc, #448]	@ (8004738 <HAL_I2C_Master_Transmit+0x1f4>)
 8004576:	68f8      	ldr	r0, [r7, #12]
 8004578:	f000 fc64 	bl	8004e44 <I2C_WaitOnFlagUntilTimeout>
 800457c:	4603      	mov	r3, r0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d001      	beq.n	8004586 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004582:	2302      	movs	r3, #2
 8004584:	e0d3      	b.n	800472e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800458c:	2b01      	cmp	r3, #1
 800458e:	d101      	bne.n	8004594 <HAL_I2C_Master_Transmit+0x50>
 8004590:	2302      	movs	r3, #2
 8004592:	e0cc      	b.n	800472e <HAL_I2C_Master_Transmit+0x1ea>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0301 	and.w	r3, r3, #1
 80045a6:	2b01      	cmp	r3, #1
 80045a8:	d007      	beq.n	80045ba <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80045c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2221      	movs	r2, #33	@ 0x21
 80045ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2210      	movs	r2, #16
 80045d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	893a      	ldrh	r2, [r7, #8]
 80045ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	4a50      	ldr	r2, [pc, #320]	@ (800473c <HAL_I2C_Master_Transmit+0x1f8>)
 80045fa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045fc:	8979      	ldrh	r1, [r7, #10]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	6a3a      	ldr	r2, [r7, #32]
 8004602:	68f8      	ldr	r0, [r7, #12]
 8004604:	f000 face 	bl	8004ba4 <I2C_MasterRequestWrite>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d001      	beq.n	8004612 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800460e:	2301      	movs	r3, #1
 8004610:	e08d      	b.n	800472e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004612:	2300      	movs	r3, #0
 8004614:	613b      	str	r3, [r7, #16]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	695b      	ldr	r3, [r3, #20]
 800461c:	613b      	str	r3, [r7, #16]
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004628:	e066      	b.n	80046f8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	6a39      	ldr	r1, [r7, #32]
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 fd22 	bl	8005078 <I2C_WaitOnTXEFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00d      	beq.n	8004656 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463e:	2b04      	cmp	r3, #4
 8004640:	d107      	bne.n	8004652 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004650:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e06b      	b.n	800472e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800465a:	781a      	ldrb	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004666:	1c5a      	adds	r2, r3, #1
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004670:	b29b      	uxth	r3, r3
 8004672:	3b01      	subs	r3, #1
 8004674:	b29a      	uxth	r2, r3
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800467e:	3b01      	subs	r3, #1
 8004680:	b29a      	uxth	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	f003 0304 	and.w	r3, r3, #4
 8004690:	2b04      	cmp	r3, #4
 8004692:	d11b      	bne.n	80046cc <HAL_I2C_Master_Transmit+0x188>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004698:	2b00      	cmp	r3, #0
 800469a:	d017      	beq.n	80046cc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	781a      	ldrb	r2, [r3, #0]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	6a39      	ldr	r1, [r7, #32]
 80046d0:	68f8      	ldr	r0, [r7, #12]
 80046d2:	f000 fd19 	bl	8005108 <I2C_WaitOnBTFFlagUntilTimeout>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d00d      	beq.n	80046f8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e0:	2b04      	cmp	r3, #4
 80046e2:	d107      	bne.n	80046f4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80046f2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046f4:	2301      	movs	r3, #1
 80046f6:	e01a      	b.n	800472e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d194      	bne.n	800462a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800470e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2220      	movs	r2, #32
 8004714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004728:	2300      	movs	r3, #0
 800472a:	e000      	b.n	800472e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800472c:	2302      	movs	r3, #2
  }
}
 800472e:	4618      	mov	r0, r3
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	00100002 	.word	0x00100002
 800473c:	ffff0000 	.word	0xffff0000

08004740 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b08c      	sub	sp, #48	@ 0x30
 8004744:	af02      	add	r7, sp, #8
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	607a      	str	r2, [r7, #4]
 800474a:	461a      	mov	r2, r3
 800474c:	460b      	mov	r3, r1
 800474e:	817b      	strh	r3, [r7, #10]
 8004750:	4613      	mov	r3, r2
 8004752:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004754:	f7fe ff8c 	bl	8003670 <HAL_GetTick>
 8004758:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b20      	cmp	r3, #32
 8004764:	f040 8217 	bne.w	8004b96 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800476a:	9300      	str	r3, [sp, #0]
 800476c:	2319      	movs	r3, #25
 800476e:	2201      	movs	r2, #1
 8004770:	497c      	ldr	r1, [pc, #496]	@ (8004964 <HAL_I2C_Master_Receive+0x224>)
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 fb66 	bl	8004e44 <I2C_WaitOnFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800477e:	2302      	movs	r3, #2
 8004780:	e20a      	b.n	8004b98 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_I2C_Master_Receive+0x50>
 800478c:	2302      	movs	r3, #2
 800478e:	e203      	b.n	8004b98 <HAL_I2C_Master_Receive+0x458>
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d007      	beq.n	80047b6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	681a      	ldr	r2, [r3, #0]
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f042 0201 	orr.w	r2, r2, #1
 80047b4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80047c4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	2222      	movs	r2, #34	@ 0x22
 80047ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2210      	movs	r2, #16
 80047d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	2200      	movs	r2, #0
 80047da:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	893a      	ldrh	r2, [r7, #8]
 80047e6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	4a5c      	ldr	r2, [pc, #368]	@ (8004968 <HAL_I2C_Master_Receive+0x228>)
 80047f6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80047f8:	8979      	ldrh	r1, [r7, #10]
 80047fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f000 fa52 	bl	8004ca8 <I2C_MasterRequestRead>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d001      	beq.n	800480e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e1c4      	b.n	8004b98 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004812:	2b00      	cmp	r3, #0
 8004814:	d113      	bne.n	800483e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004816:	2300      	movs	r3, #0
 8004818:	623b      	str	r3, [r7, #32]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	623b      	str	r3, [r7, #32]
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	623b      	str	r3, [r7, #32]
 800482a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e198      	b.n	8004b70 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004842:	2b01      	cmp	r3, #1
 8004844:	d11b      	bne.n	800487e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004854:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004856:	2300      	movs	r3, #0
 8004858:	61fb      	str	r3, [r7, #28]
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	695b      	ldr	r3, [r3, #20]
 8004860:	61fb      	str	r3, [r7, #28]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	699b      	ldr	r3, [r3, #24]
 8004868:	61fb      	str	r3, [r7, #28]
 800486a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	e178      	b.n	8004b70 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004882:	2b02      	cmp	r3, #2
 8004884:	d11b      	bne.n	80048be <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	681a      	ldr	r2, [r3, #0]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004894:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	681a      	ldr	r2, [r3, #0]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80048a4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048a6:	2300      	movs	r3, #0
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695b      	ldr	r3, [r3, #20]
 80048b0:	61bb      	str	r3, [r7, #24]
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	699b      	ldr	r3, [r3, #24]
 80048b8:	61bb      	str	r3, [r7, #24]
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	e158      	b.n	8004b70 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681a      	ldr	r2, [r3, #0]
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80048cc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ce:	2300      	movs	r3, #0
 80048d0:	617b      	str	r3, [r7, #20]
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80048e4:	e144      	b.n	8004b70 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048ea:	2b03      	cmp	r3, #3
 80048ec:	f200 80f1 	bhi.w	8004ad2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d123      	bne.n	8004940 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80048f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 fc4b 	bl	8005198 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d001      	beq.n	800490c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e145      	b.n	8004b98 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004916:	b2d2      	uxtb	r2, r2
 8004918:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800491e:	1c5a      	adds	r2, r3, #1
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004934:	b29b      	uxth	r3, r3
 8004936:	3b01      	subs	r3, #1
 8004938:	b29a      	uxth	r2, r3
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800493e:	e117      	b.n	8004b70 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004944:	2b02      	cmp	r3, #2
 8004946:	d14e      	bne.n	80049e6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800494a:	9300      	str	r3, [sp, #0]
 800494c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800494e:	2200      	movs	r2, #0
 8004950:	4906      	ldr	r1, [pc, #24]	@ (800496c <HAL_I2C_Master_Receive+0x22c>)
 8004952:	68f8      	ldr	r0, [r7, #12]
 8004954:	f000 fa76 	bl	8004e44 <I2C_WaitOnFlagUntilTimeout>
 8004958:	4603      	mov	r3, r0
 800495a:	2b00      	cmp	r3, #0
 800495c:	d008      	beq.n	8004970 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e11a      	b.n	8004b98 <HAL_I2C_Master_Receive+0x458>
 8004962:	bf00      	nop
 8004964:	00100002 	.word	0x00100002
 8004968:	ffff0000 	.word	0xffff0000
 800496c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800497e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	691a      	ldr	r2, [r3, #16]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049bc:	b2d2      	uxtb	r2, r2
 80049be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c4:	1c5a      	adds	r2, r3, #1
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049ce:	3b01      	subs	r3, #1
 80049d0:	b29a      	uxth	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80049e4:	e0c4      	b.n	8004b70 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e8:	9300      	str	r3, [sp, #0]
 80049ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80049ec:	2200      	movs	r2, #0
 80049ee:	496c      	ldr	r1, [pc, #432]	@ (8004ba0 <HAL_I2C_Master_Receive+0x460>)
 80049f0:	68f8      	ldr	r0, [r7, #12]
 80049f2:	f000 fa27 	bl	8004e44 <I2C_WaitOnFlagUntilTimeout>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d001      	beq.n	8004a00 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e0cb      	b.n	8004b98 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	681a      	ldr	r2, [r3, #0]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	691a      	ldr	r2, [r3, #16]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1a:	b2d2      	uxtb	r2, r2
 8004a1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a22:	1c5a      	adds	r2, r3, #1
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	b29a      	uxth	r2, r3
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004a42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a48:	2200      	movs	r2, #0
 8004a4a:	4955      	ldr	r1, [pc, #340]	@ (8004ba0 <HAL_I2C_Master_Receive+0x460>)
 8004a4c:	68f8      	ldr	r0, [r7, #12]
 8004a4e:	f000 f9f9 	bl	8004e44 <I2C_WaitOnFlagUntilTimeout>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d001      	beq.n	8004a5c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004a58:	2301      	movs	r3, #1
 8004a5a:	e09d      	b.n	8004b98 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	691a      	ldr	r2, [r3, #16]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a76:	b2d2      	uxtb	r2, r2
 8004a78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	1c5a      	adds	r2, r3, #1
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a88:	3b01      	subs	r3, #1
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	3b01      	subs	r3, #1
 8004a98:	b29a      	uxth	r2, r3
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004aa8:	b2d2      	uxtb	r2, r2
 8004aaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aba:	3b01      	subs	r3, #1
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	3b01      	subs	r3, #1
 8004aca:	b29a      	uxth	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004ad0:	e04e      	b.n	8004b70 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 fb5e 	bl	8005198 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e058      	b.n	8004b98 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af0:	b2d2      	uxtb	r2, r2
 8004af2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b02:	3b01      	subs	r3, #1
 8004b04:	b29a      	uxth	r2, r3
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	3b01      	subs	r3, #1
 8004b12:	b29a      	uxth	r2, r3
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	f003 0304 	and.w	r3, r3, #4
 8004b22:	2b04      	cmp	r3, #4
 8004b24:	d124      	bne.n	8004b70 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b2a:	2b03      	cmp	r3, #3
 8004b2c:	d107      	bne.n	8004b3e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b3c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	691a      	ldr	r2, [r3, #16]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b48:	b2d2      	uxtb	r2, r2
 8004b4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b50:	1c5a      	adds	r2, r3, #1
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b5a:	3b01      	subs	r3, #1
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f47f aeb6 	bne.w	80048e6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b92:	2300      	movs	r3, #0
 8004b94:	e000      	b.n	8004b98 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004b96:	2302      	movs	r3, #2
  }
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3728      	adds	r7, #40	@ 0x28
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	00010004 	.word	0x00010004

08004ba4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b088      	sub	sp, #32
 8004ba8:	af02      	add	r7, sp, #8
 8004baa:	60f8      	str	r0, [r7, #12]
 8004bac:	607a      	str	r2, [r7, #4]
 8004bae:	603b      	str	r3, [r7, #0]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2b08      	cmp	r3, #8
 8004bbe:	d006      	beq.n	8004bce <I2C_MasterRequestWrite+0x2a>
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d003      	beq.n	8004bce <I2C_MasterRequestWrite+0x2a>
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004bcc:	d108      	bne.n	8004be0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bdc:	601a      	str	r2, [r3, #0]
 8004bde:	e00b      	b.n	8004bf8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004be4:	2b12      	cmp	r3, #18
 8004be6:	d107      	bne.n	8004bf8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bf6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	9300      	str	r3, [sp, #0]
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c04:	68f8      	ldr	r0, [r7, #12]
 8004c06:	f000 f91d 	bl	8004e44 <I2C_WaitOnFlagUntilTimeout>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00d      	beq.n	8004c2c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c1a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c1e:	d103      	bne.n	8004c28 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004c26:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004c28:	2303      	movs	r3, #3
 8004c2a:	e035      	b.n	8004c98 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004c34:	d108      	bne.n	8004c48 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004c36:	897b      	ldrh	r3, [r7, #10]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004c44:	611a      	str	r2, [r3, #16]
 8004c46:	e01b      	b.n	8004c80 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004c48:	897b      	ldrh	r3, [r7, #10]
 8004c4a:	11db      	asrs	r3, r3, #7
 8004c4c:	b2db      	uxtb	r3, r3
 8004c4e:	f003 0306 	and.w	r3, r3, #6
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	f063 030f 	orn	r3, r3, #15
 8004c58:	b2da      	uxtb	r2, r3
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	490e      	ldr	r1, [pc, #56]	@ (8004ca0 <I2C_MasterRequestWrite+0xfc>)
 8004c66:	68f8      	ldr	r0, [r7, #12]
 8004c68:	f000 f966 	bl	8004f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e010      	b.n	8004c98 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004c76:	897b      	ldrh	r3, [r7, #10]
 8004c78:	b2da      	uxtb	r2, r3
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	4907      	ldr	r1, [pc, #28]	@ (8004ca4 <I2C_MasterRequestWrite+0x100>)
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 f956 	bl	8004f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d001      	beq.n	8004c96 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}
 8004ca0:	00010008 	.word	0x00010008
 8004ca4:	00010002 	.word	0x00010002

08004ca8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b088      	sub	sp, #32
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	607a      	str	r2, [r7, #4]
 8004cb2:	603b      	str	r3, [r7, #0]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cbc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004ccc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	2b08      	cmp	r3, #8
 8004cd2:	d006      	beq.n	8004ce2 <I2C_MasterRequestRead+0x3a>
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d003      	beq.n	8004ce2 <I2C_MasterRequestRead+0x3a>
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004ce0:	d108      	bne.n	8004cf4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004cf0:	601a      	str	r2, [r3, #0]
 8004cf2:	e00b      	b.n	8004d0c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cf8:	2b11      	cmp	r3, #17
 8004cfa:	d107      	bne.n	8004d0c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004d0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f000 f893 	bl	8004e44 <I2C_WaitOnFlagUntilTimeout>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d00d      	beq.n	8004d40 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d32:	d103      	bne.n	8004d3c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004d3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e079      	b.n	8004e34 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	691b      	ldr	r3, [r3, #16]
 8004d44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d48:	d108      	bne.n	8004d5c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004d4a:	897b      	ldrh	r3, [r7, #10]
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	f043 0301 	orr.w	r3, r3, #1
 8004d52:	b2da      	uxtb	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	611a      	str	r2, [r3, #16]
 8004d5a:	e05f      	b.n	8004e1c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004d5c:	897b      	ldrh	r3, [r7, #10]
 8004d5e:	11db      	asrs	r3, r3, #7
 8004d60:	b2db      	uxtb	r3, r3
 8004d62:	f003 0306 	and.w	r3, r3, #6
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	f063 030f 	orn	r3, r3, #15
 8004d6c:	b2da      	uxtb	r2, r3
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	4930      	ldr	r1, [pc, #192]	@ (8004e3c <I2C_MasterRequestRead+0x194>)
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f8dc 	bl	8004f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d001      	beq.n	8004d8a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e054      	b.n	8004e34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004d8a:	897b      	ldrh	r3, [r7, #10]
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	4929      	ldr	r1, [pc, #164]	@ (8004e40 <I2C_MasterRequestRead+0x198>)
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f000 f8cc 	bl	8004f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004da0:	4603      	mov	r3, r0
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e044      	b.n	8004e34 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004daa:	2300      	movs	r3, #0
 8004dac:	613b      	str	r3, [r7, #16]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	613b      	str	r3, [r7, #16]
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	613b      	str	r3, [r7, #16]
 8004dbe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004dce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f000 f831 	bl	8004e44 <I2C_WaitOnFlagUntilTimeout>
 8004de2:	4603      	mov	r3, r0
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d00d      	beq.n	8004e04 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004df2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004df6:	d103      	bne.n	8004e00 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dfe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e017      	b.n	8004e34 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004e04:	897b      	ldrh	r3, [r7, #10]
 8004e06:	11db      	asrs	r3, r3, #7
 8004e08:	b2db      	uxtb	r3, r3
 8004e0a:	f003 0306 	and.w	r3, r3, #6
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	f063 030e 	orn	r3, r3, #14
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	4907      	ldr	r1, [pc, #28]	@ (8004e40 <I2C_MasterRequestRead+0x198>)
 8004e22:	68f8      	ldr	r0, [r7, #12]
 8004e24:	f000 f888 	bl	8004f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d001      	beq.n	8004e32 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e000      	b.n	8004e34 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3718      	adds	r7, #24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	00010008 	.word	0x00010008
 8004e40:	00010002 	.word	0x00010002

08004e44 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	60f8      	str	r0, [r7, #12]
 8004e4c:	60b9      	str	r1, [r7, #8]
 8004e4e:	603b      	str	r3, [r7, #0]
 8004e50:	4613      	mov	r3, r2
 8004e52:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e54:	e048      	b.n	8004ee8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d044      	beq.n	8004ee8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5e:	f7fe fc07 	bl	8003670 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	683a      	ldr	r2, [r7, #0]
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d302      	bcc.n	8004e74 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d139      	bne.n	8004ee8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	0c1b      	lsrs	r3, r3, #16
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	2b01      	cmp	r3, #1
 8004e7c:	d10d      	bne.n	8004e9a <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	695b      	ldr	r3, [r3, #20]
 8004e84:	43da      	mvns	r2, r3
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	bf0c      	ite	eq
 8004e90:	2301      	moveq	r3, #1
 8004e92:	2300      	movne	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	461a      	mov	r2, r3
 8004e98:	e00c      	b.n	8004eb4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	43da      	mvns	r2, r3
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	bf0c      	ite	eq
 8004eac:	2301      	moveq	r3, #1
 8004eae:	2300      	movne	r3, #0
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	461a      	mov	r2, r3
 8004eb4:	79fb      	ldrb	r3, [r7, #7]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d116      	bne.n	8004ee8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	2220      	movs	r2, #32
 8004ec4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ed4:	f043 0220 	orr.w	r2, r3, #32
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e023      	b.n	8004f30 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	0c1b      	lsrs	r3, r3, #16
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d10d      	bne.n	8004f0e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	695b      	ldr	r3, [r3, #20]
 8004ef8:	43da      	mvns	r2, r3
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	4013      	ands	r3, r2
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	bf0c      	ite	eq
 8004f04:	2301      	moveq	r3, #1
 8004f06:	2300      	movne	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	e00c      	b.n	8004f28 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	699b      	ldr	r3, [r3, #24]
 8004f14:	43da      	mvns	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	4013      	ands	r3, r2
 8004f1a:	b29b      	uxth	r3, r3
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	bf0c      	ite	eq
 8004f20:	2301      	moveq	r3, #1
 8004f22:	2300      	movne	r3, #0
 8004f24:	b2db      	uxtb	r3, r3
 8004f26:	461a      	mov	r2, r3
 8004f28:	79fb      	ldrb	r3, [r7, #7]
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d093      	beq.n	8004e56 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f2e:	2300      	movs	r3, #0
}
 8004f30:	4618      	mov	r0, r3
 8004f32:	3710      	adds	r7, #16
 8004f34:	46bd      	mov	sp, r7
 8004f36:	bd80      	pop	{r7, pc}

08004f38 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	60f8      	str	r0, [r7, #12]
 8004f40:	60b9      	str	r1, [r7, #8]
 8004f42:	607a      	str	r2, [r7, #4]
 8004f44:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f46:	e071      	b.n	800502c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	695b      	ldr	r3, [r3, #20]
 8004f4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f56:	d123      	bne.n	8004fa0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	681a      	ldr	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f66:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f70:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f8c:	f043 0204 	orr.w	r2, r3, #4
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e067      	b.n	8005070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa6:	d041      	beq.n	800502c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fa8:	f7fe fb62 	bl	8003670 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d302      	bcc.n	8004fbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d136      	bne.n	800502c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	0c1b      	lsrs	r3, r3, #16
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d10c      	bne.n	8004fe2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	695b      	ldr	r3, [r3, #20]
 8004fce:	43da      	mvns	r2, r3
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	bf14      	ite	ne
 8004fda:	2301      	movne	r3, #1
 8004fdc:	2300      	moveq	r3, #0
 8004fde:	b2db      	uxtb	r3, r3
 8004fe0:	e00b      	b.n	8004ffa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	699b      	ldr	r3, [r3, #24]
 8004fe8:	43da      	mvns	r2, r3
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	4013      	ands	r3, r2
 8004fee:	b29b      	uxth	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	bf14      	ite	ne
 8004ff4:	2301      	movne	r3, #1
 8004ff6:	2300      	moveq	r3, #0
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d016      	beq.n	800502c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2200      	movs	r2, #0
 8005002:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2220      	movs	r2, #32
 8005008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2200      	movs	r2, #0
 8005010:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005018:	f043 0220 	orr.w	r2, r3, #32
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	2200      	movs	r2, #0
 8005024:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e021      	b.n	8005070 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	0c1b      	lsrs	r3, r3, #16
 8005030:	b2db      	uxtb	r3, r3
 8005032:	2b01      	cmp	r3, #1
 8005034:	d10c      	bne.n	8005050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	695b      	ldr	r3, [r3, #20]
 800503c:	43da      	mvns	r2, r3
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	4013      	ands	r3, r2
 8005042:	b29b      	uxth	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	bf14      	ite	ne
 8005048:	2301      	movne	r3, #1
 800504a:	2300      	moveq	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	e00b      	b.n	8005068 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	43da      	mvns	r2, r3
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4013      	ands	r3, r2
 800505c:	b29b      	uxth	r3, r3
 800505e:	2b00      	cmp	r3, #0
 8005060:	bf14      	ite	ne
 8005062:	2301      	movne	r3, #1
 8005064:	2300      	moveq	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	2b00      	cmp	r3, #0
 800506a:	f47f af6d 	bne.w	8004f48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	60b9      	str	r1, [r7, #8]
 8005082:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005084:	e034      	b.n	80050f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005086:	68f8      	ldr	r0, [r7, #12]
 8005088:	f000 f8e3 	bl	8005252 <I2C_IsAcknowledgeFailed>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d001      	beq.n	8005096 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e034      	b.n	8005100 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800509c:	d028      	beq.n	80050f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800509e:	f7fe fae7 	bl	8003670 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d302      	bcc.n	80050b4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d11d      	bne.n	80050f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050be:	2b80      	cmp	r3, #128	@ 0x80
 80050c0:	d016      	beq.n	80050f0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	2200      	movs	r2, #0
 80050c6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2220      	movs	r2, #32
 80050cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	2200      	movs	r2, #0
 80050d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050dc:	f043 0220 	orr.w	r2, r3, #32
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2200      	movs	r2, #0
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	e007      	b.n	8005100 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	695b      	ldr	r3, [r3, #20]
 80050f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050fa:	2b80      	cmp	r3, #128	@ 0x80
 80050fc:	d1c3      	bne.n	8005086 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050fe:	2300      	movs	r3, #0
}
 8005100:	4618      	mov	r0, r3
 8005102:	3710      	adds	r7, #16
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}

08005108 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b084      	sub	sp, #16
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	60b9      	str	r1, [r7, #8]
 8005112:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005114:	e034      	b.n	8005180 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005116:	68f8      	ldr	r0, [r7, #12]
 8005118:	f000 f89b 	bl	8005252 <I2C_IsAcknowledgeFailed>
 800511c:	4603      	mov	r3, r0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d001      	beq.n	8005126 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e034      	b.n	8005190 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512c:	d028      	beq.n	8005180 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800512e:	f7fe fa9f 	bl	8003670 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	429a      	cmp	r2, r3
 800513c:	d302      	bcc.n	8005144 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d11d      	bne.n	8005180 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b04      	cmp	r3, #4
 8005150:	d016      	beq.n	8005180 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516c:	f043 0220 	orr.w	r2, r3, #32
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e007      	b.n	8005190 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	695b      	ldr	r3, [r3, #20]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b04      	cmp	r3, #4
 800518c:	d1c3      	bne.n	8005116 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3710      	adds	r7, #16
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}

08005198 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b084      	sub	sp, #16
 800519c:	af00      	add	r7, sp, #0
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	60b9      	str	r1, [r7, #8]
 80051a2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80051a4:	e049      	b.n	800523a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f003 0310 	and.w	r3, r3, #16
 80051b0:	2b10      	cmp	r3, #16
 80051b2:	d119      	bne.n	80051e8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0210 	mvn.w	r2, #16
 80051bc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	2200      	movs	r2, #0
 80051c2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2220      	movs	r2, #32
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e030      	b.n	800524a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051e8:	f7fe fa42 	bl	8003670 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	68ba      	ldr	r2, [r7, #8]
 80051f4:	429a      	cmp	r2, r3
 80051f6:	d302      	bcc.n	80051fe <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051f8:	68bb      	ldr	r3, [r7, #8]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d11d      	bne.n	800523a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	695b      	ldr	r3, [r3, #20]
 8005204:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005208:	2b40      	cmp	r3, #64	@ 0x40
 800520a:	d016      	beq.n	800523a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	2220      	movs	r2, #32
 8005216:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005226:	f043 0220 	orr.w	r2, r3, #32
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e007      	b.n	800524a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	695b      	ldr	r3, [r3, #20]
 8005240:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005244:	2b40      	cmp	r3, #64	@ 0x40
 8005246:	d1ae      	bne.n	80051a6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	3710      	adds	r7, #16
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005252:	b480      	push	{r7}
 8005254:	b083      	sub	sp, #12
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	695b      	ldr	r3, [r3, #20]
 8005260:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005264:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005268:	d11b      	bne.n	80052a2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005272:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800528e:	f043 0204 	orr.w	r2, r3, #4
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e000      	b.n	80052a4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b083      	sub	sp, #12
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	d129      	bne.n	800531a <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2224      	movs	r2, #36	@ 0x24
 80052ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f022 0201 	bic.w	r2, r2, #1
 80052dc:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f022 0210 	bic.w	r2, r2, #16
 80052ec:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	683a      	ldr	r2, [r7, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f042 0201 	orr.w	r2, r2, #1
 800530c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2220      	movs	r2, #32
 8005312:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005316:	2300      	movs	r3, #0
 8005318:	e000      	b.n	800531c <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800531a:	2302      	movs	r3, #2
  }
}
 800531c:	4618      	mov	r0, r3
 800531e:	370c      	adds	r7, #12
 8005320:	46bd      	mov	sp, r7
 8005322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005326:	4770      	bx	lr

08005328 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005332:	2300      	movs	r3, #0
 8005334:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800533c:	b2db      	uxtb	r3, r3
 800533e:	2b20      	cmp	r3, #32
 8005340:	d12a      	bne.n	8005398 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2224      	movs	r2, #36	@ 0x24
 8005346:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681a      	ldr	r2, [r3, #0]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0201 	bic.w	r2, r2, #1
 8005358:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005360:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005362:	89fb      	ldrh	r3, [r7, #14]
 8005364:	f023 030f 	bic.w	r3, r3, #15
 8005368:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	b29a      	uxth	r2, r3
 800536e:	89fb      	ldrh	r3, [r7, #14]
 8005370:	4313      	orrs	r3, r2
 8005372:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	89fa      	ldrh	r2, [r7, #14]
 800537a:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f042 0201 	orr.w	r2, r2, #1
 800538a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2220      	movs	r2, #32
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	e000      	b.n	800539a <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005398:	2302      	movs	r3, #2
  }
}
 800539a:	4618      	mov	r0, r3
 800539c:	3714      	adds	r7, #20
 800539e:	46bd      	mov	sp, r7
 80053a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a4:	4770      	bx	lr
	...

080053a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d101      	bne.n	80053ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053b6:	2301      	movs	r3, #1
 80053b8:	e267      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0301 	and.w	r3, r3, #1
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d075      	beq.n	80054b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053c6:	4b88      	ldr	r3, [pc, #544]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 030c 	and.w	r3, r3, #12
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d00c      	beq.n	80053ec <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053d2:	4b85      	ldr	r3, [pc, #532]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80053d4:	689b      	ldr	r3, [r3, #8]
 80053d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80053da:	2b08      	cmp	r3, #8
 80053dc:	d112      	bne.n	8005404 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053de:	4b82      	ldr	r3, [pc, #520]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80053e6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80053ea:	d10b      	bne.n	8005404 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ec:	4b7e      	ldr	r3, [pc, #504]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d05b      	beq.n	80054b0 <HAL_RCC_OscConfig+0x108>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d157      	bne.n	80054b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005400:	2301      	movs	r3, #1
 8005402:	e242      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800540c:	d106      	bne.n	800541c <HAL_RCC_OscConfig+0x74>
 800540e:	4b76      	ldr	r3, [pc, #472]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	4a75      	ldr	r2, [pc, #468]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005414:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005418:	6013      	str	r3, [r2, #0]
 800541a:	e01d      	b.n	8005458 <HAL_RCC_OscConfig+0xb0>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	685b      	ldr	r3, [r3, #4]
 8005420:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005424:	d10c      	bne.n	8005440 <HAL_RCC_OscConfig+0x98>
 8005426:	4b70      	ldr	r3, [pc, #448]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a6f      	ldr	r2, [pc, #444]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 800542c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005430:	6013      	str	r3, [r2, #0]
 8005432:	4b6d      	ldr	r3, [pc, #436]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a6c      	ldr	r2, [pc, #432]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005438:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	e00b      	b.n	8005458 <HAL_RCC_OscConfig+0xb0>
 8005440:	4b69      	ldr	r3, [pc, #420]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a68      	ldr	r2, [pc, #416]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005446:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	4b66      	ldr	r3, [pc, #408]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a65      	ldr	r2, [pc, #404]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005452:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005456:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d013      	beq.n	8005488 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005460:	f7fe f906 	bl	8003670 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005468:	f7fe f902 	bl	8003670 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b64      	cmp	r3, #100	@ 0x64
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e207      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800547a:	4b5b      	ldr	r3, [pc, #364]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d0f0      	beq.n	8005468 <HAL_RCC_OscConfig+0xc0>
 8005486:	e014      	b.n	80054b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005488:	f7fe f8f2 	bl	8003670 <HAL_GetTick>
 800548c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800548e:	e008      	b.n	80054a2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005490:	f7fe f8ee 	bl	8003670 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	693b      	ldr	r3, [r7, #16]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	2b64      	cmp	r3, #100	@ 0x64
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e1f3      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054a2:	4b51      	ldr	r3, [pc, #324]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d1f0      	bne.n	8005490 <HAL_RCC_OscConfig+0xe8>
 80054ae:	e000      	b.n	80054b2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0302 	and.w	r3, r3, #2
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d063      	beq.n	8005586 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054be:	4b4a      	ldr	r3, [pc, #296]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	f003 030c 	and.w	r3, r3, #12
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00b      	beq.n	80054e2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ca:	4b47      	ldr	r3, [pc, #284]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80054d2:	2b08      	cmp	r3, #8
 80054d4:	d11c      	bne.n	8005510 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054d6:	4b44      	ldr	r3, [pc, #272]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80054d8:	685b      	ldr	r3, [r3, #4]
 80054da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d116      	bne.n	8005510 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054e2:	4b41      	ldr	r3, [pc, #260]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0302 	and.w	r3, r3, #2
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d005      	beq.n	80054fa <HAL_RCC_OscConfig+0x152>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	68db      	ldr	r3, [r3, #12]
 80054f2:	2b01      	cmp	r3, #1
 80054f4:	d001      	beq.n	80054fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e1c7      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054fa:	4b3b      	ldr	r3, [pc, #236]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	691b      	ldr	r3, [r3, #16]
 8005506:	00db      	lsls	r3, r3, #3
 8005508:	4937      	ldr	r1, [pc, #220]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 800550a:	4313      	orrs	r3, r2
 800550c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800550e:	e03a      	b.n	8005586 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d020      	beq.n	800555a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005518:	4b34      	ldr	r3, [pc, #208]	@ (80055ec <HAL_RCC_OscConfig+0x244>)
 800551a:	2201      	movs	r2, #1
 800551c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800551e:	f7fe f8a7 	bl	8003670 <HAL_GetTick>
 8005522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005524:	e008      	b.n	8005538 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005526:	f7fe f8a3 	bl	8003670 <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	2b02      	cmp	r3, #2
 8005532:	d901      	bls.n	8005538 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005534:	2303      	movs	r3, #3
 8005536:	e1a8      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005538:	4b2b      	ldr	r3, [pc, #172]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f003 0302 	and.w	r3, r3, #2
 8005540:	2b00      	cmp	r3, #0
 8005542:	d0f0      	beq.n	8005526 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005544:	4b28      	ldr	r3, [pc, #160]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	691b      	ldr	r3, [r3, #16]
 8005550:	00db      	lsls	r3, r3, #3
 8005552:	4925      	ldr	r1, [pc, #148]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 8005554:	4313      	orrs	r3, r2
 8005556:	600b      	str	r3, [r1, #0]
 8005558:	e015      	b.n	8005586 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800555a:	4b24      	ldr	r3, [pc, #144]	@ (80055ec <HAL_RCC_OscConfig+0x244>)
 800555c:	2200      	movs	r2, #0
 800555e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005560:	f7fe f886 	bl	8003670 <HAL_GetTick>
 8005564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005566:	e008      	b.n	800557a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005568:	f7fe f882 	bl	8003670 <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	2b02      	cmp	r3, #2
 8005574:	d901      	bls.n	800557a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005576:	2303      	movs	r3, #3
 8005578:	e187      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800557a:	4b1b      	ldr	r3, [pc, #108]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0302 	and.w	r3, r3, #2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d1f0      	bne.n	8005568 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f003 0308 	and.w	r3, r3, #8
 800558e:	2b00      	cmp	r3, #0
 8005590:	d036      	beq.n	8005600 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	695b      	ldr	r3, [r3, #20]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d016      	beq.n	80055c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800559a:	4b15      	ldr	r3, [pc, #84]	@ (80055f0 <HAL_RCC_OscConfig+0x248>)
 800559c:	2201      	movs	r2, #1
 800559e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055a0:	f7fe f866 	bl	8003670 <HAL_GetTick>
 80055a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055a6:	e008      	b.n	80055ba <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055a8:	f7fe f862 	bl	8003670 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b02      	cmp	r3, #2
 80055b4:	d901      	bls.n	80055ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e167      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ba:	4b0b      	ldr	r3, [pc, #44]	@ (80055e8 <HAL_RCC_OscConfig+0x240>)
 80055bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0f0      	beq.n	80055a8 <HAL_RCC_OscConfig+0x200>
 80055c6:	e01b      	b.n	8005600 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055c8:	4b09      	ldr	r3, [pc, #36]	@ (80055f0 <HAL_RCC_OscConfig+0x248>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055ce:	f7fe f84f 	bl	8003670 <HAL_GetTick>
 80055d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055d4:	e00e      	b.n	80055f4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055d6:	f7fe f84b 	bl	8003670 <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	2b02      	cmp	r3, #2
 80055e2:	d907      	bls.n	80055f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055e4:	2303      	movs	r3, #3
 80055e6:	e150      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
 80055e8:	40023800 	.word	0x40023800
 80055ec:	42470000 	.word	0x42470000
 80055f0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055f4:	4b88      	ldr	r3, [pc, #544]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80055f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80055f8:	f003 0302 	and.w	r3, r3, #2
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d1ea      	bne.n	80055d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b00      	cmp	r3, #0
 800560a:	f000 8097 	beq.w	800573c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800560e:	2300      	movs	r3, #0
 8005610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005612:	4b81      	ldr	r3, [pc, #516]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005614:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005616:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800561a:	2b00      	cmp	r3, #0
 800561c:	d10f      	bne.n	800563e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800561e:	2300      	movs	r3, #0
 8005620:	60bb      	str	r3, [r7, #8]
 8005622:	4b7d      	ldr	r3, [pc, #500]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005626:	4a7c      	ldr	r2, [pc, #496]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800562c:	6413      	str	r3, [r2, #64]	@ 0x40
 800562e:	4b7a      	ldr	r3, [pc, #488]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005630:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005636:	60bb      	str	r3, [r7, #8]
 8005638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800563a:	2301      	movs	r3, #1
 800563c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800563e:	4b77      	ldr	r3, [pc, #476]	@ (800581c <HAL_RCC_OscConfig+0x474>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005646:	2b00      	cmp	r3, #0
 8005648:	d118      	bne.n	800567c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800564a:	4b74      	ldr	r3, [pc, #464]	@ (800581c <HAL_RCC_OscConfig+0x474>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a73      	ldr	r2, [pc, #460]	@ (800581c <HAL_RCC_OscConfig+0x474>)
 8005650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005656:	f7fe f80b 	bl	8003670 <HAL_GetTick>
 800565a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800565c:	e008      	b.n	8005670 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800565e:	f7fe f807 	bl	8003670 <HAL_GetTick>
 8005662:	4602      	mov	r2, r0
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	1ad3      	subs	r3, r2, r3
 8005668:	2b02      	cmp	r3, #2
 800566a:	d901      	bls.n	8005670 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800566c:	2303      	movs	r3, #3
 800566e:	e10c      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005670:	4b6a      	ldr	r3, [pc, #424]	@ (800581c <HAL_RCC_OscConfig+0x474>)
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005678:	2b00      	cmp	r3, #0
 800567a:	d0f0      	beq.n	800565e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	2b01      	cmp	r3, #1
 8005682:	d106      	bne.n	8005692 <HAL_RCC_OscConfig+0x2ea>
 8005684:	4b64      	ldr	r3, [pc, #400]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005686:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005688:	4a63      	ldr	r2, [pc, #396]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 800568a:	f043 0301 	orr.w	r3, r3, #1
 800568e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005690:	e01c      	b.n	80056cc <HAL_RCC_OscConfig+0x324>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	689b      	ldr	r3, [r3, #8]
 8005696:	2b05      	cmp	r3, #5
 8005698:	d10c      	bne.n	80056b4 <HAL_RCC_OscConfig+0x30c>
 800569a:	4b5f      	ldr	r3, [pc, #380]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 800569c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800569e:	4a5e      	ldr	r2, [pc, #376]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80056a0:	f043 0304 	orr.w	r3, r3, #4
 80056a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80056a6:	4b5c      	ldr	r3, [pc, #368]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80056a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056aa:	4a5b      	ldr	r2, [pc, #364]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80056ac:	f043 0301 	orr.w	r3, r3, #1
 80056b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80056b2:	e00b      	b.n	80056cc <HAL_RCC_OscConfig+0x324>
 80056b4:	4b58      	ldr	r3, [pc, #352]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80056b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b8:	4a57      	ldr	r2, [pc, #348]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80056ba:	f023 0301 	bic.w	r3, r3, #1
 80056be:	6713      	str	r3, [r2, #112]	@ 0x70
 80056c0:	4b55      	ldr	r3, [pc, #340]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80056c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c4:	4a54      	ldr	r2, [pc, #336]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80056c6:	f023 0304 	bic.w	r3, r3, #4
 80056ca:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d015      	beq.n	8005700 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d4:	f7fd ffcc 	bl	8003670 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056da:	e00a      	b.n	80056f2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056dc:	f7fd ffc8 	bl	8003670 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e0cb      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056f2:	4b49      	ldr	r3, [pc, #292]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80056f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d0ee      	beq.n	80056dc <HAL_RCC_OscConfig+0x334>
 80056fe:	e014      	b.n	800572a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005700:	f7fd ffb6 	bl	8003670 <HAL_GetTick>
 8005704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005706:	e00a      	b.n	800571e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005708:	f7fd ffb2 	bl	8003670 <HAL_GetTick>
 800570c:	4602      	mov	r2, r0
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005716:	4293      	cmp	r3, r2
 8005718:	d901      	bls.n	800571e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e0b5      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800571e:	4b3e      	ldr	r3, [pc, #248]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005720:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005722:	f003 0302 	and.w	r3, r3, #2
 8005726:	2b00      	cmp	r3, #0
 8005728:	d1ee      	bne.n	8005708 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800572a:	7dfb      	ldrb	r3, [r7, #23]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d105      	bne.n	800573c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005730:	4b39      	ldr	r3, [pc, #228]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005734:	4a38      	ldr	r2, [pc, #224]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005736:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800573a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 80a1 	beq.w	8005888 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005746:	4b34      	ldr	r3, [pc, #208]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005748:	689b      	ldr	r3, [r3, #8]
 800574a:	f003 030c 	and.w	r3, r3, #12
 800574e:	2b08      	cmp	r3, #8
 8005750:	d05c      	beq.n	800580c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	699b      	ldr	r3, [r3, #24]
 8005756:	2b02      	cmp	r3, #2
 8005758:	d141      	bne.n	80057de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800575a:	4b31      	ldr	r3, [pc, #196]	@ (8005820 <HAL_RCC_OscConfig+0x478>)
 800575c:	2200      	movs	r2, #0
 800575e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005760:	f7fd ff86 	bl	8003670 <HAL_GetTick>
 8005764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005766:	e008      	b.n	800577a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005768:	f7fd ff82 	bl	8003670 <HAL_GetTick>
 800576c:	4602      	mov	r2, r0
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	2b02      	cmp	r3, #2
 8005774:	d901      	bls.n	800577a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005776:	2303      	movs	r3, #3
 8005778:	e087      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800577a:	4b27      	ldr	r3, [pc, #156]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1f0      	bne.n	8005768 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	69da      	ldr	r2, [r3, #28]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a1b      	ldr	r3, [r3, #32]
 800578e:	431a      	orrs	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005794:	019b      	lsls	r3, r3, #6
 8005796:	431a      	orrs	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800579c:	085b      	lsrs	r3, r3, #1
 800579e:	3b01      	subs	r3, #1
 80057a0:	041b      	lsls	r3, r3, #16
 80057a2:	431a      	orrs	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057a8:	061b      	lsls	r3, r3, #24
 80057aa:	491b      	ldr	r1, [pc, #108]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057b0:	4b1b      	ldr	r3, [pc, #108]	@ (8005820 <HAL_RCC_OscConfig+0x478>)
 80057b2:	2201      	movs	r2, #1
 80057b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057b6:	f7fd ff5b 	bl	8003670 <HAL_GetTick>
 80057ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057bc:	e008      	b.n	80057d0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057be:	f7fd ff57 	bl	8003670 <HAL_GetTick>
 80057c2:	4602      	mov	r2, r0
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e05c      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057d0:	4b11      	ldr	r3, [pc, #68]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0f0      	beq.n	80057be <HAL_RCC_OscConfig+0x416>
 80057dc:	e054      	b.n	8005888 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057de:	4b10      	ldr	r3, [pc, #64]	@ (8005820 <HAL_RCC_OscConfig+0x478>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057e4:	f7fd ff44 	bl	8003670 <HAL_GetTick>
 80057e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ea:	e008      	b.n	80057fe <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057ec:	f7fd ff40 	bl	8003670 <HAL_GetTick>
 80057f0:	4602      	mov	r2, r0
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	1ad3      	subs	r3, r2, r3
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e045      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057fe:	4b06      	ldr	r3, [pc, #24]	@ (8005818 <HAL_RCC_OscConfig+0x470>)
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1f0      	bne.n	80057ec <HAL_RCC_OscConfig+0x444>
 800580a:	e03d      	b.n	8005888 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	699b      	ldr	r3, [r3, #24]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d107      	bne.n	8005824 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e038      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
 8005818:	40023800 	.word	0x40023800
 800581c:	40007000 	.word	0x40007000
 8005820:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005824:	4b1b      	ldr	r3, [pc, #108]	@ (8005894 <HAL_RCC_OscConfig+0x4ec>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	2b01      	cmp	r3, #1
 8005830:	d028      	beq.n	8005884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800583c:	429a      	cmp	r2, r3
 800583e:	d121      	bne.n	8005884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800584a:	429a      	cmp	r2, r3
 800584c:	d11a      	bne.n	8005884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800584e:	68fa      	ldr	r2, [r7, #12]
 8005850:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005854:	4013      	ands	r3, r2
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800585a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800585c:	4293      	cmp	r3, r2
 800585e:	d111      	bne.n	8005884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586a:	085b      	lsrs	r3, r3, #1
 800586c:	3b01      	subs	r3, #1
 800586e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005870:	429a      	cmp	r2, r3
 8005872:	d107      	bne.n	8005884 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800587e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005880:	429a      	cmp	r2, r3
 8005882:	d001      	beq.n	8005888 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005884:	2301      	movs	r3, #1
 8005886:	e000      	b.n	800588a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005888:	2300      	movs	r3, #0
}
 800588a:	4618      	mov	r0, r3
 800588c:	3718      	adds	r7, #24
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}
 8005892:	bf00      	nop
 8005894:	40023800 	.word	0x40023800

08005898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b084      	sub	sp, #16
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0cc      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80058ac:	4b68      	ldr	r3, [pc, #416]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 030f 	and.w	r3, r3, #15
 80058b4:	683a      	ldr	r2, [r7, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d90c      	bls.n	80058d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058ba:	4b65      	ldr	r3, [pc, #404]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	b2d2      	uxtb	r2, r2
 80058c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058c2:	4b63      	ldr	r3, [pc, #396]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 030f 	and.w	r3, r3, #15
 80058ca:	683a      	ldr	r2, [r7, #0]
 80058cc:	429a      	cmp	r2, r3
 80058ce:	d001      	beq.n	80058d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058d0:	2301      	movs	r3, #1
 80058d2:	e0b8      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f003 0302 	and.w	r3, r3, #2
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d020      	beq.n	8005922 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058ec:	4b59      	ldr	r3, [pc, #356]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	4a58      	ldr	r2, [pc, #352]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 80058f2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80058f6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b00      	cmp	r3, #0
 8005902:	d005      	beq.n	8005910 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005904:	4b53      	ldr	r3, [pc, #332]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	4a52      	ldr	r2, [pc, #328]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 800590a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800590e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005910:	4b50      	ldr	r3, [pc, #320]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	494d      	ldr	r1, [pc, #308]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 800591e:	4313      	orrs	r3, r2
 8005920:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f003 0301 	and.w	r3, r3, #1
 800592a:	2b00      	cmp	r3, #0
 800592c:	d044      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2b01      	cmp	r3, #1
 8005934:	d107      	bne.n	8005946 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005936:	4b47      	ldr	r3, [pc, #284]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800593e:	2b00      	cmp	r3, #0
 8005940:	d119      	bne.n	8005976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	e07f      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	2b02      	cmp	r3, #2
 800594c:	d003      	beq.n	8005956 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005952:	2b03      	cmp	r3, #3
 8005954:	d107      	bne.n	8005966 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005956:	4b3f      	ldr	r3, [pc, #252]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800595e:	2b00      	cmp	r3, #0
 8005960:	d109      	bne.n	8005976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005962:	2301      	movs	r3, #1
 8005964:	e06f      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005966:	4b3b      	ldr	r3, [pc, #236]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 0302 	and.w	r3, r3, #2
 800596e:	2b00      	cmp	r3, #0
 8005970:	d101      	bne.n	8005976 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	e067      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005976:	4b37      	ldr	r3, [pc, #220]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005978:	689b      	ldr	r3, [r3, #8]
 800597a:	f023 0203 	bic.w	r2, r3, #3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	4934      	ldr	r1, [pc, #208]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005984:	4313      	orrs	r3, r2
 8005986:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005988:	f7fd fe72 	bl	8003670 <HAL_GetTick>
 800598c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800598e:	e00a      	b.n	80059a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005990:	f7fd fe6e 	bl	8003670 <HAL_GetTick>
 8005994:	4602      	mov	r2, r0
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800599e:	4293      	cmp	r3, r2
 80059a0:	d901      	bls.n	80059a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059a2:	2303      	movs	r3, #3
 80059a4:	e04f      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059a6:	4b2b      	ldr	r3, [pc, #172]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	f003 020c 	and.w	r2, r3, #12
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	685b      	ldr	r3, [r3, #4]
 80059b2:	009b      	lsls	r3, r3, #2
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d1eb      	bne.n	8005990 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80059b8:	4b25      	ldr	r3, [pc, #148]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 030f 	and.w	r3, r3, #15
 80059c0:	683a      	ldr	r2, [r7, #0]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	d20c      	bcs.n	80059e0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c6:	4b22      	ldr	r3, [pc, #136]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ce:	4b20      	ldr	r3, [pc, #128]	@ (8005a50 <HAL_RCC_ClockConfig+0x1b8>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 030f 	and.w	r3, r3, #15
 80059d6:	683a      	ldr	r2, [r7, #0]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d001      	beq.n	80059e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059dc:	2301      	movs	r3, #1
 80059de:	e032      	b.n	8005a46 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d008      	beq.n	80059fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059ec:	4b19      	ldr	r3, [pc, #100]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 80059ee:	689b      	ldr	r3, [r3, #8]
 80059f0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	4916      	ldr	r1, [pc, #88]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0308 	and.w	r3, r3, #8
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d009      	beq.n	8005a1e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a0a:	4b12      	ldr	r3, [pc, #72]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	00db      	lsls	r3, r3, #3
 8005a18:	490e      	ldr	r1, [pc, #56]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005a1e:	f000 f821 	bl	8005a64 <HAL_RCC_GetSysClockFreq>
 8005a22:	4602      	mov	r2, r0
 8005a24:	4b0b      	ldr	r3, [pc, #44]	@ (8005a54 <HAL_RCC_ClockConfig+0x1bc>)
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	091b      	lsrs	r3, r3, #4
 8005a2a:	f003 030f 	and.w	r3, r3, #15
 8005a2e:	490a      	ldr	r1, [pc, #40]	@ (8005a58 <HAL_RCC_ClockConfig+0x1c0>)
 8005a30:	5ccb      	ldrb	r3, [r1, r3]
 8005a32:	fa22 f303 	lsr.w	r3, r2, r3
 8005a36:	4a09      	ldr	r2, [pc, #36]	@ (8005a5c <HAL_RCC_ClockConfig+0x1c4>)
 8005a38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005a3a:	4b09      	ldr	r3, [pc, #36]	@ (8005a60 <HAL_RCC_ClockConfig+0x1c8>)
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fd fdd2 	bl	80035e8 <HAL_InitTick>

  return HAL_OK;
 8005a44:	2300      	movs	r3, #0
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	40023c00 	.word	0x40023c00
 8005a54:	40023800 	.word	0x40023800
 8005a58:	080079f4 	.word	0x080079f4
 8005a5c:	200000e8 	.word	0x200000e8
 8005a60:	200000ec 	.word	0x200000ec

08005a64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a68:	b094      	sub	sp, #80	@ 0x50
 8005a6a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005a74:	2300      	movs	r3, #0
 8005a76:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a7c:	4b79      	ldr	r3, [pc, #484]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f003 030c 	and.w	r3, r3, #12
 8005a84:	2b08      	cmp	r3, #8
 8005a86:	d00d      	beq.n	8005aa4 <HAL_RCC_GetSysClockFreq+0x40>
 8005a88:	2b08      	cmp	r3, #8
 8005a8a:	f200 80e1 	bhi.w	8005c50 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d002      	beq.n	8005a98 <HAL_RCC_GetSysClockFreq+0x34>
 8005a92:	2b04      	cmp	r3, #4
 8005a94:	d003      	beq.n	8005a9e <HAL_RCC_GetSysClockFreq+0x3a>
 8005a96:	e0db      	b.n	8005c50 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a98:	4b73      	ldr	r3, [pc, #460]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a9a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a9c:	e0db      	b.n	8005c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a9e:	4b73      	ldr	r3, [pc, #460]	@ (8005c6c <HAL_RCC_GetSysClockFreq+0x208>)
 8005aa0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005aa2:	e0d8      	b.n	8005c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005aa4:	4b6f      	ldr	r3, [pc, #444]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005aac:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005aae:	4b6d      	ldr	r3, [pc, #436]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d063      	beq.n	8005b82 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005aba:	4b6a      	ldr	r3, [pc, #424]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	099b      	lsrs	r3, r3, #6
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005ac4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ac8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005acc:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ace:	2300      	movs	r3, #0
 8005ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ad2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005ad6:	4622      	mov	r2, r4
 8005ad8:	462b      	mov	r3, r5
 8005ada:	f04f 0000 	mov.w	r0, #0
 8005ade:	f04f 0100 	mov.w	r1, #0
 8005ae2:	0159      	lsls	r1, r3, #5
 8005ae4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ae8:	0150      	lsls	r0, r2, #5
 8005aea:	4602      	mov	r2, r0
 8005aec:	460b      	mov	r3, r1
 8005aee:	4621      	mov	r1, r4
 8005af0:	1a51      	subs	r1, r2, r1
 8005af2:	6139      	str	r1, [r7, #16]
 8005af4:	4629      	mov	r1, r5
 8005af6:	eb63 0301 	sbc.w	r3, r3, r1
 8005afa:	617b      	str	r3, [r7, #20]
 8005afc:	f04f 0200 	mov.w	r2, #0
 8005b00:	f04f 0300 	mov.w	r3, #0
 8005b04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b08:	4659      	mov	r1, fp
 8005b0a:	018b      	lsls	r3, r1, #6
 8005b0c:	4651      	mov	r1, sl
 8005b0e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b12:	4651      	mov	r1, sl
 8005b14:	018a      	lsls	r2, r1, #6
 8005b16:	4651      	mov	r1, sl
 8005b18:	ebb2 0801 	subs.w	r8, r2, r1
 8005b1c:	4659      	mov	r1, fp
 8005b1e:	eb63 0901 	sbc.w	r9, r3, r1
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b36:	4690      	mov	r8, r2
 8005b38:	4699      	mov	r9, r3
 8005b3a:	4623      	mov	r3, r4
 8005b3c:	eb18 0303 	adds.w	r3, r8, r3
 8005b40:	60bb      	str	r3, [r7, #8]
 8005b42:	462b      	mov	r3, r5
 8005b44:	eb49 0303 	adc.w	r3, r9, r3
 8005b48:	60fb      	str	r3, [r7, #12]
 8005b4a:	f04f 0200 	mov.w	r2, #0
 8005b4e:	f04f 0300 	mov.w	r3, #0
 8005b52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b56:	4629      	mov	r1, r5
 8005b58:	024b      	lsls	r3, r1, #9
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b60:	4621      	mov	r1, r4
 8005b62:	024a      	lsls	r2, r1, #9
 8005b64:	4610      	mov	r0, r2
 8005b66:	4619      	mov	r1, r3
 8005b68:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b70:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005b74:	f7fa fba4 	bl	80002c0 <__aeabi_uldivmod>
 8005b78:	4602      	mov	r2, r0
 8005b7a:	460b      	mov	r3, r1
 8005b7c:	4613      	mov	r3, r2
 8005b7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b80:	e058      	b.n	8005c34 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b82:	4b38      	ldr	r3, [pc, #224]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005b84:	685b      	ldr	r3, [r3, #4]
 8005b86:	099b      	lsrs	r3, r3, #6
 8005b88:	2200      	movs	r2, #0
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	4611      	mov	r1, r2
 8005b8e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b92:	623b      	str	r3, [r7, #32]
 8005b94:	2300      	movs	r3, #0
 8005b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b98:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b9c:	4642      	mov	r2, r8
 8005b9e:	464b      	mov	r3, r9
 8005ba0:	f04f 0000 	mov.w	r0, #0
 8005ba4:	f04f 0100 	mov.w	r1, #0
 8005ba8:	0159      	lsls	r1, r3, #5
 8005baa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bae:	0150      	lsls	r0, r2, #5
 8005bb0:	4602      	mov	r2, r0
 8005bb2:	460b      	mov	r3, r1
 8005bb4:	4641      	mov	r1, r8
 8005bb6:	ebb2 0a01 	subs.w	sl, r2, r1
 8005bba:	4649      	mov	r1, r9
 8005bbc:	eb63 0b01 	sbc.w	fp, r3, r1
 8005bc0:	f04f 0200 	mov.w	r2, #0
 8005bc4:	f04f 0300 	mov.w	r3, #0
 8005bc8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005bcc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005bd0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bd4:	ebb2 040a 	subs.w	r4, r2, sl
 8005bd8:	eb63 050b 	sbc.w	r5, r3, fp
 8005bdc:	f04f 0200 	mov.w	r2, #0
 8005be0:	f04f 0300 	mov.w	r3, #0
 8005be4:	00eb      	lsls	r3, r5, #3
 8005be6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bea:	00e2      	lsls	r2, r4, #3
 8005bec:	4614      	mov	r4, r2
 8005bee:	461d      	mov	r5, r3
 8005bf0:	4643      	mov	r3, r8
 8005bf2:	18e3      	adds	r3, r4, r3
 8005bf4:	603b      	str	r3, [r7, #0]
 8005bf6:	464b      	mov	r3, r9
 8005bf8:	eb45 0303 	adc.w	r3, r5, r3
 8005bfc:	607b      	str	r3, [r7, #4]
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	f04f 0300 	mov.w	r3, #0
 8005c06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c0a:	4629      	mov	r1, r5
 8005c0c:	028b      	lsls	r3, r1, #10
 8005c0e:	4621      	mov	r1, r4
 8005c10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c14:	4621      	mov	r1, r4
 8005c16:	028a      	lsls	r2, r1, #10
 8005c18:	4610      	mov	r0, r2
 8005c1a:	4619      	mov	r1, r3
 8005c1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005c1e:	2200      	movs	r2, #0
 8005c20:	61bb      	str	r3, [r7, #24]
 8005c22:	61fa      	str	r2, [r7, #28]
 8005c24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c28:	f7fa fb4a 	bl	80002c0 <__aeabi_uldivmod>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	460b      	mov	r3, r1
 8005c30:	4613      	mov	r3, r2
 8005c32:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005c34:	4b0b      	ldr	r3, [pc, #44]	@ (8005c64 <HAL_RCC_GetSysClockFreq+0x200>)
 8005c36:	685b      	ldr	r3, [r3, #4]
 8005c38:	0c1b      	lsrs	r3, r3, #16
 8005c3a:	f003 0303 	and.w	r3, r3, #3
 8005c3e:	3301      	adds	r3, #1
 8005c40:	005b      	lsls	r3, r3, #1
 8005c42:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005c44:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c46:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c4e:	e002      	b.n	8005c56 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c50:	4b05      	ldr	r3, [pc, #20]	@ (8005c68 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c52:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005c54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c56:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3750      	adds	r7, #80	@ 0x50
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c62:	bf00      	nop
 8005c64:	40023800 	.word	0x40023800
 8005c68:	00f42400 	.word	0x00f42400
 8005c6c:	007a1200 	.word	0x007a1200

08005c70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c70:	b480      	push	{r7}
 8005c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c74:	4b03      	ldr	r3, [pc, #12]	@ (8005c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c76:	681b      	ldr	r3, [r3, #0]
}
 8005c78:	4618      	mov	r0, r3
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c80:	4770      	bx	lr
 8005c82:	bf00      	nop
 8005c84:	200000e8 	.word	0x200000e8

08005c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005c8c:	f7ff fff0 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4b05      	ldr	r3, [pc, #20]	@ (8005ca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	0a9b      	lsrs	r3, r3, #10
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	4903      	ldr	r1, [pc, #12]	@ (8005cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	08007a04 	.word	0x08007a04

08005cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005cb4:	f7ff ffdc 	bl	8005c70 <HAL_RCC_GetHCLKFreq>
 8005cb8:	4602      	mov	r2, r0
 8005cba:	4b05      	ldr	r3, [pc, #20]	@ (8005cd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005cbc:	689b      	ldr	r3, [r3, #8]
 8005cbe:	0b5b      	lsrs	r3, r3, #13
 8005cc0:	f003 0307 	and.w	r3, r3, #7
 8005cc4:	4903      	ldr	r1, [pc, #12]	@ (8005cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005cc6:	5ccb      	ldrb	r3, [r1, r3]
 8005cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	40023800 	.word	0x40023800
 8005cd4:	08007a04 	.word	0x08007a04

08005cd8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b082      	sub	sp, #8
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d101      	bne.n	8005cea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	e07b      	b.n	8005de2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d108      	bne.n	8005d04 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	685b      	ldr	r3, [r3, #4]
 8005cf6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005cfa:	d009      	beq.n	8005d10 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2200      	movs	r2, #0
 8005d00:	61da      	str	r2, [r3, #28]
 8005d02:	e005      	b.n	8005d10 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2200      	movs	r2, #0
 8005d14:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d106      	bne.n	8005d30 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d2a:	6878      	ldr	r0, [r7, #4]
 8005d2c:	f7fd fa36 	bl	800319c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2202      	movs	r2, #2
 8005d34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d46:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	68db      	ldr	r3, [r3, #12]
 8005d5e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	f003 0302 	and.w	r3, r3, #2
 8005d6c:	431a      	orrs	r2, r3
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	695b      	ldr	r3, [r3, #20]
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	699b      	ldr	r3, [r3, #24]
 8005d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d80:	431a      	orrs	r2, r3
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	69db      	ldr	r3, [r3, #28]
 8005d86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d8a:	431a      	orrs	r2, r3
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d94:	ea42 0103 	orr.w	r1, r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d9c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	430a      	orrs	r2, r1
 8005da6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	699b      	ldr	r3, [r3, #24]
 8005dac:	0c1b      	lsrs	r3, r3, #16
 8005dae:	f003 0104 	and.w	r1, r3, #4
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005db6:	f003 0210 	and.w	r2, r3, #16
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	430a      	orrs	r2, r1
 8005dc0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69da      	ldr	r2, [r3, #28]
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dd0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3708      	adds	r7, #8
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}

08005dea <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005dea:	b580      	push	{r7, lr}
 8005dec:	b08a      	sub	sp, #40	@ 0x28
 8005dee:	af00      	add	r7, sp, #0
 8005df0:	60f8      	str	r0, [r7, #12]
 8005df2:	60b9      	str	r1, [r7, #8]
 8005df4:	607a      	str	r2, [r7, #4]
 8005df6:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dfc:	f7fd fc38 	bl	8003670 <HAL_GetTick>
 8005e00:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e08:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005e10:	887b      	ldrh	r3, [r7, #2]
 8005e12:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005e14:	7ffb      	ldrb	r3, [r7, #31]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d00c      	beq.n	8005e34 <HAL_SPI_TransmitReceive+0x4a>
 8005e1a:	69bb      	ldr	r3, [r7, #24]
 8005e1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e20:	d106      	bne.n	8005e30 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d102      	bne.n	8005e30 <HAL_SPI_TransmitReceive+0x46>
 8005e2a:	7ffb      	ldrb	r3, [r7, #31]
 8005e2c:	2b04      	cmp	r3, #4
 8005e2e:	d001      	beq.n	8005e34 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005e30:	2302      	movs	r3, #2
 8005e32:	e17f      	b.n	8006134 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d005      	beq.n	8005e46 <HAL_SPI_TransmitReceive+0x5c>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d002      	beq.n	8005e46 <HAL_SPI_TransmitReceive+0x5c>
 8005e40:	887b      	ldrh	r3, [r7, #2]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e174      	b.n	8006134 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_SPI_TransmitReceive+0x6e>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e16d      	b.n	8006134 <HAL_SPI_TransmitReceive+0x34a>
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d003      	beq.n	8005e74 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	2205      	movs	r2, #5
 8005e70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	687a      	ldr	r2, [r7, #4]
 8005e7e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	887a      	ldrh	r2, [r7, #2]
 8005e84:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	887a      	ldrh	r2, [r7, #2]
 8005e8a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	887a      	ldrh	r2, [r7, #2]
 8005e96:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	887a      	ldrh	r2, [r7, #2]
 8005e9c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005eb4:	2b40      	cmp	r3, #64	@ 0x40
 8005eb6:	d007      	beq.n	8005ec8 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	681a      	ldr	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ec6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ed0:	d17e      	bne.n	8005fd0 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <HAL_SPI_TransmitReceive+0xf6>
 8005eda:	8afb      	ldrh	r3, [r7, #22]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d16c      	bne.n	8005fba <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee4:	881a      	ldrh	r2, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ef0:	1c9a      	adds	r2, r3, #2
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005efa:	b29b      	uxth	r3, r3
 8005efc:	3b01      	subs	r3, #1
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f04:	e059      	b.n	8005fba <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	f003 0302 	and.w	r3, r3, #2
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d11b      	bne.n	8005f4c <HAL_SPI_TransmitReceive+0x162>
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d016      	beq.n	8005f4c <HAL_SPI_TransmitReceive+0x162>
 8005f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d113      	bne.n	8005f4c <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f28:	881a      	ldrh	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f34:	1c9a      	adds	r2, r3, #2
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	3b01      	subs	r3, #1
 8005f42:	b29a      	uxth	r2, r3
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f48:	2300      	movs	r3, #0
 8005f4a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d119      	bne.n	8005f8e <HAL_SPI_TransmitReceive+0x1a4>
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d014      	beq.n	8005f8e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6e:	b292      	uxth	r2, r2
 8005f70:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f76:	1c9a      	adds	r2, r3, #2
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	3b01      	subs	r3, #1
 8005f84:	b29a      	uxth	r2, r3
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f8e:	f7fd fb6f 	bl	8003670 <HAL_GetTick>
 8005f92:	4602      	mov	r2, r0
 8005f94:	6a3b      	ldr	r3, [r7, #32]
 8005f96:	1ad3      	subs	r3, r2, r3
 8005f98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d80d      	bhi.n	8005fba <HAL_SPI_TransmitReceive+0x1d0>
 8005f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa4:	d009      	beq.n	8005fba <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005fb6:	2303      	movs	r3, #3
 8005fb8:	e0bc      	b.n	8006134 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fbe:	b29b      	uxth	r3, r3
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1a0      	bne.n	8005f06 <HAL_SPI_TransmitReceive+0x11c>
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d19b      	bne.n	8005f06 <HAL_SPI_TransmitReceive+0x11c>
 8005fce:	e082      	b.n	80060d6 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	685b      	ldr	r3, [r3, #4]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d002      	beq.n	8005fde <HAL_SPI_TransmitReceive+0x1f4>
 8005fd8:	8afb      	ldrh	r3, [r7, #22]
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d171      	bne.n	80060c2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	330c      	adds	r3, #12
 8005fe8:	7812      	ldrb	r2, [r2, #0]
 8005fea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ff0:	1c5a      	adds	r2, r3, #1
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	3b01      	subs	r3, #1
 8005ffe:	b29a      	uxth	r2, r3
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006004:	e05d      	b.n	80060c2 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	f003 0302 	and.w	r3, r3, #2
 8006010:	2b02      	cmp	r3, #2
 8006012:	d11c      	bne.n	800604e <HAL_SPI_TransmitReceive+0x264>
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006018:	b29b      	uxth	r3, r3
 800601a:	2b00      	cmp	r3, #0
 800601c:	d017      	beq.n	800604e <HAL_SPI_TransmitReceive+0x264>
 800601e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006020:	2b01      	cmp	r3, #1
 8006022:	d114      	bne.n	800604e <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	330c      	adds	r3, #12
 800602e:	7812      	ldrb	r2, [r2, #0]
 8006030:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006040:	b29b      	uxth	r3, r3
 8006042:	3b01      	subs	r3, #1
 8006044:	b29a      	uxth	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800604a:	2300      	movs	r3, #0
 800604c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	f003 0301 	and.w	r3, r3, #1
 8006058:	2b01      	cmp	r3, #1
 800605a:	d119      	bne.n	8006090 <HAL_SPI_TransmitReceive+0x2a6>
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006060:	b29b      	uxth	r3, r3
 8006062:	2b00      	cmp	r3, #0
 8006064:	d014      	beq.n	8006090 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68da      	ldr	r2, [r3, #12]
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006070:	b2d2      	uxtb	r2, r2
 8006072:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006078:	1c5a      	adds	r2, r3, #1
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006082:	b29b      	uxth	r3, r3
 8006084:	3b01      	subs	r3, #1
 8006086:	b29a      	uxth	r2, r3
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800608c:	2301      	movs	r3, #1
 800608e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006090:	f7fd faee 	bl	8003670 <HAL_GetTick>
 8006094:	4602      	mov	r2, r0
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	1ad3      	subs	r3, r2, r3
 800609a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800609c:	429a      	cmp	r2, r3
 800609e:	d803      	bhi.n	80060a8 <HAL_SPI_TransmitReceive+0x2be>
 80060a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a6:	d102      	bne.n	80060ae <HAL_SPI_TransmitReceive+0x2c4>
 80060a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d109      	bne.n	80060c2 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80060be:	2303      	movs	r3, #3
 80060c0:	e038      	b.n	8006134 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d19c      	bne.n	8006006 <HAL_SPI_TransmitReceive+0x21c>
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060d0:	b29b      	uxth	r3, r3
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d197      	bne.n	8006006 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060d6:	6a3a      	ldr	r2, [r7, #32]
 80060d8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f8b6 	bl	800624c <SPI_EndRxTxTransaction>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d008      	beq.n	80060f8 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2220      	movs	r2, #32
 80060ea:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80060f4:	2301      	movs	r3, #1
 80060f6:	e01d      	b.n	8006134 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	689b      	ldr	r3, [r3, #8]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d10a      	bne.n	8006116 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006100:	2300      	movs	r3, #0
 8006102:	613b      	str	r3, [r7, #16]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68db      	ldr	r3, [r3, #12]
 800610a:	613b      	str	r3, [r7, #16]
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	689b      	ldr	r3, [r3, #8]
 8006112:	613b      	str	r3, [r7, #16]
 8006114:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2201      	movs	r2, #1
 800611a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800612a:	2b00      	cmp	r3, #0
 800612c:	d001      	beq.n	8006132 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e000      	b.n	8006134 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006132:	2300      	movs	r3, #0
  }
}
 8006134:	4618      	mov	r0, r3
 8006136:	3728      	adds	r7, #40	@ 0x28
 8006138:	46bd      	mov	sp, r7
 800613a:	bd80      	pop	{r7, pc}

0800613c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	603b      	str	r3, [r7, #0]
 8006148:	4613      	mov	r3, r2
 800614a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800614c:	f7fd fa90 	bl	8003670 <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006154:	1a9b      	subs	r3, r3, r2
 8006156:	683a      	ldr	r2, [r7, #0]
 8006158:	4413      	add	r3, r2
 800615a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800615c:	f7fd fa88 	bl	8003670 <HAL_GetTick>
 8006160:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006162:	4b39      	ldr	r3, [pc, #228]	@ (8006248 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	015b      	lsls	r3, r3, #5
 8006168:	0d1b      	lsrs	r3, r3, #20
 800616a:	69fa      	ldr	r2, [r7, #28]
 800616c:	fb02 f303 	mul.w	r3, r2, r3
 8006170:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006172:	e054      	b.n	800621e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617a:	d050      	beq.n	800621e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800617c:	f7fd fa78 	bl	8003670 <HAL_GetTick>
 8006180:	4602      	mov	r2, r0
 8006182:	69bb      	ldr	r3, [r7, #24]
 8006184:	1ad3      	subs	r3, r2, r3
 8006186:	69fa      	ldr	r2, [r7, #28]
 8006188:	429a      	cmp	r2, r3
 800618a:	d902      	bls.n	8006192 <SPI_WaitFlagStateUntilTimeout+0x56>
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d13d      	bne.n	800620e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80061a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061aa:	d111      	bne.n	80061d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061b4:	d004      	beq.n	80061c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	689b      	ldr	r3, [r3, #8]
 80061ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061be:	d107      	bne.n	80061d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	681a      	ldr	r2, [r3, #0]
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061d8:	d10f      	bne.n	80061fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	681a      	ldr	r2, [r3, #0]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061e8:	601a      	str	r2, [r3, #0]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	681a      	ldr	r2, [r3, #0]
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e017      	b.n	800623e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d101      	bne.n	8006218 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	3b01      	subs	r3, #1
 800621c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	68bb      	ldr	r3, [r7, #8]
 8006226:	4013      	ands	r3, r2
 8006228:	68ba      	ldr	r2, [r7, #8]
 800622a:	429a      	cmp	r2, r3
 800622c:	bf0c      	ite	eq
 800622e:	2301      	moveq	r3, #1
 8006230:	2300      	movne	r3, #0
 8006232:	b2db      	uxtb	r3, r3
 8006234:	461a      	mov	r2, r3
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	429a      	cmp	r2, r3
 800623a:	d19b      	bne.n	8006174 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800623c:	2300      	movs	r3, #0
}
 800623e:	4618      	mov	r0, r3
 8006240:	3720      	adds	r7, #32
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	200000e8 	.word	0x200000e8

0800624c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b088      	sub	sp, #32
 8006250:	af02      	add	r7, sp, #8
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	9300      	str	r3, [sp, #0]
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	2201      	movs	r2, #1
 8006260:	2102      	movs	r1, #2
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f7ff ff6a 	bl	800613c <SPI_WaitFlagStateUntilTimeout>
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d007      	beq.n	800627e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006272:	f043 0220 	orr.w	r2, r3, #32
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800627a:	2303      	movs	r3, #3
 800627c:	e032      	b.n	80062e4 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800627e:	4b1b      	ldr	r3, [pc, #108]	@ (80062ec <SPI_EndRxTxTransaction+0xa0>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a1b      	ldr	r2, [pc, #108]	@ (80062f0 <SPI_EndRxTxTransaction+0xa4>)
 8006284:	fba2 2303 	umull	r2, r3, r2, r3
 8006288:	0d5b      	lsrs	r3, r3, #21
 800628a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800628e:	fb02 f303 	mul.w	r3, r2, r3
 8006292:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800629c:	d112      	bne.n	80062c4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	68bb      	ldr	r3, [r7, #8]
 80062a4:	2200      	movs	r2, #0
 80062a6:	2180      	movs	r1, #128	@ 0x80
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f7ff ff47 	bl	800613c <SPI_WaitFlagStateUntilTimeout>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d016      	beq.n	80062e2 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062b8:	f043 0220 	orr.w	r2, r3, #32
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80062c0:	2303      	movs	r3, #3
 80062c2:	e00f      	b.n	80062e4 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d00a      	beq.n	80062e0 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	3b01      	subs	r3, #1
 80062ce:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	689b      	ldr	r3, [r3, #8]
 80062d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062da:	2b80      	cmp	r3, #128	@ 0x80
 80062dc:	d0f2      	beq.n	80062c4 <SPI_EndRxTxTransaction+0x78>
 80062de:	e000      	b.n	80062e2 <SPI_EndRxTxTransaction+0x96>
        break;
 80062e0:	bf00      	nop
  }

  return HAL_OK;
 80062e2:	2300      	movs	r3, #0
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3718      	adds	r7, #24
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}
 80062ec:	200000e8 	.word	0x200000e8
 80062f0:	165e9f81 	.word	0x165e9f81

080062f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006302:	2301      	movs	r3, #1
 8006304:	e042      	b.n	800638c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b00      	cmp	r3, #0
 8006310:	d106      	bne.n	8006320 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800631a:	6878      	ldr	r0, [r7, #4]
 800631c:	f7fd f8d0 	bl	80034c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2224      	movs	r2, #36	@ 0x24
 8006324:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68da      	ldr	r2, [r3, #12]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006336:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f000 f973 	bl	8006624 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	691a      	ldr	r2, [r3, #16]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800634c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	695a      	ldr	r2, [r3, #20]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800635c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68da      	ldr	r2, [r3, #12]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800636c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2220      	movs	r2, #32
 8006378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2220      	movs	r2, #32
 8006380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800638a:	2300      	movs	r3, #0
}
 800638c:	4618      	mov	r0, r3
 800638e:	3708      	adds	r7, #8
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b08a      	sub	sp, #40	@ 0x28
 8006398:	af02      	add	r7, sp, #8
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	4613      	mov	r3, r2
 80063a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80063a4:	2300      	movs	r3, #0
 80063a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b20      	cmp	r3, #32
 80063b2:	d175      	bne.n	80064a0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d002      	beq.n	80063c0 <HAL_UART_Transmit+0x2c>
 80063ba:	88fb      	ldrh	r3, [r7, #6]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d101      	bne.n	80063c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80063c0:	2301      	movs	r3, #1
 80063c2:	e06e      	b.n	80064a2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	2200      	movs	r2, #0
 80063c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2221      	movs	r2, #33	@ 0x21
 80063ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063d2:	f7fd f94d 	bl	8003670 <HAL_GetTick>
 80063d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	88fa      	ldrh	r2, [r7, #6]
 80063dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	88fa      	ldrh	r2, [r7, #6]
 80063e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ec:	d108      	bne.n	8006400 <HAL_UART_Transmit+0x6c>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d104      	bne.n	8006400 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80063f6:	2300      	movs	r3, #0
 80063f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	61bb      	str	r3, [r7, #24]
 80063fe:	e003      	b.n	8006408 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006404:	2300      	movs	r3, #0
 8006406:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006408:	e02e      	b.n	8006468 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	9300      	str	r3, [sp, #0]
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2200      	movs	r2, #0
 8006412:	2180      	movs	r1, #128	@ 0x80
 8006414:	68f8      	ldr	r0, [r7, #12]
 8006416:	f000 f848 	bl	80064aa <UART_WaitOnFlagUntilTimeout>
 800641a:	4603      	mov	r3, r0
 800641c:	2b00      	cmp	r3, #0
 800641e:	d005      	beq.n	800642c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006428:	2303      	movs	r3, #3
 800642a:	e03a      	b.n	80064a2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	2b00      	cmp	r3, #0
 8006430:	d10b      	bne.n	800644a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006432:	69bb      	ldr	r3, [r7, #24]
 8006434:	881b      	ldrh	r3, [r3, #0]
 8006436:	461a      	mov	r2, r3
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006440:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006442:	69bb      	ldr	r3, [r7, #24]
 8006444:	3302      	adds	r3, #2
 8006446:	61bb      	str	r3, [r7, #24]
 8006448:	e007      	b.n	800645a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800644a:	69fb      	ldr	r3, [r7, #28]
 800644c:	781a      	ldrb	r2, [r3, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	3301      	adds	r3, #1
 8006458:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800645e:	b29b      	uxth	r3, r3
 8006460:	3b01      	subs	r3, #1
 8006462:	b29a      	uxth	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800646c:	b29b      	uxth	r3, r3
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1cb      	bne.n	800640a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	9300      	str	r3, [sp, #0]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	2200      	movs	r2, #0
 800647a:	2140      	movs	r1, #64	@ 0x40
 800647c:	68f8      	ldr	r0, [r7, #12]
 800647e:	f000 f814 	bl	80064aa <UART_WaitOnFlagUntilTimeout>
 8006482:	4603      	mov	r3, r0
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	2220      	movs	r2, #32
 800648c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006490:	2303      	movs	r3, #3
 8006492:	e006      	b.n	80064a2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	2220      	movs	r2, #32
 8006498:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	e000      	b.n	80064a2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80064a0:	2302      	movs	r3, #2
  }
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3720      	adds	r7, #32
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80064aa:	b580      	push	{r7, lr}
 80064ac:	b086      	sub	sp, #24
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	60f8      	str	r0, [r7, #12]
 80064b2:	60b9      	str	r1, [r7, #8]
 80064b4:	603b      	str	r3, [r7, #0]
 80064b6:	4613      	mov	r3, r2
 80064b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ba:	e03b      	b.n	8006534 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064bc:	6a3b      	ldr	r3, [r7, #32]
 80064be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064c2:	d037      	beq.n	8006534 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064c4:	f7fd f8d4 	bl	8003670 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	6a3a      	ldr	r2, [r7, #32]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d302      	bcc.n	80064da <UART_WaitOnFlagUntilTimeout+0x30>
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d101      	bne.n	80064de <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80064da:	2303      	movs	r3, #3
 80064dc:	e03a      	b.n	8006554 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d023      	beq.n	8006534 <UART_WaitOnFlagUntilTimeout+0x8a>
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2b80      	cmp	r3, #128	@ 0x80
 80064f0:	d020      	beq.n	8006534 <UART_WaitOnFlagUntilTimeout+0x8a>
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2b40      	cmp	r3, #64	@ 0x40
 80064f6:	d01d      	beq.n	8006534 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f003 0308 	and.w	r3, r3, #8
 8006502:	2b08      	cmp	r3, #8
 8006504:	d116      	bne.n	8006534 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006506:	2300      	movs	r3, #0
 8006508:	617b      	str	r3, [r7, #20]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	617b      	str	r3, [r7, #20]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	617b      	str	r3, [r7, #20]
 800651a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 f81d 	bl	800655c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	2208      	movs	r2, #8
 8006526:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006530:	2301      	movs	r3, #1
 8006532:	e00f      	b.n	8006554 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	4013      	ands	r3, r2
 800653e:	68ba      	ldr	r2, [r7, #8]
 8006540:	429a      	cmp	r2, r3
 8006542:	bf0c      	ite	eq
 8006544:	2301      	moveq	r3, #1
 8006546:	2300      	movne	r3, #0
 8006548:	b2db      	uxtb	r3, r3
 800654a:	461a      	mov	r2, r3
 800654c:	79fb      	ldrb	r3, [r7, #7]
 800654e:	429a      	cmp	r2, r3
 8006550:	d0b4      	beq.n	80064bc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	3718      	adds	r7, #24
 8006558:	46bd      	mov	sp, r7
 800655a:	bd80      	pop	{r7, pc}

0800655c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800655c:	b480      	push	{r7}
 800655e:	b095      	sub	sp, #84	@ 0x54
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	330c      	adds	r3, #12
 800656a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800656c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800656e:	e853 3f00 	ldrex	r3, [r3]
 8006572:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006574:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006576:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800657a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	330c      	adds	r3, #12
 8006582:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006584:	643a      	str	r2, [r7, #64]	@ 0x40
 8006586:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006588:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800658a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800658c:	e841 2300 	strex	r3, r2, [r1]
 8006590:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006594:	2b00      	cmp	r3, #0
 8006596:	d1e5      	bne.n	8006564 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	3314      	adds	r3, #20
 800659e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	e853 3f00 	ldrex	r3, [r3]
 80065a6:	61fb      	str	r3, [r7, #28]
   return(result);
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	f023 0301 	bic.w	r3, r3, #1
 80065ae:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3314      	adds	r3, #20
 80065b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065ba:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065c0:	e841 2300 	strex	r3, r2, [r1]
 80065c4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d1e5      	bne.n	8006598 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065d0:	2b01      	cmp	r3, #1
 80065d2:	d119      	bne.n	8006608 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	330c      	adds	r3, #12
 80065da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	e853 3f00 	ldrex	r3, [r3]
 80065e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	f023 0310 	bic.w	r3, r3, #16
 80065ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	330c      	adds	r3, #12
 80065f2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065f4:	61ba      	str	r2, [r7, #24]
 80065f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065f8:	6979      	ldr	r1, [r7, #20]
 80065fa:	69ba      	ldr	r2, [r7, #24]
 80065fc:	e841 2300 	strex	r3, r2, [r1]
 8006600:	613b      	str	r3, [r7, #16]
   return(result);
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d1e5      	bne.n	80065d4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2220      	movs	r2, #32
 800660c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006616:	bf00      	nop
 8006618:	3754      	adds	r7, #84	@ 0x54
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr
	...

08006624 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006624:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006628:	b0c0      	sub	sp, #256	@ 0x100
 800662a:	af00      	add	r7, sp, #0
 800662c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	691b      	ldr	r3, [r3, #16]
 8006638:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800663c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006640:	68d9      	ldr	r1, [r3, #12]
 8006642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006646:	681a      	ldr	r2, [r3, #0]
 8006648:	ea40 0301 	orr.w	r3, r0, r1
 800664c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800664e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	431a      	orrs	r2, r3
 800665c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006660:	695b      	ldr	r3, [r3, #20]
 8006662:	431a      	orrs	r2, r3
 8006664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006668:	69db      	ldr	r3, [r3, #28]
 800666a:	4313      	orrs	r3, r2
 800666c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800667c:	f021 010c 	bic.w	r1, r1, #12
 8006680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006684:	681a      	ldr	r2, [r3, #0]
 8006686:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800668a:	430b      	orrs	r3, r1
 800668c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800668e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	695b      	ldr	r3, [r3, #20]
 8006696:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800669a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800669e:	6999      	ldr	r1, [r3, #24]
 80066a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	ea40 0301 	orr.w	r3, r0, r1
 80066aa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b8f      	ldr	r3, [pc, #572]	@ (80068f0 <UART_SetConfig+0x2cc>)
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d005      	beq.n	80066c4 <UART_SetConfig+0xa0>
 80066b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	4b8d      	ldr	r3, [pc, #564]	@ (80068f4 <UART_SetConfig+0x2d0>)
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d104      	bne.n	80066ce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80066c4:	f7ff faf4 	bl	8005cb0 <HAL_RCC_GetPCLK2Freq>
 80066c8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80066cc:	e003      	b.n	80066d6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80066ce:	f7ff fadb 	bl	8005c88 <HAL_RCC_GetPCLK1Freq>
 80066d2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066da:	69db      	ldr	r3, [r3, #28]
 80066dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066e0:	f040 810c 	bne.w	80068fc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80066e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80066e8:	2200      	movs	r2, #0
 80066ea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80066ee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80066f2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80066f6:	4622      	mov	r2, r4
 80066f8:	462b      	mov	r3, r5
 80066fa:	1891      	adds	r1, r2, r2
 80066fc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80066fe:	415b      	adcs	r3, r3
 8006700:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006702:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006706:	4621      	mov	r1, r4
 8006708:	eb12 0801 	adds.w	r8, r2, r1
 800670c:	4629      	mov	r1, r5
 800670e:	eb43 0901 	adc.w	r9, r3, r1
 8006712:	f04f 0200 	mov.w	r2, #0
 8006716:	f04f 0300 	mov.w	r3, #0
 800671a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800671e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006722:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006726:	4690      	mov	r8, r2
 8006728:	4699      	mov	r9, r3
 800672a:	4623      	mov	r3, r4
 800672c:	eb18 0303 	adds.w	r3, r8, r3
 8006730:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006734:	462b      	mov	r3, r5
 8006736:	eb49 0303 	adc.w	r3, r9, r3
 800673a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800673e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800674a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800674e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006752:	460b      	mov	r3, r1
 8006754:	18db      	adds	r3, r3, r3
 8006756:	653b      	str	r3, [r7, #80]	@ 0x50
 8006758:	4613      	mov	r3, r2
 800675a:	eb42 0303 	adc.w	r3, r2, r3
 800675e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006760:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006764:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006768:	f7f9 fdaa 	bl	80002c0 <__aeabi_uldivmod>
 800676c:	4602      	mov	r2, r0
 800676e:	460b      	mov	r3, r1
 8006770:	4b61      	ldr	r3, [pc, #388]	@ (80068f8 <UART_SetConfig+0x2d4>)
 8006772:	fba3 2302 	umull	r2, r3, r3, r2
 8006776:	095b      	lsrs	r3, r3, #5
 8006778:	011c      	lsls	r4, r3, #4
 800677a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800677e:	2200      	movs	r2, #0
 8006780:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006784:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006788:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800678c:	4642      	mov	r2, r8
 800678e:	464b      	mov	r3, r9
 8006790:	1891      	adds	r1, r2, r2
 8006792:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006794:	415b      	adcs	r3, r3
 8006796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006798:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800679c:	4641      	mov	r1, r8
 800679e:	eb12 0a01 	adds.w	sl, r2, r1
 80067a2:	4649      	mov	r1, r9
 80067a4:	eb43 0b01 	adc.w	fp, r3, r1
 80067a8:	f04f 0200 	mov.w	r2, #0
 80067ac:	f04f 0300 	mov.w	r3, #0
 80067b0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067b4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067b8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067bc:	4692      	mov	sl, r2
 80067be:	469b      	mov	fp, r3
 80067c0:	4643      	mov	r3, r8
 80067c2:	eb1a 0303 	adds.w	r3, sl, r3
 80067c6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80067ca:	464b      	mov	r3, r9
 80067cc:	eb4b 0303 	adc.w	r3, fp, r3
 80067d0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80067d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80067e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80067e4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80067e8:	460b      	mov	r3, r1
 80067ea:	18db      	adds	r3, r3, r3
 80067ec:	643b      	str	r3, [r7, #64]	@ 0x40
 80067ee:	4613      	mov	r3, r2
 80067f0:	eb42 0303 	adc.w	r3, r2, r3
 80067f4:	647b      	str	r3, [r7, #68]	@ 0x44
 80067f6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80067fa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80067fe:	f7f9 fd5f 	bl	80002c0 <__aeabi_uldivmod>
 8006802:	4602      	mov	r2, r0
 8006804:	460b      	mov	r3, r1
 8006806:	4611      	mov	r1, r2
 8006808:	4b3b      	ldr	r3, [pc, #236]	@ (80068f8 <UART_SetConfig+0x2d4>)
 800680a:	fba3 2301 	umull	r2, r3, r3, r1
 800680e:	095b      	lsrs	r3, r3, #5
 8006810:	2264      	movs	r2, #100	@ 0x64
 8006812:	fb02 f303 	mul.w	r3, r2, r3
 8006816:	1acb      	subs	r3, r1, r3
 8006818:	00db      	lsls	r3, r3, #3
 800681a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800681e:	4b36      	ldr	r3, [pc, #216]	@ (80068f8 <UART_SetConfig+0x2d4>)
 8006820:	fba3 2302 	umull	r2, r3, r3, r2
 8006824:	095b      	lsrs	r3, r3, #5
 8006826:	005b      	lsls	r3, r3, #1
 8006828:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800682c:	441c      	add	r4, r3
 800682e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006832:	2200      	movs	r2, #0
 8006834:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006838:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800683c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006840:	4642      	mov	r2, r8
 8006842:	464b      	mov	r3, r9
 8006844:	1891      	adds	r1, r2, r2
 8006846:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006848:	415b      	adcs	r3, r3
 800684a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800684c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006850:	4641      	mov	r1, r8
 8006852:	1851      	adds	r1, r2, r1
 8006854:	6339      	str	r1, [r7, #48]	@ 0x30
 8006856:	4649      	mov	r1, r9
 8006858:	414b      	adcs	r3, r1
 800685a:	637b      	str	r3, [r7, #52]	@ 0x34
 800685c:	f04f 0200 	mov.w	r2, #0
 8006860:	f04f 0300 	mov.w	r3, #0
 8006864:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006868:	4659      	mov	r1, fp
 800686a:	00cb      	lsls	r3, r1, #3
 800686c:	4651      	mov	r1, sl
 800686e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006872:	4651      	mov	r1, sl
 8006874:	00ca      	lsls	r2, r1, #3
 8006876:	4610      	mov	r0, r2
 8006878:	4619      	mov	r1, r3
 800687a:	4603      	mov	r3, r0
 800687c:	4642      	mov	r2, r8
 800687e:	189b      	adds	r3, r3, r2
 8006880:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006884:	464b      	mov	r3, r9
 8006886:	460a      	mov	r2, r1
 8006888:	eb42 0303 	adc.w	r3, r2, r3
 800688c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006890:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800689c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80068a0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80068a4:	460b      	mov	r3, r1
 80068a6:	18db      	adds	r3, r3, r3
 80068a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068aa:	4613      	mov	r3, r2
 80068ac:	eb42 0303 	adc.w	r3, r2, r3
 80068b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068b2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80068b6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80068ba:	f7f9 fd01 	bl	80002c0 <__aeabi_uldivmod>
 80068be:	4602      	mov	r2, r0
 80068c0:	460b      	mov	r3, r1
 80068c2:	4b0d      	ldr	r3, [pc, #52]	@ (80068f8 <UART_SetConfig+0x2d4>)
 80068c4:	fba3 1302 	umull	r1, r3, r3, r2
 80068c8:	095b      	lsrs	r3, r3, #5
 80068ca:	2164      	movs	r1, #100	@ 0x64
 80068cc:	fb01 f303 	mul.w	r3, r1, r3
 80068d0:	1ad3      	subs	r3, r2, r3
 80068d2:	00db      	lsls	r3, r3, #3
 80068d4:	3332      	adds	r3, #50	@ 0x32
 80068d6:	4a08      	ldr	r2, [pc, #32]	@ (80068f8 <UART_SetConfig+0x2d4>)
 80068d8:	fba2 2303 	umull	r2, r3, r2, r3
 80068dc:	095b      	lsrs	r3, r3, #5
 80068de:	f003 0207 	and.w	r2, r3, #7
 80068e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	4422      	add	r2, r4
 80068ea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80068ec:	e106      	b.n	8006afc <UART_SetConfig+0x4d8>
 80068ee:	bf00      	nop
 80068f0:	40011000 	.word	0x40011000
 80068f4:	40011400 	.word	0x40011400
 80068f8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006900:	2200      	movs	r2, #0
 8006902:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006906:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800690a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800690e:	4642      	mov	r2, r8
 8006910:	464b      	mov	r3, r9
 8006912:	1891      	adds	r1, r2, r2
 8006914:	6239      	str	r1, [r7, #32]
 8006916:	415b      	adcs	r3, r3
 8006918:	627b      	str	r3, [r7, #36]	@ 0x24
 800691a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800691e:	4641      	mov	r1, r8
 8006920:	1854      	adds	r4, r2, r1
 8006922:	4649      	mov	r1, r9
 8006924:	eb43 0501 	adc.w	r5, r3, r1
 8006928:	f04f 0200 	mov.w	r2, #0
 800692c:	f04f 0300 	mov.w	r3, #0
 8006930:	00eb      	lsls	r3, r5, #3
 8006932:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006936:	00e2      	lsls	r2, r4, #3
 8006938:	4614      	mov	r4, r2
 800693a:	461d      	mov	r5, r3
 800693c:	4643      	mov	r3, r8
 800693e:	18e3      	adds	r3, r4, r3
 8006940:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006944:	464b      	mov	r3, r9
 8006946:	eb45 0303 	adc.w	r3, r5, r3
 800694a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800694e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	2200      	movs	r2, #0
 8006956:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800695a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800695e:	f04f 0200 	mov.w	r2, #0
 8006962:	f04f 0300 	mov.w	r3, #0
 8006966:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800696a:	4629      	mov	r1, r5
 800696c:	008b      	lsls	r3, r1, #2
 800696e:	4621      	mov	r1, r4
 8006970:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006974:	4621      	mov	r1, r4
 8006976:	008a      	lsls	r2, r1, #2
 8006978:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800697c:	f7f9 fca0 	bl	80002c0 <__aeabi_uldivmod>
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	4b60      	ldr	r3, [pc, #384]	@ (8006b08 <UART_SetConfig+0x4e4>)
 8006986:	fba3 2302 	umull	r2, r3, r3, r2
 800698a:	095b      	lsrs	r3, r3, #5
 800698c:	011c      	lsls	r4, r3, #4
 800698e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006992:	2200      	movs	r2, #0
 8006994:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006998:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800699c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80069a0:	4642      	mov	r2, r8
 80069a2:	464b      	mov	r3, r9
 80069a4:	1891      	adds	r1, r2, r2
 80069a6:	61b9      	str	r1, [r7, #24]
 80069a8:	415b      	adcs	r3, r3
 80069aa:	61fb      	str	r3, [r7, #28]
 80069ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069b0:	4641      	mov	r1, r8
 80069b2:	1851      	adds	r1, r2, r1
 80069b4:	6139      	str	r1, [r7, #16]
 80069b6:	4649      	mov	r1, r9
 80069b8:	414b      	adcs	r3, r1
 80069ba:	617b      	str	r3, [r7, #20]
 80069bc:	f04f 0200 	mov.w	r2, #0
 80069c0:	f04f 0300 	mov.w	r3, #0
 80069c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80069c8:	4659      	mov	r1, fp
 80069ca:	00cb      	lsls	r3, r1, #3
 80069cc:	4651      	mov	r1, sl
 80069ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80069d2:	4651      	mov	r1, sl
 80069d4:	00ca      	lsls	r2, r1, #3
 80069d6:	4610      	mov	r0, r2
 80069d8:	4619      	mov	r1, r3
 80069da:	4603      	mov	r3, r0
 80069dc:	4642      	mov	r2, r8
 80069de:	189b      	adds	r3, r3, r2
 80069e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80069e4:	464b      	mov	r3, r9
 80069e6:	460a      	mov	r2, r1
 80069e8:	eb42 0303 	adc.w	r3, r2, r3
 80069ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	2200      	movs	r2, #0
 80069f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80069fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80069fc:	f04f 0200 	mov.w	r2, #0
 8006a00:	f04f 0300 	mov.w	r3, #0
 8006a04:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006a08:	4649      	mov	r1, r9
 8006a0a:	008b      	lsls	r3, r1, #2
 8006a0c:	4641      	mov	r1, r8
 8006a0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a12:	4641      	mov	r1, r8
 8006a14:	008a      	lsls	r2, r1, #2
 8006a16:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006a1a:	f7f9 fc51 	bl	80002c0 <__aeabi_uldivmod>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	460b      	mov	r3, r1
 8006a22:	4611      	mov	r1, r2
 8006a24:	4b38      	ldr	r3, [pc, #224]	@ (8006b08 <UART_SetConfig+0x4e4>)
 8006a26:	fba3 2301 	umull	r2, r3, r3, r1
 8006a2a:	095b      	lsrs	r3, r3, #5
 8006a2c:	2264      	movs	r2, #100	@ 0x64
 8006a2e:	fb02 f303 	mul.w	r3, r2, r3
 8006a32:	1acb      	subs	r3, r1, r3
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	3332      	adds	r3, #50	@ 0x32
 8006a38:	4a33      	ldr	r2, [pc, #204]	@ (8006b08 <UART_SetConfig+0x4e4>)
 8006a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006a3e:	095b      	lsrs	r3, r3, #5
 8006a40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006a44:	441c      	add	r4, r3
 8006a46:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	673b      	str	r3, [r7, #112]	@ 0x70
 8006a4e:	677a      	str	r2, [r7, #116]	@ 0x74
 8006a50:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006a54:	4642      	mov	r2, r8
 8006a56:	464b      	mov	r3, r9
 8006a58:	1891      	adds	r1, r2, r2
 8006a5a:	60b9      	str	r1, [r7, #8]
 8006a5c:	415b      	adcs	r3, r3
 8006a5e:	60fb      	str	r3, [r7, #12]
 8006a60:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006a64:	4641      	mov	r1, r8
 8006a66:	1851      	adds	r1, r2, r1
 8006a68:	6039      	str	r1, [r7, #0]
 8006a6a:	4649      	mov	r1, r9
 8006a6c:	414b      	adcs	r3, r1
 8006a6e:	607b      	str	r3, [r7, #4]
 8006a70:	f04f 0200 	mov.w	r2, #0
 8006a74:	f04f 0300 	mov.w	r3, #0
 8006a78:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006a7c:	4659      	mov	r1, fp
 8006a7e:	00cb      	lsls	r3, r1, #3
 8006a80:	4651      	mov	r1, sl
 8006a82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a86:	4651      	mov	r1, sl
 8006a88:	00ca      	lsls	r2, r1, #3
 8006a8a:	4610      	mov	r0, r2
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4603      	mov	r3, r0
 8006a90:	4642      	mov	r2, r8
 8006a92:	189b      	adds	r3, r3, r2
 8006a94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006a96:	464b      	mov	r3, r9
 8006a98:	460a      	mov	r2, r1
 8006a9a:	eb42 0303 	adc.w	r3, r2, r3
 8006a9e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006aa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	663b      	str	r3, [r7, #96]	@ 0x60
 8006aaa:	667a      	str	r2, [r7, #100]	@ 0x64
 8006aac:	f04f 0200 	mov.w	r2, #0
 8006ab0:	f04f 0300 	mov.w	r3, #0
 8006ab4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006ab8:	4649      	mov	r1, r9
 8006aba:	008b      	lsls	r3, r1, #2
 8006abc:	4641      	mov	r1, r8
 8006abe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ac2:	4641      	mov	r1, r8
 8006ac4:	008a      	lsls	r2, r1, #2
 8006ac6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006aca:	f7f9 fbf9 	bl	80002c0 <__aeabi_uldivmod>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4b0d      	ldr	r3, [pc, #52]	@ (8006b08 <UART_SetConfig+0x4e4>)
 8006ad4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ad8:	095b      	lsrs	r3, r3, #5
 8006ada:	2164      	movs	r1, #100	@ 0x64
 8006adc:	fb01 f303 	mul.w	r3, r1, r3
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	011b      	lsls	r3, r3, #4
 8006ae4:	3332      	adds	r3, #50	@ 0x32
 8006ae6:	4a08      	ldr	r2, [pc, #32]	@ (8006b08 <UART_SetConfig+0x4e4>)
 8006ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8006aec:	095b      	lsrs	r3, r3, #5
 8006aee:	f003 020f 	and.w	r2, r3, #15
 8006af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4422      	add	r2, r4
 8006afa:	609a      	str	r2, [r3, #8]
}
 8006afc:	bf00      	nop
 8006afe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006b02:	46bd      	mov	sp, r7
 8006b04:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b08:	51eb851f 	.word	0x51eb851f

08006b0c <siprintf>:
 8006b0c:	b40e      	push	{r1, r2, r3}
 8006b0e:	b500      	push	{lr}
 8006b10:	b09c      	sub	sp, #112	@ 0x70
 8006b12:	ab1d      	add	r3, sp, #116	@ 0x74
 8006b14:	9002      	str	r0, [sp, #8]
 8006b16:	9006      	str	r0, [sp, #24]
 8006b18:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006b1c:	4809      	ldr	r0, [pc, #36]	@ (8006b44 <siprintf+0x38>)
 8006b1e:	9107      	str	r1, [sp, #28]
 8006b20:	9104      	str	r1, [sp, #16]
 8006b22:	4909      	ldr	r1, [pc, #36]	@ (8006b48 <siprintf+0x3c>)
 8006b24:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b28:	9105      	str	r1, [sp, #20]
 8006b2a:	6800      	ldr	r0, [r0, #0]
 8006b2c:	9301      	str	r3, [sp, #4]
 8006b2e:	a902      	add	r1, sp, #8
 8006b30:	f000 f99c 	bl	8006e6c <_svfiprintf_r>
 8006b34:	9b02      	ldr	r3, [sp, #8]
 8006b36:	2200      	movs	r2, #0
 8006b38:	701a      	strb	r2, [r3, #0]
 8006b3a:	b01c      	add	sp, #112	@ 0x70
 8006b3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006b40:	b003      	add	sp, #12
 8006b42:	4770      	bx	lr
 8006b44:	200000f4 	.word	0x200000f4
 8006b48:	ffff0208 	.word	0xffff0208

08006b4c <memset>:
 8006b4c:	4402      	add	r2, r0
 8006b4e:	4603      	mov	r3, r0
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d100      	bne.n	8006b56 <memset+0xa>
 8006b54:	4770      	bx	lr
 8006b56:	f803 1b01 	strb.w	r1, [r3], #1
 8006b5a:	e7f9      	b.n	8006b50 <memset+0x4>

08006b5c <__errno>:
 8006b5c:	4b01      	ldr	r3, [pc, #4]	@ (8006b64 <__errno+0x8>)
 8006b5e:	6818      	ldr	r0, [r3, #0]
 8006b60:	4770      	bx	lr
 8006b62:	bf00      	nop
 8006b64:	200000f4 	.word	0x200000f4

08006b68 <__libc_init_array>:
 8006b68:	b570      	push	{r4, r5, r6, lr}
 8006b6a:	4d0d      	ldr	r5, [pc, #52]	@ (8006ba0 <__libc_init_array+0x38>)
 8006b6c:	4c0d      	ldr	r4, [pc, #52]	@ (8006ba4 <__libc_init_array+0x3c>)
 8006b6e:	1b64      	subs	r4, r4, r5
 8006b70:	10a4      	asrs	r4, r4, #2
 8006b72:	2600      	movs	r6, #0
 8006b74:	42a6      	cmp	r6, r4
 8006b76:	d109      	bne.n	8006b8c <__libc_init_array+0x24>
 8006b78:	4d0b      	ldr	r5, [pc, #44]	@ (8006ba8 <__libc_init_array+0x40>)
 8006b7a:	4c0c      	ldr	r4, [pc, #48]	@ (8006bac <__libc_init_array+0x44>)
 8006b7c:	f000 fc6e 	bl	800745c <_init>
 8006b80:	1b64      	subs	r4, r4, r5
 8006b82:	10a4      	asrs	r4, r4, #2
 8006b84:	2600      	movs	r6, #0
 8006b86:	42a6      	cmp	r6, r4
 8006b88:	d105      	bne.n	8006b96 <__libc_init_array+0x2e>
 8006b8a:	bd70      	pop	{r4, r5, r6, pc}
 8006b8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b90:	4798      	blx	r3
 8006b92:	3601      	adds	r6, #1
 8006b94:	e7ee      	b.n	8006b74 <__libc_init_array+0xc>
 8006b96:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b9a:	4798      	blx	r3
 8006b9c:	3601      	adds	r6, #1
 8006b9e:	e7f2      	b.n	8006b86 <__libc_init_array+0x1e>
 8006ba0:	08007a48 	.word	0x08007a48
 8006ba4:	08007a48 	.word	0x08007a48
 8006ba8:	08007a48 	.word	0x08007a48
 8006bac:	08007a4c 	.word	0x08007a4c

08006bb0 <__retarget_lock_acquire_recursive>:
 8006bb0:	4770      	bx	lr

08006bb2 <__retarget_lock_release_recursive>:
 8006bb2:	4770      	bx	lr

08006bb4 <strcpy>:
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006bba:	f803 2b01 	strb.w	r2, [r3], #1
 8006bbe:	2a00      	cmp	r2, #0
 8006bc0:	d1f9      	bne.n	8006bb6 <strcpy+0x2>
 8006bc2:	4770      	bx	lr

08006bc4 <_free_r>:
 8006bc4:	b538      	push	{r3, r4, r5, lr}
 8006bc6:	4605      	mov	r5, r0
 8006bc8:	2900      	cmp	r1, #0
 8006bca:	d041      	beq.n	8006c50 <_free_r+0x8c>
 8006bcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bd0:	1f0c      	subs	r4, r1, #4
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	bfb8      	it	lt
 8006bd6:	18e4      	addlt	r4, r4, r3
 8006bd8:	f000 f8e0 	bl	8006d9c <__malloc_lock>
 8006bdc:	4a1d      	ldr	r2, [pc, #116]	@ (8006c54 <_free_r+0x90>)
 8006bde:	6813      	ldr	r3, [r2, #0]
 8006be0:	b933      	cbnz	r3, 8006bf0 <_free_r+0x2c>
 8006be2:	6063      	str	r3, [r4, #4]
 8006be4:	6014      	str	r4, [r2, #0]
 8006be6:	4628      	mov	r0, r5
 8006be8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006bec:	f000 b8dc 	b.w	8006da8 <__malloc_unlock>
 8006bf0:	42a3      	cmp	r3, r4
 8006bf2:	d908      	bls.n	8006c06 <_free_r+0x42>
 8006bf4:	6820      	ldr	r0, [r4, #0]
 8006bf6:	1821      	adds	r1, r4, r0
 8006bf8:	428b      	cmp	r3, r1
 8006bfa:	bf01      	itttt	eq
 8006bfc:	6819      	ldreq	r1, [r3, #0]
 8006bfe:	685b      	ldreq	r3, [r3, #4]
 8006c00:	1809      	addeq	r1, r1, r0
 8006c02:	6021      	streq	r1, [r4, #0]
 8006c04:	e7ed      	b.n	8006be2 <_free_r+0x1e>
 8006c06:	461a      	mov	r2, r3
 8006c08:	685b      	ldr	r3, [r3, #4]
 8006c0a:	b10b      	cbz	r3, 8006c10 <_free_r+0x4c>
 8006c0c:	42a3      	cmp	r3, r4
 8006c0e:	d9fa      	bls.n	8006c06 <_free_r+0x42>
 8006c10:	6811      	ldr	r1, [r2, #0]
 8006c12:	1850      	adds	r0, r2, r1
 8006c14:	42a0      	cmp	r0, r4
 8006c16:	d10b      	bne.n	8006c30 <_free_r+0x6c>
 8006c18:	6820      	ldr	r0, [r4, #0]
 8006c1a:	4401      	add	r1, r0
 8006c1c:	1850      	adds	r0, r2, r1
 8006c1e:	4283      	cmp	r3, r0
 8006c20:	6011      	str	r1, [r2, #0]
 8006c22:	d1e0      	bne.n	8006be6 <_free_r+0x22>
 8006c24:	6818      	ldr	r0, [r3, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	6053      	str	r3, [r2, #4]
 8006c2a:	4408      	add	r0, r1
 8006c2c:	6010      	str	r0, [r2, #0]
 8006c2e:	e7da      	b.n	8006be6 <_free_r+0x22>
 8006c30:	d902      	bls.n	8006c38 <_free_r+0x74>
 8006c32:	230c      	movs	r3, #12
 8006c34:	602b      	str	r3, [r5, #0]
 8006c36:	e7d6      	b.n	8006be6 <_free_r+0x22>
 8006c38:	6820      	ldr	r0, [r4, #0]
 8006c3a:	1821      	adds	r1, r4, r0
 8006c3c:	428b      	cmp	r3, r1
 8006c3e:	bf04      	itt	eq
 8006c40:	6819      	ldreq	r1, [r3, #0]
 8006c42:	685b      	ldreq	r3, [r3, #4]
 8006c44:	6063      	str	r3, [r4, #4]
 8006c46:	bf04      	itt	eq
 8006c48:	1809      	addeq	r1, r1, r0
 8006c4a:	6021      	streq	r1, [r4, #0]
 8006c4c:	6054      	str	r4, [r2, #4]
 8006c4e:	e7ca      	b.n	8006be6 <_free_r+0x22>
 8006c50:	bd38      	pop	{r3, r4, r5, pc}
 8006c52:	bf00      	nop
 8006c54:	200003e8 	.word	0x200003e8

08006c58 <sbrk_aligned>:
 8006c58:	b570      	push	{r4, r5, r6, lr}
 8006c5a:	4e0f      	ldr	r6, [pc, #60]	@ (8006c98 <sbrk_aligned+0x40>)
 8006c5c:	460c      	mov	r4, r1
 8006c5e:	6831      	ldr	r1, [r6, #0]
 8006c60:	4605      	mov	r5, r0
 8006c62:	b911      	cbnz	r1, 8006c6a <sbrk_aligned+0x12>
 8006c64:	f000 fba6 	bl	80073b4 <_sbrk_r>
 8006c68:	6030      	str	r0, [r6, #0]
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	f000 fba1 	bl	80073b4 <_sbrk_r>
 8006c72:	1c43      	adds	r3, r0, #1
 8006c74:	d103      	bne.n	8006c7e <sbrk_aligned+0x26>
 8006c76:	f04f 34ff 	mov.w	r4, #4294967295
 8006c7a:	4620      	mov	r0, r4
 8006c7c:	bd70      	pop	{r4, r5, r6, pc}
 8006c7e:	1cc4      	adds	r4, r0, #3
 8006c80:	f024 0403 	bic.w	r4, r4, #3
 8006c84:	42a0      	cmp	r0, r4
 8006c86:	d0f8      	beq.n	8006c7a <sbrk_aligned+0x22>
 8006c88:	1a21      	subs	r1, r4, r0
 8006c8a:	4628      	mov	r0, r5
 8006c8c:	f000 fb92 	bl	80073b4 <_sbrk_r>
 8006c90:	3001      	adds	r0, #1
 8006c92:	d1f2      	bne.n	8006c7a <sbrk_aligned+0x22>
 8006c94:	e7ef      	b.n	8006c76 <sbrk_aligned+0x1e>
 8006c96:	bf00      	nop
 8006c98:	200003e4 	.word	0x200003e4

08006c9c <_malloc_r>:
 8006c9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ca0:	1ccd      	adds	r5, r1, #3
 8006ca2:	f025 0503 	bic.w	r5, r5, #3
 8006ca6:	3508      	adds	r5, #8
 8006ca8:	2d0c      	cmp	r5, #12
 8006caa:	bf38      	it	cc
 8006cac:	250c      	movcc	r5, #12
 8006cae:	2d00      	cmp	r5, #0
 8006cb0:	4606      	mov	r6, r0
 8006cb2:	db01      	blt.n	8006cb8 <_malloc_r+0x1c>
 8006cb4:	42a9      	cmp	r1, r5
 8006cb6:	d904      	bls.n	8006cc2 <_malloc_r+0x26>
 8006cb8:	230c      	movs	r3, #12
 8006cba:	6033      	str	r3, [r6, #0]
 8006cbc:	2000      	movs	r0, #0
 8006cbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cc2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006d98 <_malloc_r+0xfc>
 8006cc6:	f000 f869 	bl	8006d9c <__malloc_lock>
 8006cca:	f8d8 3000 	ldr.w	r3, [r8]
 8006cce:	461c      	mov	r4, r3
 8006cd0:	bb44      	cbnz	r4, 8006d24 <_malloc_r+0x88>
 8006cd2:	4629      	mov	r1, r5
 8006cd4:	4630      	mov	r0, r6
 8006cd6:	f7ff ffbf 	bl	8006c58 <sbrk_aligned>
 8006cda:	1c43      	adds	r3, r0, #1
 8006cdc:	4604      	mov	r4, r0
 8006cde:	d158      	bne.n	8006d92 <_malloc_r+0xf6>
 8006ce0:	f8d8 4000 	ldr.w	r4, [r8]
 8006ce4:	4627      	mov	r7, r4
 8006ce6:	2f00      	cmp	r7, #0
 8006ce8:	d143      	bne.n	8006d72 <_malloc_r+0xd6>
 8006cea:	2c00      	cmp	r4, #0
 8006cec:	d04b      	beq.n	8006d86 <_malloc_r+0xea>
 8006cee:	6823      	ldr	r3, [r4, #0]
 8006cf0:	4639      	mov	r1, r7
 8006cf2:	4630      	mov	r0, r6
 8006cf4:	eb04 0903 	add.w	r9, r4, r3
 8006cf8:	f000 fb5c 	bl	80073b4 <_sbrk_r>
 8006cfc:	4581      	cmp	r9, r0
 8006cfe:	d142      	bne.n	8006d86 <_malloc_r+0xea>
 8006d00:	6821      	ldr	r1, [r4, #0]
 8006d02:	1a6d      	subs	r5, r5, r1
 8006d04:	4629      	mov	r1, r5
 8006d06:	4630      	mov	r0, r6
 8006d08:	f7ff ffa6 	bl	8006c58 <sbrk_aligned>
 8006d0c:	3001      	adds	r0, #1
 8006d0e:	d03a      	beq.n	8006d86 <_malloc_r+0xea>
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	442b      	add	r3, r5
 8006d14:	6023      	str	r3, [r4, #0]
 8006d16:	f8d8 3000 	ldr.w	r3, [r8]
 8006d1a:	685a      	ldr	r2, [r3, #4]
 8006d1c:	bb62      	cbnz	r2, 8006d78 <_malloc_r+0xdc>
 8006d1e:	f8c8 7000 	str.w	r7, [r8]
 8006d22:	e00f      	b.n	8006d44 <_malloc_r+0xa8>
 8006d24:	6822      	ldr	r2, [r4, #0]
 8006d26:	1b52      	subs	r2, r2, r5
 8006d28:	d420      	bmi.n	8006d6c <_malloc_r+0xd0>
 8006d2a:	2a0b      	cmp	r2, #11
 8006d2c:	d917      	bls.n	8006d5e <_malloc_r+0xc2>
 8006d2e:	1961      	adds	r1, r4, r5
 8006d30:	42a3      	cmp	r3, r4
 8006d32:	6025      	str	r5, [r4, #0]
 8006d34:	bf18      	it	ne
 8006d36:	6059      	strne	r1, [r3, #4]
 8006d38:	6863      	ldr	r3, [r4, #4]
 8006d3a:	bf08      	it	eq
 8006d3c:	f8c8 1000 	streq.w	r1, [r8]
 8006d40:	5162      	str	r2, [r4, r5]
 8006d42:	604b      	str	r3, [r1, #4]
 8006d44:	4630      	mov	r0, r6
 8006d46:	f000 f82f 	bl	8006da8 <__malloc_unlock>
 8006d4a:	f104 000b 	add.w	r0, r4, #11
 8006d4e:	1d23      	adds	r3, r4, #4
 8006d50:	f020 0007 	bic.w	r0, r0, #7
 8006d54:	1ac2      	subs	r2, r0, r3
 8006d56:	bf1c      	itt	ne
 8006d58:	1a1b      	subne	r3, r3, r0
 8006d5a:	50a3      	strne	r3, [r4, r2]
 8006d5c:	e7af      	b.n	8006cbe <_malloc_r+0x22>
 8006d5e:	6862      	ldr	r2, [r4, #4]
 8006d60:	42a3      	cmp	r3, r4
 8006d62:	bf0c      	ite	eq
 8006d64:	f8c8 2000 	streq.w	r2, [r8]
 8006d68:	605a      	strne	r2, [r3, #4]
 8006d6a:	e7eb      	b.n	8006d44 <_malloc_r+0xa8>
 8006d6c:	4623      	mov	r3, r4
 8006d6e:	6864      	ldr	r4, [r4, #4]
 8006d70:	e7ae      	b.n	8006cd0 <_malloc_r+0x34>
 8006d72:	463c      	mov	r4, r7
 8006d74:	687f      	ldr	r7, [r7, #4]
 8006d76:	e7b6      	b.n	8006ce6 <_malloc_r+0x4a>
 8006d78:	461a      	mov	r2, r3
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	42a3      	cmp	r3, r4
 8006d7e:	d1fb      	bne.n	8006d78 <_malloc_r+0xdc>
 8006d80:	2300      	movs	r3, #0
 8006d82:	6053      	str	r3, [r2, #4]
 8006d84:	e7de      	b.n	8006d44 <_malloc_r+0xa8>
 8006d86:	230c      	movs	r3, #12
 8006d88:	6033      	str	r3, [r6, #0]
 8006d8a:	4630      	mov	r0, r6
 8006d8c:	f000 f80c 	bl	8006da8 <__malloc_unlock>
 8006d90:	e794      	b.n	8006cbc <_malloc_r+0x20>
 8006d92:	6005      	str	r5, [r0, #0]
 8006d94:	e7d6      	b.n	8006d44 <_malloc_r+0xa8>
 8006d96:	bf00      	nop
 8006d98:	200003e8 	.word	0x200003e8

08006d9c <__malloc_lock>:
 8006d9c:	4801      	ldr	r0, [pc, #4]	@ (8006da4 <__malloc_lock+0x8>)
 8006d9e:	f7ff bf07 	b.w	8006bb0 <__retarget_lock_acquire_recursive>
 8006da2:	bf00      	nop
 8006da4:	200003e0 	.word	0x200003e0

08006da8 <__malloc_unlock>:
 8006da8:	4801      	ldr	r0, [pc, #4]	@ (8006db0 <__malloc_unlock+0x8>)
 8006daa:	f7ff bf02 	b.w	8006bb2 <__retarget_lock_release_recursive>
 8006dae:	bf00      	nop
 8006db0:	200003e0 	.word	0x200003e0

08006db4 <__ssputs_r>:
 8006db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006db8:	688e      	ldr	r6, [r1, #8]
 8006dba:	461f      	mov	r7, r3
 8006dbc:	42be      	cmp	r6, r7
 8006dbe:	680b      	ldr	r3, [r1, #0]
 8006dc0:	4682      	mov	sl, r0
 8006dc2:	460c      	mov	r4, r1
 8006dc4:	4690      	mov	r8, r2
 8006dc6:	d82d      	bhi.n	8006e24 <__ssputs_r+0x70>
 8006dc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006dcc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006dd0:	d026      	beq.n	8006e20 <__ssputs_r+0x6c>
 8006dd2:	6965      	ldr	r5, [r4, #20]
 8006dd4:	6909      	ldr	r1, [r1, #16]
 8006dd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dda:	eba3 0901 	sub.w	r9, r3, r1
 8006dde:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006de2:	1c7b      	adds	r3, r7, #1
 8006de4:	444b      	add	r3, r9
 8006de6:	106d      	asrs	r5, r5, #1
 8006de8:	429d      	cmp	r5, r3
 8006dea:	bf38      	it	cc
 8006dec:	461d      	movcc	r5, r3
 8006dee:	0553      	lsls	r3, r2, #21
 8006df0:	d527      	bpl.n	8006e42 <__ssputs_r+0x8e>
 8006df2:	4629      	mov	r1, r5
 8006df4:	f7ff ff52 	bl	8006c9c <_malloc_r>
 8006df8:	4606      	mov	r6, r0
 8006dfa:	b360      	cbz	r0, 8006e56 <__ssputs_r+0xa2>
 8006dfc:	6921      	ldr	r1, [r4, #16]
 8006dfe:	464a      	mov	r2, r9
 8006e00:	f000 fae8 	bl	80073d4 <memcpy>
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006e0a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006e0e:	81a3      	strh	r3, [r4, #12]
 8006e10:	6126      	str	r6, [r4, #16]
 8006e12:	6165      	str	r5, [r4, #20]
 8006e14:	444e      	add	r6, r9
 8006e16:	eba5 0509 	sub.w	r5, r5, r9
 8006e1a:	6026      	str	r6, [r4, #0]
 8006e1c:	60a5      	str	r5, [r4, #8]
 8006e1e:	463e      	mov	r6, r7
 8006e20:	42be      	cmp	r6, r7
 8006e22:	d900      	bls.n	8006e26 <__ssputs_r+0x72>
 8006e24:	463e      	mov	r6, r7
 8006e26:	6820      	ldr	r0, [r4, #0]
 8006e28:	4632      	mov	r2, r6
 8006e2a:	4641      	mov	r1, r8
 8006e2c:	f000 faa8 	bl	8007380 <memmove>
 8006e30:	68a3      	ldr	r3, [r4, #8]
 8006e32:	1b9b      	subs	r3, r3, r6
 8006e34:	60a3      	str	r3, [r4, #8]
 8006e36:	6823      	ldr	r3, [r4, #0]
 8006e38:	4433      	add	r3, r6
 8006e3a:	6023      	str	r3, [r4, #0]
 8006e3c:	2000      	movs	r0, #0
 8006e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e42:	462a      	mov	r2, r5
 8006e44:	f000 fad4 	bl	80073f0 <_realloc_r>
 8006e48:	4606      	mov	r6, r0
 8006e4a:	2800      	cmp	r0, #0
 8006e4c:	d1e0      	bne.n	8006e10 <__ssputs_r+0x5c>
 8006e4e:	6921      	ldr	r1, [r4, #16]
 8006e50:	4650      	mov	r0, sl
 8006e52:	f7ff feb7 	bl	8006bc4 <_free_r>
 8006e56:	230c      	movs	r3, #12
 8006e58:	f8ca 3000 	str.w	r3, [sl]
 8006e5c:	89a3      	ldrh	r3, [r4, #12]
 8006e5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e62:	81a3      	strh	r3, [r4, #12]
 8006e64:	f04f 30ff 	mov.w	r0, #4294967295
 8006e68:	e7e9      	b.n	8006e3e <__ssputs_r+0x8a>
	...

08006e6c <_svfiprintf_r>:
 8006e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e70:	4698      	mov	r8, r3
 8006e72:	898b      	ldrh	r3, [r1, #12]
 8006e74:	061b      	lsls	r3, r3, #24
 8006e76:	b09d      	sub	sp, #116	@ 0x74
 8006e78:	4607      	mov	r7, r0
 8006e7a:	460d      	mov	r5, r1
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	d510      	bpl.n	8006ea2 <_svfiprintf_r+0x36>
 8006e80:	690b      	ldr	r3, [r1, #16]
 8006e82:	b973      	cbnz	r3, 8006ea2 <_svfiprintf_r+0x36>
 8006e84:	2140      	movs	r1, #64	@ 0x40
 8006e86:	f7ff ff09 	bl	8006c9c <_malloc_r>
 8006e8a:	6028      	str	r0, [r5, #0]
 8006e8c:	6128      	str	r0, [r5, #16]
 8006e8e:	b930      	cbnz	r0, 8006e9e <_svfiprintf_r+0x32>
 8006e90:	230c      	movs	r3, #12
 8006e92:	603b      	str	r3, [r7, #0]
 8006e94:	f04f 30ff 	mov.w	r0, #4294967295
 8006e98:	b01d      	add	sp, #116	@ 0x74
 8006e9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e9e:	2340      	movs	r3, #64	@ 0x40
 8006ea0:	616b      	str	r3, [r5, #20]
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ea6:	2320      	movs	r3, #32
 8006ea8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006eac:	f8cd 800c 	str.w	r8, [sp, #12]
 8006eb0:	2330      	movs	r3, #48	@ 0x30
 8006eb2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007050 <_svfiprintf_r+0x1e4>
 8006eb6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006eba:	f04f 0901 	mov.w	r9, #1
 8006ebe:	4623      	mov	r3, r4
 8006ec0:	469a      	mov	sl, r3
 8006ec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ec6:	b10a      	cbz	r2, 8006ecc <_svfiprintf_r+0x60>
 8006ec8:	2a25      	cmp	r2, #37	@ 0x25
 8006eca:	d1f9      	bne.n	8006ec0 <_svfiprintf_r+0x54>
 8006ecc:	ebba 0b04 	subs.w	fp, sl, r4
 8006ed0:	d00b      	beq.n	8006eea <_svfiprintf_r+0x7e>
 8006ed2:	465b      	mov	r3, fp
 8006ed4:	4622      	mov	r2, r4
 8006ed6:	4629      	mov	r1, r5
 8006ed8:	4638      	mov	r0, r7
 8006eda:	f7ff ff6b 	bl	8006db4 <__ssputs_r>
 8006ede:	3001      	adds	r0, #1
 8006ee0:	f000 80a7 	beq.w	8007032 <_svfiprintf_r+0x1c6>
 8006ee4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ee6:	445a      	add	r2, fp
 8006ee8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006eea:	f89a 3000 	ldrb.w	r3, [sl]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 809f 	beq.w	8007032 <_svfiprintf_r+0x1c6>
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8006efa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006efe:	f10a 0a01 	add.w	sl, sl, #1
 8006f02:	9304      	str	r3, [sp, #16]
 8006f04:	9307      	str	r3, [sp, #28]
 8006f06:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006f0a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006f0c:	4654      	mov	r4, sl
 8006f0e:	2205      	movs	r2, #5
 8006f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f14:	484e      	ldr	r0, [pc, #312]	@ (8007050 <_svfiprintf_r+0x1e4>)
 8006f16:	f7f9 f983 	bl	8000220 <memchr>
 8006f1a:	9a04      	ldr	r2, [sp, #16]
 8006f1c:	b9d8      	cbnz	r0, 8006f56 <_svfiprintf_r+0xea>
 8006f1e:	06d0      	lsls	r0, r2, #27
 8006f20:	bf44      	itt	mi
 8006f22:	2320      	movmi	r3, #32
 8006f24:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f28:	0711      	lsls	r1, r2, #28
 8006f2a:	bf44      	itt	mi
 8006f2c:	232b      	movmi	r3, #43	@ 0x2b
 8006f2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006f32:	f89a 3000 	ldrb.w	r3, [sl]
 8006f36:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f38:	d015      	beq.n	8006f66 <_svfiprintf_r+0xfa>
 8006f3a:	9a07      	ldr	r2, [sp, #28]
 8006f3c:	4654      	mov	r4, sl
 8006f3e:	2000      	movs	r0, #0
 8006f40:	f04f 0c0a 	mov.w	ip, #10
 8006f44:	4621      	mov	r1, r4
 8006f46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f4a:	3b30      	subs	r3, #48	@ 0x30
 8006f4c:	2b09      	cmp	r3, #9
 8006f4e:	d94b      	bls.n	8006fe8 <_svfiprintf_r+0x17c>
 8006f50:	b1b0      	cbz	r0, 8006f80 <_svfiprintf_r+0x114>
 8006f52:	9207      	str	r2, [sp, #28]
 8006f54:	e014      	b.n	8006f80 <_svfiprintf_r+0x114>
 8006f56:	eba0 0308 	sub.w	r3, r0, r8
 8006f5a:	fa09 f303 	lsl.w	r3, r9, r3
 8006f5e:	4313      	orrs	r3, r2
 8006f60:	9304      	str	r3, [sp, #16]
 8006f62:	46a2      	mov	sl, r4
 8006f64:	e7d2      	b.n	8006f0c <_svfiprintf_r+0xa0>
 8006f66:	9b03      	ldr	r3, [sp, #12]
 8006f68:	1d19      	adds	r1, r3, #4
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	9103      	str	r1, [sp, #12]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	bfbb      	ittet	lt
 8006f72:	425b      	neglt	r3, r3
 8006f74:	f042 0202 	orrlt.w	r2, r2, #2
 8006f78:	9307      	strge	r3, [sp, #28]
 8006f7a:	9307      	strlt	r3, [sp, #28]
 8006f7c:	bfb8      	it	lt
 8006f7e:	9204      	strlt	r2, [sp, #16]
 8006f80:	7823      	ldrb	r3, [r4, #0]
 8006f82:	2b2e      	cmp	r3, #46	@ 0x2e
 8006f84:	d10a      	bne.n	8006f9c <_svfiprintf_r+0x130>
 8006f86:	7863      	ldrb	r3, [r4, #1]
 8006f88:	2b2a      	cmp	r3, #42	@ 0x2a
 8006f8a:	d132      	bne.n	8006ff2 <_svfiprintf_r+0x186>
 8006f8c:	9b03      	ldr	r3, [sp, #12]
 8006f8e:	1d1a      	adds	r2, r3, #4
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	9203      	str	r2, [sp, #12]
 8006f94:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006f98:	3402      	adds	r4, #2
 8006f9a:	9305      	str	r3, [sp, #20]
 8006f9c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007060 <_svfiprintf_r+0x1f4>
 8006fa0:	7821      	ldrb	r1, [r4, #0]
 8006fa2:	2203      	movs	r2, #3
 8006fa4:	4650      	mov	r0, sl
 8006fa6:	f7f9 f93b 	bl	8000220 <memchr>
 8006faa:	b138      	cbz	r0, 8006fbc <_svfiprintf_r+0x150>
 8006fac:	9b04      	ldr	r3, [sp, #16]
 8006fae:	eba0 000a 	sub.w	r0, r0, sl
 8006fb2:	2240      	movs	r2, #64	@ 0x40
 8006fb4:	4082      	lsls	r2, r0
 8006fb6:	4313      	orrs	r3, r2
 8006fb8:	3401      	adds	r4, #1
 8006fba:	9304      	str	r3, [sp, #16]
 8006fbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fc0:	4824      	ldr	r0, [pc, #144]	@ (8007054 <_svfiprintf_r+0x1e8>)
 8006fc2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006fc6:	2206      	movs	r2, #6
 8006fc8:	f7f9 f92a 	bl	8000220 <memchr>
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d036      	beq.n	800703e <_svfiprintf_r+0x1d2>
 8006fd0:	4b21      	ldr	r3, [pc, #132]	@ (8007058 <_svfiprintf_r+0x1ec>)
 8006fd2:	bb1b      	cbnz	r3, 800701c <_svfiprintf_r+0x1b0>
 8006fd4:	9b03      	ldr	r3, [sp, #12]
 8006fd6:	3307      	adds	r3, #7
 8006fd8:	f023 0307 	bic.w	r3, r3, #7
 8006fdc:	3308      	adds	r3, #8
 8006fde:	9303      	str	r3, [sp, #12]
 8006fe0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006fe2:	4433      	add	r3, r6
 8006fe4:	9309      	str	r3, [sp, #36]	@ 0x24
 8006fe6:	e76a      	b.n	8006ebe <_svfiprintf_r+0x52>
 8006fe8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fec:	460c      	mov	r4, r1
 8006fee:	2001      	movs	r0, #1
 8006ff0:	e7a8      	b.n	8006f44 <_svfiprintf_r+0xd8>
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	3401      	adds	r4, #1
 8006ff6:	9305      	str	r3, [sp, #20]
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	f04f 0c0a 	mov.w	ip, #10
 8006ffe:	4620      	mov	r0, r4
 8007000:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007004:	3a30      	subs	r2, #48	@ 0x30
 8007006:	2a09      	cmp	r2, #9
 8007008:	d903      	bls.n	8007012 <_svfiprintf_r+0x1a6>
 800700a:	2b00      	cmp	r3, #0
 800700c:	d0c6      	beq.n	8006f9c <_svfiprintf_r+0x130>
 800700e:	9105      	str	r1, [sp, #20]
 8007010:	e7c4      	b.n	8006f9c <_svfiprintf_r+0x130>
 8007012:	fb0c 2101 	mla	r1, ip, r1, r2
 8007016:	4604      	mov	r4, r0
 8007018:	2301      	movs	r3, #1
 800701a:	e7f0      	b.n	8006ffe <_svfiprintf_r+0x192>
 800701c:	ab03      	add	r3, sp, #12
 800701e:	9300      	str	r3, [sp, #0]
 8007020:	462a      	mov	r2, r5
 8007022:	4b0e      	ldr	r3, [pc, #56]	@ (800705c <_svfiprintf_r+0x1f0>)
 8007024:	a904      	add	r1, sp, #16
 8007026:	4638      	mov	r0, r7
 8007028:	f3af 8000 	nop.w
 800702c:	1c42      	adds	r2, r0, #1
 800702e:	4606      	mov	r6, r0
 8007030:	d1d6      	bne.n	8006fe0 <_svfiprintf_r+0x174>
 8007032:	89ab      	ldrh	r3, [r5, #12]
 8007034:	065b      	lsls	r3, r3, #25
 8007036:	f53f af2d 	bmi.w	8006e94 <_svfiprintf_r+0x28>
 800703a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800703c:	e72c      	b.n	8006e98 <_svfiprintf_r+0x2c>
 800703e:	ab03      	add	r3, sp, #12
 8007040:	9300      	str	r3, [sp, #0]
 8007042:	462a      	mov	r2, r5
 8007044:	4b05      	ldr	r3, [pc, #20]	@ (800705c <_svfiprintf_r+0x1f0>)
 8007046:	a904      	add	r1, sp, #16
 8007048:	4638      	mov	r0, r7
 800704a:	f000 f879 	bl	8007140 <_printf_i>
 800704e:	e7ed      	b.n	800702c <_svfiprintf_r+0x1c0>
 8007050:	08007a0c 	.word	0x08007a0c
 8007054:	08007a16 	.word	0x08007a16
 8007058:	00000000 	.word	0x00000000
 800705c:	08006db5 	.word	0x08006db5
 8007060:	08007a12 	.word	0x08007a12

08007064 <_printf_common>:
 8007064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007068:	4616      	mov	r6, r2
 800706a:	4698      	mov	r8, r3
 800706c:	688a      	ldr	r2, [r1, #8]
 800706e:	690b      	ldr	r3, [r1, #16]
 8007070:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007074:	4293      	cmp	r3, r2
 8007076:	bfb8      	it	lt
 8007078:	4613      	movlt	r3, r2
 800707a:	6033      	str	r3, [r6, #0]
 800707c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007080:	4607      	mov	r7, r0
 8007082:	460c      	mov	r4, r1
 8007084:	b10a      	cbz	r2, 800708a <_printf_common+0x26>
 8007086:	3301      	adds	r3, #1
 8007088:	6033      	str	r3, [r6, #0]
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	0699      	lsls	r1, r3, #26
 800708e:	bf42      	ittt	mi
 8007090:	6833      	ldrmi	r3, [r6, #0]
 8007092:	3302      	addmi	r3, #2
 8007094:	6033      	strmi	r3, [r6, #0]
 8007096:	6825      	ldr	r5, [r4, #0]
 8007098:	f015 0506 	ands.w	r5, r5, #6
 800709c:	d106      	bne.n	80070ac <_printf_common+0x48>
 800709e:	f104 0a19 	add.w	sl, r4, #25
 80070a2:	68e3      	ldr	r3, [r4, #12]
 80070a4:	6832      	ldr	r2, [r6, #0]
 80070a6:	1a9b      	subs	r3, r3, r2
 80070a8:	42ab      	cmp	r3, r5
 80070aa:	dc26      	bgt.n	80070fa <_printf_common+0x96>
 80070ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80070b0:	6822      	ldr	r2, [r4, #0]
 80070b2:	3b00      	subs	r3, #0
 80070b4:	bf18      	it	ne
 80070b6:	2301      	movne	r3, #1
 80070b8:	0692      	lsls	r2, r2, #26
 80070ba:	d42b      	bmi.n	8007114 <_printf_common+0xb0>
 80070bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80070c0:	4641      	mov	r1, r8
 80070c2:	4638      	mov	r0, r7
 80070c4:	47c8      	blx	r9
 80070c6:	3001      	adds	r0, #1
 80070c8:	d01e      	beq.n	8007108 <_printf_common+0xa4>
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	6922      	ldr	r2, [r4, #16]
 80070ce:	f003 0306 	and.w	r3, r3, #6
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	bf02      	ittt	eq
 80070d6:	68e5      	ldreq	r5, [r4, #12]
 80070d8:	6833      	ldreq	r3, [r6, #0]
 80070da:	1aed      	subeq	r5, r5, r3
 80070dc:	68a3      	ldr	r3, [r4, #8]
 80070de:	bf0c      	ite	eq
 80070e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80070e4:	2500      	movne	r5, #0
 80070e6:	4293      	cmp	r3, r2
 80070e8:	bfc4      	itt	gt
 80070ea:	1a9b      	subgt	r3, r3, r2
 80070ec:	18ed      	addgt	r5, r5, r3
 80070ee:	2600      	movs	r6, #0
 80070f0:	341a      	adds	r4, #26
 80070f2:	42b5      	cmp	r5, r6
 80070f4:	d11a      	bne.n	800712c <_printf_common+0xc8>
 80070f6:	2000      	movs	r0, #0
 80070f8:	e008      	b.n	800710c <_printf_common+0xa8>
 80070fa:	2301      	movs	r3, #1
 80070fc:	4652      	mov	r2, sl
 80070fe:	4641      	mov	r1, r8
 8007100:	4638      	mov	r0, r7
 8007102:	47c8      	blx	r9
 8007104:	3001      	adds	r0, #1
 8007106:	d103      	bne.n	8007110 <_printf_common+0xac>
 8007108:	f04f 30ff 	mov.w	r0, #4294967295
 800710c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007110:	3501      	adds	r5, #1
 8007112:	e7c6      	b.n	80070a2 <_printf_common+0x3e>
 8007114:	18e1      	adds	r1, r4, r3
 8007116:	1c5a      	adds	r2, r3, #1
 8007118:	2030      	movs	r0, #48	@ 0x30
 800711a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800711e:	4422      	add	r2, r4
 8007120:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007124:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007128:	3302      	adds	r3, #2
 800712a:	e7c7      	b.n	80070bc <_printf_common+0x58>
 800712c:	2301      	movs	r3, #1
 800712e:	4622      	mov	r2, r4
 8007130:	4641      	mov	r1, r8
 8007132:	4638      	mov	r0, r7
 8007134:	47c8      	blx	r9
 8007136:	3001      	adds	r0, #1
 8007138:	d0e6      	beq.n	8007108 <_printf_common+0xa4>
 800713a:	3601      	adds	r6, #1
 800713c:	e7d9      	b.n	80070f2 <_printf_common+0x8e>
	...

08007140 <_printf_i>:
 8007140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007144:	7e0f      	ldrb	r7, [r1, #24]
 8007146:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007148:	2f78      	cmp	r7, #120	@ 0x78
 800714a:	4691      	mov	r9, r2
 800714c:	4680      	mov	r8, r0
 800714e:	460c      	mov	r4, r1
 8007150:	469a      	mov	sl, r3
 8007152:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007156:	d807      	bhi.n	8007168 <_printf_i+0x28>
 8007158:	2f62      	cmp	r7, #98	@ 0x62
 800715a:	d80a      	bhi.n	8007172 <_printf_i+0x32>
 800715c:	2f00      	cmp	r7, #0
 800715e:	f000 80d2 	beq.w	8007306 <_printf_i+0x1c6>
 8007162:	2f58      	cmp	r7, #88	@ 0x58
 8007164:	f000 80b9 	beq.w	80072da <_printf_i+0x19a>
 8007168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800716c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007170:	e03a      	b.n	80071e8 <_printf_i+0xa8>
 8007172:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007176:	2b15      	cmp	r3, #21
 8007178:	d8f6      	bhi.n	8007168 <_printf_i+0x28>
 800717a:	a101      	add	r1, pc, #4	@ (adr r1, 8007180 <_printf_i+0x40>)
 800717c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007180:	080071d9 	.word	0x080071d9
 8007184:	080071ed 	.word	0x080071ed
 8007188:	08007169 	.word	0x08007169
 800718c:	08007169 	.word	0x08007169
 8007190:	08007169 	.word	0x08007169
 8007194:	08007169 	.word	0x08007169
 8007198:	080071ed 	.word	0x080071ed
 800719c:	08007169 	.word	0x08007169
 80071a0:	08007169 	.word	0x08007169
 80071a4:	08007169 	.word	0x08007169
 80071a8:	08007169 	.word	0x08007169
 80071ac:	080072ed 	.word	0x080072ed
 80071b0:	08007217 	.word	0x08007217
 80071b4:	080072a7 	.word	0x080072a7
 80071b8:	08007169 	.word	0x08007169
 80071bc:	08007169 	.word	0x08007169
 80071c0:	0800730f 	.word	0x0800730f
 80071c4:	08007169 	.word	0x08007169
 80071c8:	08007217 	.word	0x08007217
 80071cc:	08007169 	.word	0x08007169
 80071d0:	08007169 	.word	0x08007169
 80071d4:	080072af 	.word	0x080072af
 80071d8:	6833      	ldr	r3, [r6, #0]
 80071da:	1d1a      	adds	r2, r3, #4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	6032      	str	r2, [r6, #0]
 80071e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80071e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80071e8:	2301      	movs	r3, #1
 80071ea:	e09d      	b.n	8007328 <_printf_i+0x1e8>
 80071ec:	6833      	ldr	r3, [r6, #0]
 80071ee:	6820      	ldr	r0, [r4, #0]
 80071f0:	1d19      	adds	r1, r3, #4
 80071f2:	6031      	str	r1, [r6, #0]
 80071f4:	0606      	lsls	r6, r0, #24
 80071f6:	d501      	bpl.n	80071fc <_printf_i+0xbc>
 80071f8:	681d      	ldr	r5, [r3, #0]
 80071fa:	e003      	b.n	8007204 <_printf_i+0xc4>
 80071fc:	0645      	lsls	r5, r0, #25
 80071fe:	d5fb      	bpl.n	80071f8 <_printf_i+0xb8>
 8007200:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007204:	2d00      	cmp	r5, #0
 8007206:	da03      	bge.n	8007210 <_printf_i+0xd0>
 8007208:	232d      	movs	r3, #45	@ 0x2d
 800720a:	426d      	negs	r5, r5
 800720c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007210:	4859      	ldr	r0, [pc, #356]	@ (8007378 <_printf_i+0x238>)
 8007212:	230a      	movs	r3, #10
 8007214:	e011      	b.n	800723a <_printf_i+0xfa>
 8007216:	6821      	ldr	r1, [r4, #0]
 8007218:	6833      	ldr	r3, [r6, #0]
 800721a:	0608      	lsls	r0, r1, #24
 800721c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007220:	d402      	bmi.n	8007228 <_printf_i+0xe8>
 8007222:	0649      	lsls	r1, r1, #25
 8007224:	bf48      	it	mi
 8007226:	b2ad      	uxthmi	r5, r5
 8007228:	2f6f      	cmp	r7, #111	@ 0x6f
 800722a:	4853      	ldr	r0, [pc, #332]	@ (8007378 <_printf_i+0x238>)
 800722c:	6033      	str	r3, [r6, #0]
 800722e:	bf14      	ite	ne
 8007230:	230a      	movne	r3, #10
 8007232:	2308      	moveq	r3, #8
 8007234:	2100      	movs	r1, #0
 8007236:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800723a:	6866      	ldr	r6, [r4, #4]
 800723c:	60a6      	str	r6, [r4, #8]
 800723e:	2e00      	cmp	r6, #0
 8007240:	bfa2      	ittt	ge
 8007242:	6821      	ldrge	r1, [r4, #0]
 8007244:	f021 0104 	bicge.w	r1, r1, #4
 8007248:	6021      	strge	r1, [r4, #0]
 800724a:	b90d      	cbnz	r5, 8007250 <_printf_i+0x110>
 800724c:	2e00      	cmp	r6, #0
 800724e:	d04b      	beq.n	80072e8 <_printf_i+0x1a8>
 8007250:	4616      	mov	r6, r2
 8007252:	fbb5 f1f3 	udiv	r1, r5, r3
 8007256:	fb03 5711 	mls	r7, r3, r1, r5
 800725a:	5dc7      	ldrb	r7, [r0, r7]
 800725c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007260:	462f      	mov	r7, r5
 8007262:	42bb      	cmp	r3, r7
 8007264:	460d      	mov	r5, r1
 8007266:	d9f4      	bls.n	8007252 <_printf_i+0x112>
 8007268:	2b08      	cmp	r3, #8
 800726a:	d10b      	bne.n	8007284 <_printf_i+0x144>
 800726c:	6823      	ldr	r3, [r4, #0]
 800726e:	07df      	lsls	r7, r3, #31
 8007270:	d508      	bpl.n	8007284 <_printf_i+0x144>
 8007272:	6923      	ldr	r3, [r4, #16]
 8007274:	6861      	ldr	r1, [r4, #4]
 8007276:	4299      	cmp	r1, r3
 8007278:	bfde      	ittt	le
 800727a:	2330      	movle	r3, #48	@ 0x30
 800727c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007280:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007284:	1b92      	subs	r2, r2, r6
 8007286:	6122      	str	r2, [r4, #16]
 8007288:	f8cd a000 	str.w	sl, [sp]
 800728c:	464b      	mov	r3, r9
 800728e:	aa03      	add	r2, sp, #12
 8007290:	4621      	mov	r1, r4
 8007292:	4640      	mov	r0, r8
 8007294:	f7ff fee6 	bl	8007064 <_printf_common>
 8007298:	3001      	adds	r0, #1
 800729a:	d14a      	bne.n	8007332 <_printf_i+0x1f2>
 800729c:	f04f 30ff 	mov.w	r0, #4294967295
 80072a0:	b004      	add	sp, #16
 80072a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072a6:	6823      	ldr	r3, [r4, #0]
 80072a8:	f043 0320 	orr.w	r3, r3, #32
 80072ac:	6023      	str	r3, [r4, #0]
 80072ae:	4833      	ldr	r0, [pc, #204]	@ (800737c <_printf_i+0x23c>)
 80072b0:	2778      	movs	r7, #120	@ 0x78
 80072b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80072b6:	6823      	ldr	r3, [r4, #0]
 80072b8:	6831      	ldr	r1, [r6, #0]
 80072ba:	061f      	lsls	r7, r3, #24
 80072bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80072c0:	d402      	bmi.n	80072c8 <_printf_i+0x188>
 80072c2:	065f      	lsls	r7, r3, #25
 80072c4:	bf48      	it	mi
 80072c6:	b2ad      	uxthmi	r5, r5
 80072c8:	6031      	str	r1, [r6, #0]
 80072ca:	07d9      	lsls	r1, r3, #31
 80072cc:	bf44      	itt	mi
 80072ce:	f043 0320 	orrmi.w	r3, r3, #32
 80072d2:	6023      	strmi	r3, [r4, #0]
 80072d4:	b11d      	cbz	r5, 80072de <_printf_i+0x19e>
 80072d6:	2310      	movs	r3, #16
 80072d8:	e7ac      	b.n	8007234 <_printf_i+0xf4>
 80072da:	4827      	ldr	r0, [pc, #156]	@ (8007378 <_printf_i+0x238>)
 80072dc:	e7e9      	b.n	80072b2 <_printf_i+0x172>
 80072de:	6823      	ldr	r3, [r4, #0]
 80072e0:	f023 0320 	bic.w	r3, r3, #32
 80072e4:	6023      	str	r3, [r4, #0]
 80072e6:	e7f6      	b.n	80072d6 <_printf_i+0x196>
 80072e8:	4616      	mov	r6, r2
 80072ea:	e7bd      	b.n	8007268 <_printf_i+0x128>
 80072ec:	6833      	ldr	r3, [r6, #0]
 80072ee:	6825      	ldr	r5, [r4, #0]
 80072f0:	6961      	ldr	r1, [r4, #20]
 80072f2:	1d18      	adds	r0, r3, #4
 80072f4:	6030      	str	r0, [r6, #0]
 80072f6:	062e      	lsls	r6, r5, #24
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	d501      	bpl.n	8007300 <_printf_i+0x1c0>
 80072fc:	6019      	str	r1, [r3, #0]
 80072fe:	e002      	b.n	8007306 <_printf_i+0x1c6>
 8007300:	0668      	lsls	r0, r5, #25
 8007302:	d5fb      	bpl.n	80072fc <_printf_i+0x1bc>
 8007304:	8019      	strh	r1, [r3, #0]
 8007306:	2300      	movs	r3, #0
 8007308:	6123      	str	r3, [r4, #16]
 800730a:	4616      	mov	r6, r2
 800730c:	e7bc      	b.n	8007288 <_printf_i+0x148>
 800730e:	6833      	ldr	r3, [r6, #0]
 8007310:	1d1a      	adds	r2, r3, #4
 8007312:	6032      	str	r2, [r6, #0]
 8007314:	681e      	ldr	r6, [r3, #0]
 8007316:	6862      	ldr	r2, [r4, #4]
 8007318:	2100      	movs	r1, #0
 800731a:	4630      	mov	r0, r6
 800731c:	f7f8 ff80 	bl	8000220 <memchr>
 8007320:	b108      	cbz	r0, 8007326 <_printf_i+0x1e6>
 8007322:	1b80      	subs	r0, r0, r6
 8007324:	6060      	str	r0, [r4, #4]
 8007326:	6863      	ldr	r3, [r4, #4]
 8007328:	6123      	str	r3, [r4, #16]
 800732a:	2300      	movs	r3, #0
 800732c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007330:	e7aa      	b.n	8007288 <_printf_i+0x148>
 8007332:	6923      	ldr	r3, [r4, #16]
 8007334:	4632      	mov	r2, r6
 8007336:	4649      	mov	r1, r9
 8007338:	4640      	mov	r0, r8
 800733a:	47d0      	blx	sl
 800733c:	3001      	adds	r0, #1
 800733e:	d0ad      	beq.n	800729c <_printf_i+0x15c>
 8007340:	6823      	ldr	r3, [r4, #0]
 8007342:	079b      	lsls	r3, r3, #30
 8007344:	d413      	bmi.n	800736e <_printf_i+0x22e>
 8007346:	68e0      	ldr	r0, [r4, #12]
 8007348:	9b03      	ldr	r3, [sp, #12]
 800734a:	4298      	cmp	r0, r3
 800734c:	bfb8      	it	lt
 800734e:	4618      	movlt	r0, r3
 8007350:	e7a6      	b.n	80072a0 <_printf_i+0x160>
 8007352:	2301      	movs	r3, #1
 8007354:	4632      	mov	r2, r6
 8007356:	4649      	mov	r1, r9
 8007358:	4640      	mov	r0, r8
 800735a:	47d0      	blx	sl
 800735c:	3001      	adds	r0, #1
 800735e:	d09d      	beq.n	800729c <_printf_i+0x15c>
 8007360:	3501      	adds	r5, #1
 8007362:	68e3      	ldr	r3, [r4, #12]
 8007364:	9903      	ldr	r1, [sp, #12]
 8007366:	1a5b      	subs	r3, r3, r1
 8007368:	42ab      	cmp	r3, r5
 800736a:	dcf2      	bgt.n	8007352 <_printf_i+0x212>
 800736c:	e7eb      	b.n	8007346 <_printf_i+0x206>
 800736e:	2500      	movs	r5, #0
 8007370:	f104 0619 	add.w	r6, r4, #25
 8007374:	e7f5      	b.n	8007362 <_printf_i+0x222>
 8007376:	bf00      	nop
 8007378:	08007a1d 	.word	0x08007a1d
 800737c:	08007a2e 	.word	0x08007a2e

08007380 <memmove>:
 8007380:	4288      	cmp	r0, r1
 8007382:	b510      	push	{r4, lr}
 8007384:	eb01 0402 	add.w	r4, r1, r2
 8007388:	d902      	bls.n	8007390 <memmove+0x10>
 800738a:	4284      	cmp	r4, r0
 800738c:	4623      	mov	r3, r4
 800738e:	d807      	bhi.n	80073a0 <memmove+0x20>
 8007390:	1e43      	subs	r3, r0, #1
 8007392:	42a1      	cmp	r1, r4
 8007394:	d008      	beq.n	80073a8 <memmove+0x28>
 8007396:	f811 2b01 	ldrb.w	r2, [r1], #1
 800739a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800739e:	e7f8      	b.n	8007392 <memmove+0x12>
 80073a0:	4402      	add	r2, r0
 80073a2:	4601      	mov	r1, r0
 80073a4:	428a      	cmp	r2, r1
 80073a6:	d100      	bne.n	80073aa <memmove+0x2a>
 80073a8:	bd10      	pop	{r4, pc}
 80073aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073b2:	e7f7      	b.n	80073a4 <memmove+0x24>

080073b4 <_sbrk_r>:
 80073b4:	b538      	push	{r3, r4, r5, lr}
 80073b6:	4d06      	ldr	r5, [pc, #24]	@ (80073d0 <_sbrk_r+0x1c>)
 80073b8:	2300      	movs	r3, #0
 80073ba:	4604      	mov	r4, r0
 80073bc:	4608      	mov	r0, r1
 80073be:	602b      	str	r3, [r5, #0]
 80073c0:	f7fc f80c 	bl	80033dc <_sbrk>
 80073c4:	1c43      	adds	r3, r0, #1
 80073c6:	d102      	bne.n	80073ce <_sbrk_r+0x1a>
 80073c8:	682b      	ldr	r3, [r5, #0]
 80073ca:	b103      	cbz	r3, 80073ce <_sbrk_r+0x1a>
 80073cc:	6023      	str	r3, [r4, #0]
 80073ce:	bd38      	pop	{r3, r4, r5, pc}
 80073d0:	200003dc 	.word	0x200003dc

080073d4 <memcpy>:
 80073d4:	440a      	add	r2, r1
 80073d6:	4291      	cmp	r1, r2
 80073d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80073dc:	d100      	bne.n	80073e0 <memcpy+0xc>
 80073de:	4770      	bx	lr
 80073e0:	b510      	push	{r4, lr}
 80073e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80073e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80073ea:	4291      	cmp	r1, r2
 80073ec:	d1f9      	bne.n	80073e2 <memcpy+0xe>
 80073ee:	bd10      	pop	{r4, pc}

080073f0 <_realloc_r>:
 80073f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073f4:	4680      	mov	r8, r0
 80073f6:	4615      	mov	r5, r2
 80073f8:	460c      	mov	r4, r1
 80073fa:	b921      	cbnz	r1, 8007406 <_realloc_r+0x16>
 80073fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007400:	4611      	mov	r1, r2
 8007402:	f7ff bc4b 	b.w	8006c9c <_malloc_r>
 8007406:	b92a      	cbnz	r2, 8007414 <_realloc_r+0x24>
 8007408:	f7ff fbdc 	bl	8006bc4 <_free_r>
 800740c:	2400      	movs	r4, #0
 800740e:	4620      	mov	r0, r4
 8007410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007414:	f000 f81a 	bl	800744c <_malloc_usable_size_r>
 8007418:	4285      	cmp	r5, r0
 800741a:	4606      	mov	r6, r0
 800741c:	d802      	bhi.n	8007424 <_realloc_r+0x34>
 800741e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007422:	d8f4      	bhi.n	800740e <_realloc_r+0x1e>
 8007424:	4629      	mov	r1, r5
 8007426:	4640      	mov	r0, r8
 8007428:	f7ff fc38 	bl	8006c9c <_malloc_r>
 800742c:	4607      	mov	r7, r0
 800742e:	2800      	cmp	r0, #0
 8007430:	d0ec      	beq.n	800740c <_realloc_r+0x1c>
 8007432:	42b5      	cmp	r5, r6
 8007434:	462a      	mov	r2, r5
 8007436:	4621      	mov	r1, r4
 8007438:	bf28      	it	cs
 800743a:	4632      	movcs	r2, r6
 800743c:	f7ff ffca 	bl	80073d4 <memcpy>
 8007440:	4621      	mov	r1, r4
 8007442:	4640      	mov	r0, r8
 8007444:	f7ff fbbe 	bl	8006bc4 <_free_r>
 8007448:	463c      	mov	r4, r7
 800744a:	e7e0      	b.n	800740e <_realloc_r+0x1e>

0800744c <_malloc_usable_size_r>:
 800744c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007450:	1f18      	subs	r0, r3, #4
 8007452:	2b00      	cmp	r3, #0
 8007454:	bfbc      	itt	lt
 8007456:	580b      	ldrlt	r3, [r1, r0]
 8007458:	18c0      	addlt	r0, r0, r3
 800745a:	4770      	bx	lr

0800745c <_init>:
 800745c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800745e:	bf00      	nop
 8007460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007462:	bc08      	pop	{r3}
 8007464:	469e      	mov	lr, r3
 8007466:	4770      	bx	lr

08007468 <_fini>:
 8007468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746a:	bf00      	nop
 800746c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800746e:	bc08      	pop	{r3}
 8007470:	469e      	mov	lr, r3
 8007472:	4770      	bx	lr
